'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Pointplus_Present")>  _
Partial Public Class DataClassesTablet360DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertt360_tblMenuItem(instance As t360_tblMenuItem)
    End Sub
  Partial Private Sub Updatet360_tblMenuItem(instance As t360_tblMenuItem)
    End Sub
  Partial Private Sub Deletet360_tblMenuItem(instance As t360_tblMenuItem)
    End Sub
  Partial Private Sub Insertt360_tblProvice(instance As t360_tblProvice)
    End Sub
  Partial Private Sub Updatet360_tblProvice(instance As t360_tblProvice)
    End Sub
  Partial Private Sub Deletet360_tblProvice(instance As t360_tblProvice)
    End Sub
  Partial Private Sub Insertt360_tblDistrict(instance As t360_tblDistrict)
    End Sub
  Partial Private Sub Updatet360_tblDistrict(instance As t360_tblDistrict)
    End Sub
  Partial Private Sub Deletet360_tblDistrict(instance As t360_tblDistrict)
    End Sub
  Partial Private Sub Insertt360_tblSubDistrict(instance As t360_tblSubDistrict)
    End Sub
  Partial Private Sub Updatet360_tblSubDistrict(instance As t360_tblSubDistrict)
    End Sub
  Partial Private Sub Deletet360_tblSubDistrict(instance As t360_tblSubDistrict)
    End Sub
  Partial Private Sub Insertt360_tblNetwork(instance As t360_tblNetwork)
    End Sub
  Partial Private Sub Updatet360_tblNetwork(instance As t360_tblNetwork)
    End Sub
  Partial Private Sub Deletet360_tblNetwork(instance As t360_tblNetwork)
    End Sub
  Partial Private Sub Insertt360_tblTabletOwner(instance As t360_tblTabletOwner)
    End Sub
  Partial Private Sub Updatet360_tblTabletOwner(instance As t360_tblTabletOwner)
    End Sub
  Partial Private Sub Deletet360_tblTabletOwner(instance As t360_tblTabletOwner)
    End Sub
  Partial Private Sub Insertt360_tblTabletLost(instance As t360_tblTabletLost)
    End Sub
  Partial Private Sub Updatet360_tblTabletLost(instance As t360_tblTabletLost)
    End Sub
  Partial Private Sub Deletet360_tblTabletLost(instance As t360_tblTabletLost)
    End Sub
  Partial Private Sub Insertt360_tblTabletLog(instance As t360_tblTabletLog)
    End Sub
  Partial Private Sub Updatet360_tblTabletLog(instance As t360_tblTabletLog)
    End Sub
  Partial Private Sub Deletet360_tblTabletLog(instance As t360_tblTabletLog)
    End Sub
  Partial Private Sub Insertt360_tblClass(instance As t360_tblClass)
    End Sub
  Partial Private Sub Updatet360_tblClass(instance As t360_tblClass)
    End Sub
  Partial Private Sub Deletet360_tblClass(instance As t360_tblClass)
    End Sub
  Partial Private Sub Insertt360_tblRoom(instance As t360_tblRoom)
    End Sub
  Partial Private Sub Updatet360_tblRoom(instance As t360_tblRoom)
    End Sub
  Partial Private Sub Deletet360_tblRoom(instance As t360_tblRoom)
    End Sub
  Partial Private Sub Insertt360_tblUnit(instance As t360_tblUnit)
    End Sub
  Partial Private Sub Updatet360_tblUnit(instance As t360_tblUnit)
    End Sub
  Partial Private Sub Deletet360_tblUnit(instance As t360_tblUnit)
    End Sub
  Partial Private Sub Insertt360_tblLesson(instance As t360_tblLesson)
    End Sub
  Partial Private Sub Updatet360_tblLesson(instance As t360_tblLesson)
    End Sub
  Partial Private Sub Deletet360_tblLesson(instance As t360_tblLesson)
    End Sub
  Partial Private Sub Insertt360_tblPart(instance As t360_tblPart)
    End Sub
  Partial Private Sub Updatet360_tblPart(instance As t360_tblPart)
    End Sub
  Partial Private Sub Deletet360_tblPart(instance As t360_tblPart)
    End Sub
  Partial Private Sub Insertt360_tblSubjectClass(instance As t360_tblSubjectClass)
    End Sub
  Partial Private Sub Updatet360_tblSubjectClass(instance As t360_tblSubjectClass)
    End Sub
  Partial Private Sub Deletet360_tblSubjectClass(instance As t360_tblSubjectClass)
    End Sub
  Partial Private Sub Insertt360_tblSubjectType(instance As t360_tblSubjectType)
    End Sub
  Partial Private Sub Updatet360_tblSubjectType(instance As t360_tblSubjectType)
    End Sub
  Partial Private Sub Deletet360_tblSubjectType(instance As t360_tblSubjectType)
    End Sub
  Partial Private Sub Insertt360_tblSubject(instance As t360_tblSubject)
    End Sub
  Partial Private Sub Updatet360_tblSubject(instance As t360_tblSubject)
    End Sub
  Partial Private Sub Deletet360_tblSubject(instance As t360_tblSubject)
    End Sub
  Partial Private Sub Insertt360_tblSchoolSubjectType(instance As t360_tblSchoolSubjectType)
    End Sub
  Partial Private Sub Updatet360_tblSchoolSubjectType(instance As t360_tblSchoolSubjectType)
    End Sub
  Partial Private Sub Deletet360_tblSchoolSubjectType(instance As t360_tblSchoolSubjectType)
    End Sub
  Partial Private Sub Insertt360_tblTestType(instance As t360_tblTestType)
    End Sub
  Partial Private Sub Updatet360_tblTestType(instance As t360_tblTestType)
    End Sub
  Partial Private Sub Deletet360_tblTestType(instance As t360_tblTestType)
    End Sub
  Partial Private Sub Insertt360_tblTeacher(instance As t360_tblTeacher)
    End Sub
  Partial Private Sub Updatet360_tblTeacher(instance As t360_tblTeacher)
    End Sub
  Partial Private Sub Deletet360_tblTeacher(instance As t360_tblTeacher)
    End Sub
  Partial Private Sub Insertt360_tblStudentHomeWork(instance As t360_tblStudentHomeWork)
    End Sub
  Partial Private Sub Updatet360_tblStudentHomeWork(instance As t360_tblStudentHomeWork)
    End Sub
  Partial Private Sub Deletet360_tblStudentHomeWork(instance As t360_tblStudentHomeWork)
    End Sub
  Partial Private Sub Insertt360_tblStudentCheckName(instance As t360_tblStudentCheckName)
    End Sub
  Partial Private Sub Updatet360_tblStudentCheckName(instance As t360_tblStudentCheckName)
    End Sub
  Partial Private Sub Deletet360_tblStudentCheckName(instance As t360_tblStudentCheckName)
    End Sub
  Partial Private Sub Insertt360_tblStudentTest(instance As t360_tblStudentTest)
    End Sub
  Partial Private Sub Updatet360_tblStudentTest(instance As t360_tblStudentTest)
    End Sub
  Partial Private Sub Deletet360_tblStudentTest(instance As t360_tblStudentTest)
    End Sub
  Partial Private Sub Insertt360_tblStudentRoom(instance As t360_tblStudentRoom)
    End Sub
  Partial Private Sub Updatet360_tblStudentRoom(instance As t360_tblStudentRoom)
    End Sub
  Partial Private Sub Deletet360_tblStudentRoom(instance As t360_tblStudentRoom)
    End Sub
  Partial Private Sub Insertt360_tblTeacherRoom(instance As t360_tblTeacherRoom)
    End Sub
  Partial Private Sub Updatet360_tblTeacherRoom(instance As t360_tblTeacherRoom)
    End Sub
  Partial Private Sub Deletet360_tblTeacherRoom(instance As t360_tblTeacherRoom)
    End Sub
  Partial Private Sub Insertt360_tblTempStudent(instance As t360_tblTempStudent)
    End Sub
  Partial Private Sub Updatet360_tblTempStudent(instance As t360_tblTempStudent)
    End Sub
  Partial Private Sub Deletet360_tblTempStudent(instance As t360_tblTempStudent)
    End Sub
  Partial Private Sub Insertt360_tblNetworkHistory(instance As t360_tblNetworkHistory)
    End Sub
  Partial Private Sub Updatet360_tblNetworkHistory(instance As t360_tblNetworkHistory)
    End Sub
  Partial Private Sub Deletet360_tblNetworkHistory(instance As t360_tblNetworkHistory)
    End Sub
  Partial Private Sub InserttblModule(instance As tblModule)
    End Sub
  Partial Private Sub UpdatetblModule(instance As tblModule)
    End Sub
  Partial Private Sub DeletetblModule(instance As tblModule)
    End Sub
  Partial Private Sub InserttblModuleDetail(instance As tblModuleDetail)
    End Sub
  Partial Private Sub UpdatetblModuleDetail(instance As tblModuleDetail)
    End Sub
  Partial Private Sub DeletetblModuleDetail(instance As tblModuleDetail)
    End Sub
  Partial Private Sub InserttblModuleAssignmentDetail(instance As tblModuleAssignmentDetail)
    End Sub
  Partial Private Sub UpdatetblModuleAssignmentDetail(instance As tblModuleAssignmentDetail)
    End Sub
  Partial Private Sub DeletetblModuleAssignmentDetail(instance As tblModuleAssignmentDetail)
    End Sub
  Partial Private Sub InserttblTestSet(instance As tblTestSet)
    End Sub
  Partial Private Sub UpdatetblTestSet(instance As tblTestSet)
    End Sub
  Partial Private Sub DeletetblTestSet(instance As tblTestSet)
    End Sub
  Partial Private Sub Insertt360_tblStudent(instance As t360_tblStudent)
    End Sub
  Partial Private Sub Updatet360_tblStudent(instance As t360_tblStudent)
    End Sub
  Partial Private Sub Deletet360_tblStudent(instance As t360_tblStudent)
    End Sub
  Partial Private Sub InserttblMobileAccessPassword(instance As tblMobileAccessPassword)
    End Sub
  Partial Private Sub UpdatetblMobileAccessPassword(instance As tblMobileAccessPassword)
    End Sub
  Partial Private Sub DeletetblMobileAccessPassword(instance As tblMobileAccessPassword)
    End Sub
  Partial Private Sub InserttblMobileRegistration(instance As tblMobileRegistration)
    End Sub
  Partial Private Sub UpdatetblMobileRegistration(instance As tblMobileRegistration)
    End Sub
  Partial Private Sub DeletetblMobileRegistration(instance As tblMobileRegistration)
    End Sub
  Partial Private Sub InserttblGroupSubject(instance As tblGroupSubject)
    End Sub
  Partial Private Sub UpdatetblGroupSubject(instance As tblGroupSubject)
    End Sub
  Partial Private Sub DeletetblGroupSubject(instance As tblGroupSubject)
    End Sub
  Partial Private Sub InserttblSchool(instance As tblSchool)
    End Sub
  Partial Private Sub UpdatetblSchool(instance As tblSchool)
    End Sub
  Partial Private Sub DeletetblSchool(instance As tblSchool)
    End Sub
  Partial Private Sub InserttblAmphur(instance As tblAmphur)
    End Sub
  Partial Private Sub UpdatetblAmphur(instance As tblAmphur)
    End Sub
  Partial Private Sub DeletetblAmphur(instance As tblAmphur)
    End Sub
  Partial Private Sub InserttblProvince(instance As tblProvince)
    End Sub
  Partial Private Sub UpdatetblProvince(instance As tblProvince)
    End Sub
  Partial Private Sub DeletetblProvince(instance As tblProvince)
    End Sub
  Partial Private Sub InserttblTambol(instance As tblTambol)
    End Sub
  Partial Private Sub UpdatetblTambol(instance As tblTambol)
    End Sub
  Partial Private Sub DeletetblTambol(instance As tblTambol)
    End Sub
  Partial Private Sub InserttblModuleAssignment(instance As tblModuleAssignment)
    End Sub
  Partial Private Sub UpdatetblModuleAssignment(instance As tblModuleAssignment)
    End Sub
  Partial Private Sub DeletetblModuleAssignment(instance As tblModuleAssignment)
    End Sub
  Partial Private Sub InserttblQuiz(instance As tblQuiz)
    End Sub
  Partial Private Sub UpdatetblQuiz(instance As tblQuiz)
    End Sub
  Partial Private Sub DeletetblQuiz(instance As tblQuiz)
    End Sub
  Partial Private Sub Insertt360_tblUplevelConfirm(instance As t360_tblUplevelConfirm)
    End Sub
  Partial Private Sub Updatet360_tblUplevelConfirm(instance As t360_tblUplevelConfirm)
    End Sub
  Partial Private Sub Deletet360_tblUplevelConfirm(instance As t360_tblUplevelConfirm)
    End Sub
  Partial Private Sub Insertt360_tblSetTypeRunStudentNumber(instance As t360_tblSetTypeRunStudentNumber)
    End Sub
  Partial Private Sub Updatet360_tblSetTypeRunStudentNumber(instance As t360_tblSetTypeRunStudentNumber)
    End Sub
  Partial Private Sub Deletet360_tblSetTypeRunStudentNumber(instance As t360_tblSetTypeRunStudentNumber)
    End Sub
  Partial Private Sub Insertt360_tblUser(instance As t360_tblUser)
    End Sub
  Partial Private Sub Updatet360_tblUser(instance As t360_tblUser)
    End Sub
  Partial Private Sub Deletet360_tblUser(instance As t360_tblUser)
    End Sub
  Partial Private Sub Insertt360_tblStudentFinish(instance As t360_tblStudentFinish)
    End Sub
  Partial Private Sub Updatet360_tblStudentFinish(instance As t360_tblStudentFinish)
    End Sub
  Partial Private Sub Deletet360_tblStudentFinish(instance As t360_tblStudentFinish)
    End Sub
  Partial Private Sub Insertt360_tblNewsRoom(instance As t360_tblNewsRoom)
    End Sub
  Partial Private Sub Updatet360_tblNewsRoom(instance As t360_tblNewsRoom)
    End Sub
  Partial Private Sub Deletet360_tblNewsRoom(instance As t360_tblNewsRoom)
    End Sub
  Partial Private Sub Insertt360_tblUserMenuItem(instance As t360_tblUserMenuItem)
    End Sub
  Partial Private Sub Updatet360_tblUserMenuItem(instance As t360_tblUserMenuItem)
    End Sub
  Partial Private Sub Deletet360_tblUserMenuItem(instance As t360_tblUserMenuItem)
    End Sub
  Partial Private Sub Insertt360_tblSchool(instance As t360_tblSchool)
    End Sub
  Partial Private Sub Updatet360_tblSchool(instance As t360_tblSchool)
    End Sub
  Partial Private Sub Deletet360_tblSchool(instance As t360_tblSchool)
    End Sub
  Partial Private Sub InserttblAssistant(instance As tblAssistant)
    End Sub
  Partial Private Sub UpdatetblAssistant(instance As tblAssistant)
    End Sub
  Partial Private Sub DeletetblAssistant(instance As tblAssistant)
    End Sub
  Partial Private Sub Insertt360_tblLog(instance As t360_tblLog)
    End Sub
  Partial Private Sub Updatet360_tblLog(instance As t360_tblLog)
    End Sub
  Partial Private Sub Deletet360_tblLog(instance As t360_tblLog)
    End Sub
  Partial Private Sub InserttblSetEmail(instance As tblSetEmail)
    End Sub
  Partial Private Sub UpdatetblSetEmail(instance As tblSetEmail)
    End Sub
  Partial Private Sub DeletetblSetEmail(instance As tblSetEmail)
    End Sub
  Partial Private Sub Insertt360_tblNew(instance As t360_tblNew)
    End Sub
  Partial Private Sub Updatet360_tblNew(instance As t360_tblNew)
    End Sub
  Partial Private Sub Deletet360_tblNew(instance As t360_tblNew)
    End Sub
  Partial Private Sub Insertt360_tblSchoolClass(instance As t360_tblSchoolClass)
    End Sub
  Partial Private Sub Updatet360_tblSchoolClass(instance As t360_tblSchoolClass)
    End Sub
  Partial Private Sub Deletet360_tblSchoolClass(instance As t360_tblSchoolClass)
    End Sub
  Partial Private Sub InserttblModuleDetailCompletion(instance As tblModuleDetailCompletion)
    End Sub
  Partial Private Sub UpdatetblModuleDetailCompletion(instance As tblModuleDetailCompletion)
    End Sub
  Partial Private Sub DeletetblModuleDetailCompletion(instance As tblModuleDetailCompletion)
    End Sub
  Partial Private Sub InserttblSyncLog(instance As tblSyncLog)
    End Sub
  Partial Private Sub UpdatetblSyncLog(instance As tblSyncLog)
    End Sub
  Partial Private Sub DeletetblSyncLog(instance As tblSyncLog)
    End Sub
  Partial Private Sub Insertt360_tblCalendar(instance As t360_tblCalendar)
    End Sub
  Partial Private Sub Updatet360_tblCalendar(instance As t360_tblCalendar)
    End Sub
  Partial Private Sub Deletet360_tblCalendar(instance As t360_tblCalendar)
    End Sub
  Partial Private Sub InserttblUser(instance As tblUser)
    End Sub
  Partial Private Sub UpdatetblUser(instance As tblUser)
    End Sub
  Partial Private Sub DeletetblUser(instance As tblUser)
    End Sub
  Partial Private Sub InserttblUserSubjectClass(instance As tblUserSubjectClass)
    End Sub
  Partial Private Sub UpdatetblUserSubjectClass(instance As tblUserSubjectClass)
    End Sub
  Partial Private Sub DeletetblUserSubjectClass(instance As tblUserSubjectClass)
    End Sub
  Partial Private Sub Insertt360_tblTabletRepair(instance As t360_tblTabletRepair)
    End Sub
  Partial Private Sub Updatet360_tblTabletRepair(instance As t360_tblTabletRepair)
    End Sub
  Partial Private Sub Deletet360_tblTabletRepair(instance As t360_tblTabletRepair)
    End Sub
  Partial Private Sub Insertt360_tblUpLevelDetail(instance As t360_tblUpLevelDetail)
    End Sub
  Partial Private Sub Updatet360_tblUpLevelDetail(instance As t360_tblUpLevelDetail)
    End Sub
  Partial Private Sub Deletet360_tblUpLevelDetail(instance As t360_tblUpLevelDetail)
    End Sub
  Partial Private Sub InserttblLog(instance As tblLog)
    End Sub
  Partial Private Sub UpdatetblLog(instance As tblLog)
    End Sub
  Partial Private Sub DeletetblLog(instance As tblLog)
    End Sub
  Partial Private Sub Insertt360_tblTempTeacher(instance As t360_tblTempTeacher)
    End Sub
  Partial Private Sub Updatet360_tblTempTeacher(instance As t360_tblTempTeacher)
    End Sub
  Partial Private Sub Deletet360_tblTempTeacher(instance As t360_tblTempTeacher)
    End Sub
  Partial Private Sub InserttblTabletLab(instance As tblTabletLab)
    End Sub
  Partial Private Sub UpdatetblTabletLab(instance As tblTabletLab)
    End Sub
  Partial Private Sub DeletetblTabletLab(instance As tblTabletLab)
    End Sub
  Partial Private Sub InserttblTabletLabDesk(instance As tblTabletLabDesk)
    End Sub
  Partial Private Sub UpdatetblTabletLabDesk(instance As tblTabletLabDesk)
    End Sub
  Partial Private Sub DeletetblTabletLabDesk(instance As tblTabletLabDesk)
    End Sub
  Partial Private Sub Insertt360_tblUpLevel(instance As t360_tblUpLevel)
    End Sub
  Partial Private Sub Updatet360_tblUpLevel(instance As t360_tblUpLevel)
    End Sub
  Partial Private Sub Deletet360_tblUpLevel(instance As t360_tblUpLevel)
    End Sub
  Partial Private Sub Insertt360_tblNewsDetailCompletion(instance As t360_tblNewsDetailCompletion)
    End Sub
  Partial Private Sub Updatet360_tblNewsDetailCompletion(instance As t360_tblNewsDetailCompletion)
    End Sub
  Partial Private Sub Deletet360_tblNewsDetailCompletion(instance As t360_tblNewsDetailCompletion)
    End Sub
  Partial Private Sub Insertt360_tblTabletStatusDetail(instance As t360_tblTabletStatusDetail)
    End Sub
  Partial Private Sub Updatet360_tblTabletStatusDetail(instance As t360_tblTabletStatusDetail)
    End Sub
  Partial Private Sub Deletet360_tblTabletStatusDetail(instance As t360_tblTabletStatusDetail)
    End Sub
  Partial Private Sub Insertt360_tblTablet(instance As t360_tblTablet)
    End Sub
  Partial Private Sub Updatet360_tblTablet(instance As t360_tblTablet)
    End Sub
  Partial Private Sub Deletet360_tblTablet(instance As t360_tblTablet)
    End Sub
  Partial Private Sub Insertt360_tblNetworkWarnReason(instance As t360_tblNetworkWarnReason)
    End Sub
  Partial Private Sub Updatet360_tblNetworkWarnReason(instance As t360_tblNetworkWarnReason)
    End Sub
  Partial Private Sub Deletet360_tblNetworkWarnReason(instance As t360_tblNetworkWarnReason)
    End Sub
  Partial Private Sub InserttblSchoolSubjectClass(instance As tblSchoolSubjectClass)
    End Sub
  Partial Private Sub UpdatetblSchoolSubjectClass(instance As tblSchoolSubjectClass)
    End Sub
  Partial Private Sub DeletetblSchoolSubjectClass(instance As tblSchoolSubjectClass)
    End Sub
  #End Region
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property uvwFoundTablets() As System.Data.Linq.Table(Of uvwFoundTablet)
		Get
			Return Me.GetTable(Of uvwFoundTablet)
		End Get
	End Property
	
	Public ReadOnly Property uvwPercentClasses() As System.Data.Linq.Table(Of uvwPercentClass)
		Get
			Return Me.GetTable(Of uvwPercentClass)
		End Get
	End Property
	
	Public ReadOnly Property uvwStatisticReports() As System.Data.Linq.Table(Of uvwStatisticReport)
		Get
			Return Me.GetTable(Of uvwStatisticReport)
		End Get
	End Property
	
	Public ReadOnly Property uvwUseLocations() As System.Data.Linq.Table(Of uvwUseLocation)
		Get
			Return Me.GetTable(Of uvwUseLocation)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblMenuItems() As System.Data.Linq.Table(Of t360_tblMenuItem)
		Get
			Return Me.GetTable(Of t360_tblMenuItem)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblProvices() As System.Data.Linq.Table(Of t360_tblProvice)
		Get
			Return Me.GetTable(Of t360_tblProvice)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblDistricts() As System.Data.Linq.Table(Of t360_tblDistrict)
		Get
			Return Me.GetTable(Of t360_tblDistrict)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblSubDistricts() As System.Data.Linq.Table(Of t360_tblSubDistrict)
		Get
			Return Me.GetTable(Of t360_tblSubDistrict)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblNetworks() As System.Data.Linq.Table(Of t360_tblNetwork)
		Get
			Return Me.GetTable(Of t360_tblNetwork)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTabletOwners() As System.Data.Linq.Table(Of t360_tblTabletOwner)
		Get
			Return Me.GetTable(Of t360_tblTabletOwner)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTabletLosts() As System.Data.Linq.Table(Of t360_tblTabletLost)
		Get
			Return Me.GetTable(Of t360_tblTabletLost)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTabletLogs() As System.Data.Linq.Table(Of t360_tblTabletLog)
		Get
			Return Me.GetTable(Of t360_tblTabletLog)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblClasses() As System.Data.Linq.Table(Of t360_tblClass)
		Get
			Return Me.GetTable(Of t360_tblClass)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblRooms() As System.Data.Linq.Table(Of t360_tblRoom)
		Get
			Return Me.GetTable(Of t360_tblRoom)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblUnits() As System.Data.Linq.Table(Of t360_tblUnit)
		Get
			Return Me.GetTable(Of t360_tblUnit)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblLessons() As System.Data.Linq.Table(Of t360_tblLesson)
		Get
			Return Me.GetTable(Of t360_tblLesson)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblParts() As System.Data.Linq.Table(Of t360_tblPart)
		Get
			Return Me.GetTable(Of t360_tblPart)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblSubjectClasses() As System.Data.Linq.Table(Of t360_tblSubjectClass)
		Get
			Return Me.GetTable(Of t360_tblSubjectClass)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblSubjectTypes() As System.Data.Linq.Table(Of t360_tblSubjectType)
		Get
			Return Me.GetTable(Of t360_tblSubjectType)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblSubjects() As System.Data.Linq.Table(Of t360_tblSubject)
		Get
			Return Me.GetTable(Of t360_tblSubject)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblSchoolSubjectTypes() As System.Data.Linq.Table(Of t360_tblSchoolSubjectType)
		Get
			Return Me.GetTable(Of t360_tblSchoolSubjectType)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTestTypes() As System.Data.Linq.Table(Of t360_tblTestType)
		Get
			Return Me.GetTable(Of t360_tblTestType)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTeachers() As System.Data.Linq.Table(Of t360_tblTeacher)
		Get
			Return Me.GetTable(Of t360_tblTeacher)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblStudentHomeWorks() As System.Data.Linq.Table(Of t360_tblStudentHomeWork)
		Get
			Return Me.GetTable(Of t360_tblStudentHomeWork)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblStudentCheckNames() As System.Data.Linq.Table(Of t360_tblStudentCheckName)
		Get
			Return Me.GetTable(Of t360_tblStudentCheckName)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblStudentTests() As System.Data.Linq.Table(Of t360_tblStudentTest)
		Get
			Return Me.GetTable(Of t360_tblStudentTest)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblStudentRooms() As System.Data.Linq.Table(Of t360_tblStudentRoom)
		Get
			Return Me.GetTable(Of t360_tblStudentRoom)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTeacherRooms() As System.Data.Linq.Table(Of t360_tblTeacherRoom)
		Get
			Return Me.GetTable(Of t360_tblTeacherRoom)
		End Get
	End Property
	
	Public ReadOnly Property t360_uvwTabletDetails() As System.Data.Linq.Table(Of t360_uvwTabletDetail)
		Get
			Return Me.GetTable(Of t360_uvwTabletDetail)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTempStudents() As System.Data.Linq.Table(Of t360_tblTempStudent)
		Get
			Return Me.GetTable(Of t360_tblTempStudent)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblNetworkHistories() As System.Data.Linq.Table(Of t360_tblNetworkHistory)
		Get
			Return Me.GetTable(Of t360_tblNetworkHistory)
		End Get
	End Property
	
	Public ReadOnly Property tblModules() As System.Data.Linq.Table(Of tblModule)
		Get
			Return Me.GetTable(Of tblModule)
		End Get
	End Property
	
	Public ReadOnly Property tblModuleDetails() As System.Data.Linq.Table(Of tblModuleDetail)
		Get
			Return Me.GetTable(Of tblModuleDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblModuleAssignmentDetails() As System.Data.Linq.Table(Of tblModuleAssignmentDetail)
		Get
			Return Me.GetTable(Of tblModuleAssignmentDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblTestSets() As System.Data.Linq.Table(Of tblTestSet)
		Get
			Return Me.GetTable(Of tblTestSet)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblStudents() As System.Data.Linq.Table(Of t360_tblStudent)
		Get
			Return Me.GetTable(Of t360_tblStudent)
		End Get
	End Property
	
	Public ReadOnly Property uvw_GetSubjectForHomeworks() As System.Data.Linq.Table(Of uvw_GetSubjectForHomework)
		Get
			Return Me.GetTable(Of uvw_GetSubjectForHomework)
		End Get
	End Property
	
	Public ReadOnly Property uvw_StudentHomeworkScores() As System.Data.Linq.Table(Of uvw_StudentHomeworkScore)
		Get
			Return Me.GetTable(Of uvw_StudentHomeworkScore)
		End Get
	End Property
	
	Public ReadOnly Property uvw_StudentDoAllQuizs() As System.Data.Linq.Table(Of uvw_StudentDoAllQuiz)
		Get
			Return Me.GetTable(Of uvw_StudentDoAllQuiz)
		End Get
	End Property
	
	Public ReadOnly Property uvw_TeacherCreateTestsets() As System.Data.Linq.Table(Of uvw_TeacherCreateTestset)
		Get
			Return Me.GetTable(Of uvw_TeacherCreateTestset)
		End Get
	End Property
	
	Public ReadOnly Property uvw_TeacherCreateHomeworks() As System.Data.Linq.Table(Of uvw_TeacherCreateHomework)
		Get
			Return Me.GetTable(Of uvw_TeacherCreateHomework)
		End Get
	End Property
	
	Public ReadOnly Property uvw_TeacherCreateQuizs() As System.Data.Linq.Table(Of uvw_TeacherCreateQuiz)
		Get
			Return Me.GetTable(Of uvw_TeacherCreateQuiz)
		End Get
	End Property
	
	Public ReadOnly Property uvw_TeacherCreateSubjects() As System.Data.Linq.Table(Of uvw_TeacherCreateSubject)
		Get
			Return Me.GetTable(Of uvw_TeacherCreateSubject)
		End Get
	End Property
	
	Public ReadOnly Property tblMobileAccessPasswords() As System.Data.Linq.Table(Of tblMobileAccessPassword)
		Get
			Return Me.GetTable(Of tblMobileAccessPassword)
		End Get
	End Property
	
	Public ReadOnly Property tblMobileRegistrations() As System.Data.Linq.Table(Of tblMobileRegistration)
		Get
			Return Me.GetTable(Of tblMobileRegistration)
		End Get
	End Property
	
	Public ReadOnly Property tblGroupSubjects() As System.Data.Linq.Table(Of tblGroupSubject)
		Get
			Return Me.GetTable(Of tblGroupSubject)
		End Get
	End Property
	
	Public ReadOnly Property tblSchools() As System.Data.Linq.Table(Of tblSchool)
		Get
			Return Me.GetTable(Of tblSchool)
		End Get
	End Property
	
	Public ReadOnly Property tblAmphurs() As System.Data.Linq.Table(Of tblAmphur)
		Get
			Return Me.GetTable(Of tblAmphur)
		End Get
	End Property
	
	Public ReadOnly Property tblProvinces() As System.Data.Linq.Table(Of tblProvince)
		Get
			Return Me.GetTable(Of tblProvince)
		End Get
	End Property
	
	Public ReadOnly Property tblTambols() As System.Data.Linq.Table(Of tblTambol)
		Get
			Return Me.GetTable(Of tblTambol)
		End Get
	End Property
	
	Public ReadOnly Property tblModuleAssignments() As System.Data.Linq.Table(Of tblModuleAssignment)
		Get
			Return Me.GetTable(Of tblModuleAssignment)
		End Get
	End Property
	
	Public ReadOnly Property tblQuizs() As System.Data.Linq.Table(Of tblQuiz)
		Get
			Return Me.GetTable(Of tblQuiz)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblUplevelConfirms() As System.Data.Linq.Table(Of t360_tblUplevelConfirm)
		Get
			Return Me.GetTable(Of t360_tblUplevelConfirm)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblSetTypeRunStudentNumbers() As System.Data.Linq.Table(Of t360_tblSetTypeRunStudentNumber)
		Get
			Return Me.GetTable(Of t360_tblSetTypeRunStudentNumber)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblUsers() As System.Data.Linq.Table(Of t360_tblUser)
		Get
			Return Me.GetTable(Of t360_tblUser)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblStudentFinishes() As System.Data.Linq.Table(Of t360_tblStudentFinish)
		Get
			Return Me.GetTable(Of t360_tblStudentFinish)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblNewsRooms() As System.Data.Linq.Table(Of t360_tblNewsRoom)
		Get
			Return Me.GetTable(Of t360_tblNewsRoom)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblUserMenuItems() As System.Data.Linq.Table(Of t360_tblUserMenuItem)
		Get
			Return Me.GetTable(Of t360_tblUserMenuItem)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblSchools() As System.Data.Linq.Table(Of t360_tblSchool)
		Get
			Return Me.GetTable(Of t360_tblSchool)
		End Get
	End Property
	
	Public ReadOnly Property tblAssistants() As System.Data.Linq.Table(Of tblAssistant)
		Get
			Return Me.GetTable(Of tblAssistant)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblLogs() As System.Data.Linq.Table(Of t360_tblLog)
		Get
			Return Me.GetTable(Of t360_tblLog)
		End Get
	End Property
	
	Public ReadOnly Property tblSetEmails() As System.Data.Linq.Table(Of tblSetEmail)
		Get
			Return Me.GetTable(Of tblSetEmail)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblNews() As System.Data.Linq.Table(Of t360_tblNew)
		Get
			Return Me.GetTable(Of t360_tblNew)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblSchoolClasses() As System.Data.Linq.Table(Of t360_tblSchoolClass)
		Get
			Return Me.GetTable(Of t360_tblSchoolClass)
		End Get
	End Property
	
	Public ReadOnly Property tblModuleDetailCompletions() As System.Data.Linq.Table(Of tblModuleDetailCompletion)
		Get
			Return Me.GetTable(Of tblModuleDetailCompletion)
		End Get
	End Property
	
	Public ReadOnly Property tblSyncLogs() As System.Data.Linq.Table(Of tblSyncLog)
		Get
			Return Me.GetTable(Of tblSyncLog)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblCalendars() As System.Data.Linq.Table(Of t360_tblCalendar)
		Get
			Return Me.GetTable(Of t360_tblCalendar)
		End Get
	End Property
	
	Public ReadOnly Property tblLevels() As System.Data.Linq.Table(Of tblLevel)
		Get
			Return Me.GetTable(Of tblLevel)
		End Get
	End Property
	
	Public ReadOnly Property tblUsers() As System.Data.Linq.Table(Of tblUser)
		Get
			Return Me.GetTable(Of tblUser)
		End Get
	End Property
	
	Public ReadOnly Property tblUserSubjectClasses() As System.Data.Linq.Table(Of tblUserSubjectClass)
		Get
			Return Me.GetTable(Of tblUserSubjectClass)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTabletRepairs() As System.Data.Linq.Table(Of t360_tblTabletRepair)
		Get
			Return Me.GetTable(Of t360_tblTabletRepair)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblUpLevelDetails() As System.Data.Linq.Table(Of t360_tblUpLevelDetail)
		Get
			Return Me.GetTable(Of t360_tblUpLevelDetail)
		End Get
	End Property
	
	Public ReadOnly Property tblLogs() As System.Data.Linq.Table(Of tblLog)
		Get
			Return Me.GetTable(Of tblLog)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTempTeachers() As System.Data.Linq.Table(Of t360_tblTempTeacher)
		Get
			Return Me.GetTable(Of t360_tblTempTeacher)
		End Get
	End Property
	
	Public ReadOnly Property tblTabletLabs() As System.Data.Linq.Table(Of tblTabletLab)
		Get
			Return Me.GetTable(Of tblTabletLab)
		End Get
	End Property
	
	Public ReadOnly Property tblTabletLabDesks() As System.Data.Linq.Table(Of tblTabletLabDesk)
		Get
			Return Me.GetTable(Of tblTabletLabDesk)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblUpLevels() As System.Data.Linq.Table(Of t360_tblUpLevel)
		Get
			Return Me.GetTable(Of t360_tblUpLevel)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblNewsDetailCompletions() As System.Data.Linq.Table(Of t360_tblNewsDetailCompletion)
		Get
			Return Me.GetTable(Of t360_tblNewsDetailCompletion)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTabletStatusDetails() As System.Data.Linq.Table(Of t360_tblTabletStatusDetail)
		Get
			Return Me.GetTable(Of t360_tblTabletStatusDetail)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblTablets() As System.Data.Linq.Table(Of t360_tblTablet)
		Get
			Return Me.GetTable(Of t360_tblTablet)
		End Get
	End Property
	
	Public ReadOnly Property t360_tblNetworkWarnReasons() As System.Data.Linq.Table(Of t360_tblNetworkWarnReason)
		Get
			Return Me.GetTable(Of t360_tblNetworkWarnReason)
		End Get
	End Property
	
	Public ReadOnly Property tblSchoolSubjectClasses() As System.Data.Linq.Table(Of tblSchoolSubjectClass)
		Get
			Return Me.GetTable(Of tblSchoolSubjectClass)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.spTabletStatus")>  _
	Public Function spTabletStatus(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="School_Code", DbType:="VarChar(20)")> ByVal school_Code As String) As ISingleResult(Of spTabletStatusResult1)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), school_Code)
		Return CType(result.ReturnValue,ISingleResult(Of spTabletStatusResult1))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvwFoundTablet")>  _
Partial Public Class uvwFoundTablet
	
	Private _School_Code As Integer
	
	Private _Normal_Found As Integer
	
	Private _Three_Day As Integer
	
	Private _Lot_Day As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="Int NOT NULL")>  _
	Public Property School_Code() As Integer
		Get
			Return Me._School_Code
		End Get
		Set
			If ((Me._School_Code = value)  _
						= false) Then
				Me._School_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Normal_Found", DbType:="Int NOT NULL")>  _
	Public Property Normal_Found() As Integer
		Get
			Return Me._Normal_Found
		End Get
		Set
			If ((Me._Normal_Found = value)  _
						= false) Then
				Me._Normal_Found = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Three_Day", DbType:="Int NOT NULL")>  _
	Public Property Three_Day() As Integer
		Get
			Return Me._Three_Day
		End Get
		Set
			If ((Me._Three_Day = value)  _
						= false) Then
				Me._Three_Day = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lot_Day", DbType:="Int NOT NULL")>  _
	Public Property Lot_Day() As Integer
		Get
			Return Me._Lot_Day
		End Get
		Set
			If ((Me._Lot_Day = value)  _
						= false) Then
				Me._Lot_Day = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvwPercentClass")>  _
Partial Public Class uvwPercentClass
	
	Private _School_Code As Integer
	
	Private _Class_Date As Date
	
	Private _Percent_Use As Decimal
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="Int NOT NULL")>  _
	Public Property School_Code() As Integer
		Get
			Return Me._School_Code
		End Get
		Set
			If ((Me._School_Code = value)  _
						= false) Then
				Me._School_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Date", DbType:="DateTime")>  _
	Public Property Class_Date() As Date
		Get
			Return Me._Class_Date
		End Get
		Set
			If ((Me._Class_Date = value)  _
						= false) Then
				Me._Class_Date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Percent_Use", DbType:="Decimal(3,1) NOT NULL")>  _
	Public Property Percent_Use() As Decimal
		Get
			Return Me._Percent_Use
		End Get
		Set
			If ((Me._Percent_Use = value)  _
						= false) Then
				Me._Percent_Use = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvwStatisticReport")>  _
Partial Public Class uvwStatisticReport
	
	Private _School_Code As Integer
	
	Private _Count_Student As Integer
	
	Private _Count_Teacher As Integer
	
	Private _Tablet_Student As Integer
	
	Private _Tablet_Teacher As Integer
	
	Private _Count_Study As Integer
	
	Private _Start_Use As System.Nullable(Of Date)
	
	Private _Student_Study As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="Int NOT NULL")>  _
	Public Property School_Code() As Integer
		Get
			Return Me._School_Code
		End Get
		Set
			If ((Me._School_Code = value)  _
						= false) Then
				Me._School_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Count_Student", DbType:="Int NOT NULL")>  _
	Public Property Count_Student() As Integer
		Get
			Return Me._Count_Student
		End Get
		Set
			If ((Me._Count_Student = value)  _
						= false) Then
				Me._Count_Student = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Count_Teacher", DbType:="Int NOT NULL")>  _
	Public Property Count_Teacher() As Integer
		Get
			Return Me._Count_Teacher
		End Get
		Set
			If ((Me._Count_Teacher = value)  _
						= false) Then
				Me._Count_Teacher = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_Student", DbType:="Int NOT NULL")>  _
	Public Property Tablet_Student() As Integer
		Get
			Return Me._Tablet_Student
		End Get
		Set
			If ((Me._Tablet_Student = value)  _
						= false) Then
				Me._Tablet_Student = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_Teacher", DbType:="Int NOT NULL")>  _
	Public Property Tablet_Teacher() As Integer
		Get
			Return Me._Tablet_Teacher
		End Get
		Set
			If ((Me._Tablet_Teacher = value)  _
						= false) Then
				Me._Tablet_Teacher = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Count_Study", DbType:="Int NOT NULL")>  _
	Public Property Count_Study() As Integer
		Get
			Return Me._Count_Study
		End Get
		Set
			If ((Me._Count_Study = value)  _
						= false) Then
				Me._Count_Study = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Start_Use", DbType:="DateTime")>  _
	Public Property Start_Use() As System.Nullable(Of Date)
		Get
			Return Me._Start_Use
		End Get
		Set
			If (Me._Start_Use.Equals(value) = false) Then
				Me._Start_Use = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Study", DbType:="Int NOT NULL")>  _
	Public Property Student_Study() As Integer
		Get
			Return Me._Student_Study
		End Get
		Set
			If ((Me._Student_Study = value)  _
						= false) Then
				Me._Student_Study = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvwUseLocation")>  _
Partial Public Class uvwUseLocation
	
	Private _School_Code As Integer
	
	Private _Out_Class As Integer
	
	Private _In_Class As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="Int NOT NULL")>  _
	Public Property School_Code() As Integer
		Get
			Return Me._School_Code
		End Get
		Set
			If ((Me._School_Code = value)  _
						= false) Then
				Me._School_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Out_Class", DbType:="Int NOT NULL")>  _
	Public Property Out_Class() As Integer
		Get
			Return Me._Out_Class
		End Get
		Set
			If ((Me._Out_Class = value)  _
						= false) Then
				Me._Out_Class = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_In_Class", DbType:="Int NOT NULL")>  _
	Public Property In_Class() As Integer
		Get
			Return Me._In_Class
		End Get
		Set
			If ((Me._In_Class = value)  _
						= false) Then
				Me._In_Class = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblMenuItem")>  _
Partial Public Class t360_tblMenuItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MenuItem_Code As Short
	
	Private _MenuItem_Parent As System.Nullable(Of Short)
	
	Private _MenuItem_Name As String
	
	Private _MenuItem_Page As String
	
	Private _MenuItem_Type As Byte
	
	Private _MenuItem_Order As Byte
	
	Private _MenuItem_IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _t360_tblUserMenuItems As EntitySet(Of t360_tblUserMenuItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMenuItem_CodeChanging(value As Short)
    End Sub
    Partial Private Sub OnMenuItem_CodeChanged()
    End Sub
    Partial Private Sub OnMenuItem_ParentChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnMenuItem_ParentChanged()
    End Sub
    Partial Private Sub OnMenuItem_NameChanging(value As String)
    End Sub
    Partial Private Sub OnMenuItem_NameChanged()
    End Sub
    Partial Private Sub OnMenuItem_PageChanging(value As String)
    End Sub
    Partial Private Sub OnMenuItem_PageChanged()
    End Sub
    Partial Private Sub OnMenuItem_TypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnMenuItem_TypeChanged()
    End Sub
    Partial Private Sub OnMenuItem_OrderChanging(value As Byte)
    End Sub
    Partial Private Sub OnMenuItem_OrderChanged()
    End Sub
    Partial Private Sub OnMenuItem_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMenuItem_IsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblUserMenuItems = New EntitySet(Of t360_tblUserMenuItem)(AddressOf Me.attach_t360_tblUserMenuItems, AddressOf Me.detach_t360_tblUserMenuItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuItem_Code", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property MenuItem_Code() As Short
		Get
			Return Me._MenuItem_Code
		End Get
		Set
			If ((Me._MenuItem_Code = value)  _
						= false) Then
				Me.OnMenuItem_CodeChanging(value)
				Me.SendPropertyChanging
				Me._MenuItem_Code = value
				Me.SendPropertyChanged("MenuItem_Code")
				Me.OnMenuItem_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuItem_Parent", DbType:="SmallInt")>  _
	Public Property MenuItem_Parent() As System.Nullable(Of Short)
		Get
			Return Me._MenuItem_Parent
		End Get
		Set
			If (Me._MenuItem_Parent.Equals(value) = false) Then
				Me.OnMenuItem_ParentChanging(value)
				Me.SendPropertyChanging
				Me._MenuItem_Parent = value
				Me.SendPropertyChanged("MenuItem_Parent")
				Me.OnMenuItem_ParentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuItem_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property MenuItem_Name() As String
		Get
			Return Me._MenuItem_Name
		End Get
		Set
			If (String.Equals(Me._MenuItem_Name, value) = false) Then
				Me.OnMenuItem_NameChanging(value)
				Me.SendPropertyChanging
				Me._MenuItem_Name = value
				Me.SendPropertyChanged("MenuItem_Name")
				Me.OnMenuItem_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuItem_Page", DbType:="VarChar(100)")>  _
	Public Property MenuItem_Page() As String
		Get
			Return Me._MenuItem_Page
		End Get
		Set
			If (String.Equals(Me._MenuItem_Page, value) = false) Then
				Me.OnMenuItem_PageChanging(value)
				Me.SendPropertyChanging
				Me._MenuItem_Page = value
				Me.SendPropertyChanged("MenuItem_Page")
				Me.OnMenuItem_PageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuItem_Type", DbType:="TinyInt NOT NULL")>  _
	Public Property MenuItem_Type() As Byte
		Get
			Return Me._MenuItem_Type
		End Get
		Set
			If ((Me._MenuItem_Type = value)  _
						= false) Then
				Me.OnMenuItem_TypeChanging(value)
				Me.SendPropertyChanging
				Me._MenuItem_Type = value
				Me.SendPropertyChanged("MenuItem_Type")
				Me.OnMenuItem_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuItem_Order", DbType:="TinyInt NOT NULL")>  _
	Public Property MenuItem_Order() As Byte
		Get
			Return Me._MenuItem_Order
		End Get
		Set
			If ((Me._MenuItem_Order = value)  _
						= false) Then
				Me.OnMenuItem_OrderChanging(value)
				Me.SendPropertyChanging
				Me._MenuItem_Order = value
				Me.SendPropertyChanged("MenuItem_Order")
				Me.OnMenuItem_OrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuItem_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property MenuItem_IsActive() As Boolean
		Get
			Return Me._MenuItem_IsActive
		End Get
		Set
			If ((Me._MenuItem_IsActive = value)  _
						= false) Then
				Me.OnMenuItem_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._MenuItem_IsActive = value
				Me.SendPropertyChanged("MenuItem_IsActive")
				Me.OnMenuItem_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblMenuItem_t360_tblUserMenuItem", Storage:="_t360_tblUserMenuItems", ThisKey:="MenuItem_Code", OtherKey:="MenuItem_Code")>  _
	Public Property t360_tblUserMenuItems() As EntitySet(Of t360_tblUserMenuItem)
		Get
			Return Me._t360_tblUserMenuItems
		End Get
		Set
			Me._t360_tblUserMenuItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblUserMenuItems(ByVal entity As t360_tblUserMenuItem)
		Me.SendPropertyChanging
		entity.t360_tblMenuItem = Me
	End Sub
	
	Private Sub detach_t360_tblUserMenuItems(ByVal entity As t360_tblUserMenuItem)
		Me.SendPropertyChanging
		entity.t360_tblMenuItem = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblProvice")>  _
Partial Public Class t360_tblProvice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Province_Id As Integer
	
	Private _Province_Name As String
	
	Private _t360_tblDistricts As EntitySet(Of t360_tblDistrict)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProvince_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvince_IdChanged()
    End Sub
    Partial Private Sub OnProvince_NameChanging(value As String)
    End Sub
    Partial Private Sub OnProvince_NameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblDistricts = New EntitySet(Of t360_tblDistrict)(AddressOf Me.attach_t360_tblDistricts, AddressOf Me.detach_t360_tblDistricts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Province_Id() As Integer
		Get
			Return Me._Province_Id
		End Get
		Set
			If ((Me._Province_Id = value)  _
						= false) Then
				Me.OnProvince_IdChanging(value)
				Me.SendPropertyChanging
				Me._Province_Id = value
				Me.SendPropertyChanged("Province_Id")
				Me.OnProvince_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Province_Name() As String
		Get
			Return Me._Province_Name
		End Get
		Set
			If (String.Equals(Me._Province_Name, value) = false) Then
				Me.OnProvince_NameChanging(value)
				Me.SendPropertyChanging
				Me._Province_Name = value
				Me.SendPropertyChanged("Province_Name")
				Me.OnProvince_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblProvice_t360_tblDistrict", Storage:="_t360_tblDistricts", ThisKey:="Province_Id", OtherKey:="Province_Id")>  _
	Public Property t360_tblDistricts() As EntitySet(Of t360_tblDistrict)
		Get
			Return Me._t360_tblDistricts
		End Get
		Set
			Me._t360_tblDistricts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblDistricts(ByVal entity As t360_tblDistrict)
		Me.SendPropertyChanging
		entity.t360_tblProvice = Me
	End Sub
	
	Private Sub detach_t360_tblDistricts(ByVal entity As t360_tblDistrict)
		Me.SendPropertyChanging
		entity.t360_tblProvice = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblDistrict")>  _
Partial Public Class t360_tblDistrict
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _District_Id As Integer
	
	Private _Province_Id As Integer
	
	Private _District_Name As String
	
	Private _t360_tblSubDistricts As EntitySet(Of t360_tblSubDistrict)
	
	Private _t360_tblProvice As EntityRef(Of t360_tblProvice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDistrict_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDistrict_IdChanged()
    End Sub
    Partial Private Sub OnProvince_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvince_IdChanged()
    End Sub
    Partial Private Sub OnDistrict_NameChanging(value As String)
    End Sub
    Partial Private Sub OnDistrict_NameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblSubDistricts = New EntitySet(Of t360_tblSubDistrict)(AddressOf Me.attach_t360_tblSubDistricts, AddressOf Me.detach_t360_tblSubDistricts)
		Me._t360_tblProvice = CType(Nothing, EntityRef(Of t360_tblProvice))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property District_Id() As Integer
		Get
			Return Me._District_Id
		End Get
		Set
			If ((Me._District_Id = value)  _
						= false) Then
				Me.OnDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._District_Id = value
				Me.SendPropertyChanged("District_Id")
				Me.OnDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province_Id", DbType:="Int NOT NULL")>  _
	Public Property Province_Id() As Integer
		Get
			Return Me._Province_Id
		End Get
		Set
			If ((Me._Province_Id = value)  _
						= false) Then
				If Me._t360_tblProvice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProvince_IdChanging(value)
				Me.SendPropertyChanging
				Me._Province_Id = value
				Me.SendPropertyChanged("Province_Id")
				Me.OnProvince_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property District_Name() As String
		Get
			Return Me._District_Name
		End Get
		Set
			If (String.Equals(Me._District_Name, value) = false) Then
				Me.OnDistrict_NameChanging(value)
				Me.SendPropertyChanging
				Me._District_Name = value
				Me.SendPropertyChanged("District_Name")
				Me.OnDistrict_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblDistrict_t360_tblSubDistrict", Storage:="_t360_tblSubDistricts", ThisKey:="District_Id", OtherKey:="District_Id")>  _
	Public Property t360_tblSubDistricts() As EntitySet(Of t360_tblSubDistrict)
		Get
			Return Me._t360_tblSubDistricts
		End Get
		Set
			Me._t360_tblSubDistricts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblProvice_t360_tblDistrict", Storage:="_t360_tblProvice", ThisKey:="Province_Id", OtherKey:="Province_Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property t360_tblProvice() As t360_tblProvice
		Get
			Return Me._t360_tblProvice.Entity
		End Get
		Set
			Dim previousValue As t360_tblProvice = Me._t360_tblProvice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblProvice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblProvice.Entity = Nothing
					previousValue.t360_tblDistricts.Remove(Me)
				End If
				Me._t360_tblProvice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblDistricts.Add(Me)
					Me._Province_Id = value.Province_Id
				Else
					Me._Province_Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("t360_tblProvice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblSubDistricts(ByVal entity As t360_tblSubDistrict)
		Me.SendPropertyChanging
		entity.t360_tblDistrict = Me
	End Sub
	
	Private Sub detach_t360_tblSubDistricts(ByVal entity As t360_tblSubDistrict)
		Me.SendPropertyChanging
		entity.t360_tblDistrict = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblSubDistrict")>  _
Partial Public Class t360_tblSubDistrict
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SubDistrict_Id As Integer
	
	Private _District_Id As Integer
	
	Private _SubDistrict_Name As String
	
	Private _t360_tblDistrict As EntityRef(Of t360_tblDistrict)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSubDistrict_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubDistrict_IdChanged()
    End Sub
    Partial Private Sub OnDistrict_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDistrict_IdChanged()
    End Sub
    Partial Private Sub OnSubDistrict_NameChanging(value As String)
    End Sub
    Partial Private Sub OnSubDistrict_NameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblDistrict = CType(Nothing, EntityRef(Of t360_tblDistrict))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubDistrict_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SubDistrict_Id() As Integer
		Get
			Return Me._SubDistrict_Id
		End Get
		Set
			If ((Me._SubDistrict_Id = value)  _
						= false) Then
				Me.OnSubDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._SubDistrict_Id = value
				Me.SendPropertyChanged("SubDistrict_Id")
				Me.OnSubDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District_Id", DbType:="Int NOT NULL")>  _
	Public Property District_Id() As Integer
		Get
			Return Me._District_Id
		End Get
		Set
			If ((Me._District_Id = value)  _
						= false) Then
				If Me._t360_tblDistrict.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._District_Id = value
				Me.SendPropertyChanged("District_Id")
				Me.OnDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubDistrict_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property SubDistrict_Name() As String
		Get
			Return Me._SubDistrict_Name
		End Get
		Set
			If (String.Equals(Me._SubDistrict_Name, value) = false) Then
				Me.OnSubDistrict_NameChanging(value)
				Me.SendPropertyChanging
				Me._SubDistrict_Name = value
				Me.SendPropertyChanged("SubDistrict_Name")
				Me.OnSubDistrict_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblDistrict_t360_tblSubDistrict", Storage:="_t360_tblDistrict", ThisKey:="District_Id", OtherKey:="District_Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property t360_tblDistrict() As t360_tblDistrict
		Get
			Return Me._t360_tblDistrict.Entity
		End Get
		Set
			Dim previousValue As t360_tblDistrict = Me._t360_tblDistrict.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblDistrict.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblDistrict.Entity = Nothing
					previousValue.t360_tblSubDistricts.Remove(Me)
				End If
				Me._t360_tblDistrict.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblSubDistricts.Add(Me)
					Me._District_Id = value.District_Id
				Else
					Me._District_Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("t360_tblDistrict")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblNetwork")>  _
Partial Public Class t360_tblNetwork
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _Network_Id As System.Guid
	
	Private _Network_IP As String
	
	Private _Network_Name As String
	
	Private _Network_Type As String
	
	Private _Network_FirstDate As System.Nullable(Of Date)
	
	Private _Network_LastDate As System.Nullable(Of Date)
	
	Private _Network_CreateDate As Date
	
	Private _Network_IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _Network_IsIgnore As Boolean
	
	Private _Network_Location As String
	
	Private _t360_tblNetworkHistories As EntitySet(Of t360_tblNetworkHistory)
	
	Private _t360_tblNetworkWarnReasons As EntitySet(Of t360_tblNetworkWarnReason)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnNetwork_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNetwork_IdChanged()
    End Sub
    Partial Private Sub OnNetwork_IPChanging(value As String)
    End Sub
    Partial Private Sub OnNetwork_IPChanged()
    End Sub
    Partial Private Sub OnNetwork_NameChanging(value As String)
    End Sub
    Partial Private Sub OnNetwork_NameChanged()
    End Sub
    Partial Private Sub OnNetwork_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnNetwork_TypeChanged()
    End Sub
    Partial Private Sub OnNetwork_FirstDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNetwork_FirstDateChanged()
    End Sub
    Partial Private Sub OnNetwork_LastDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNetwork_LastDateChanged()
    End Sub
    Partial Private Sub OnNetwork_CreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnNetwork_CreateDateChanged()
    End Sub
    Partial Private Sub OnNetwork_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNetwork_IsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnNetwork_IsIgnoreChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNetwork_IsIgnoreChanged()
    End Sub
    Partial Private Sub OnNetwork_LocationChanging(value As String)
    End Sub
    Partial Private Sub OnNetwork_LocationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblNetworkHistories = New EntitySet(Of t360_tblNetworkHistory)(AddressOf Me.attach_t360_tblNetworkHistories, AddressOf Me.detach_t360_tblNetworkHistories)
		Me._t360_tblNetworkWarnReasons = New EntitySet(Of t360_tblNetworkWarnReason)(AddressOf Me.attach_t360_tblNetworkWarnReasons, AddressOf Me.detach_t360_tblNetworkWarnReasons)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Network_Id() As System.Guid
		Get
			Return Me._Network_Id
		End Get
		Set
			If ((Me._Network_Id = value)  _
						= false) Then
				Me.OnNetwork_IdChanging(value)
				Me.SendPropertyChanging
				Me._Network_Id = value
				Me.SendPropertyChanged("Network_Id")
				Me.OnNetwork_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_IP", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Network_IP() As String
		Get
			Return Me._Network_IP
		End Get
		Set
			If (String.Equals(Me._Network_IP, value) = false) Then
				Me.OnNetwork_IPChanging(value)
				Me.SendPropertyChanging
				Me._Network_IP = value
				Me.SendPropertyChanged("Network_IP")
				Me.OnNetwork_IPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Network_Name() As String
		Get
			Return Me._Network_Name
		End Get
		Set
			If (String.Equals(Me._Network_Name, value) = false) Then
				Me.OnNetwork_NameChanging(value)
				Me.SendPropertyChanging
				Me._Network_Name = value
				Me.SendPropertyChanged("Network_Name")
				Me.OnNetwork_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_Type", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Network_Type() As String
		Get
			Return Me._Network_Type
		End Get
		Set
			If (String.Equals(Me._Network_Type, value) = false) Then
				Me.OnNetwork_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Network_Type = value
				Me.SendPropertyChanged("Network_Type")
				Me.OnNetwork_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_FirstDate", DbType:="SmallDateTime")>  _
	Public Property Network_FirstDate() As System.Nullable(Of Date)
		Get
			Return Me._Network_FirstDate
		End Get
		Set
			If (Me._Network_FirstDate.Equals(value) = false) Then
				Me.OnNetwork_FirstDateChanging(value)
				Me.SendPropertyChanging
				Me._Network_FirstDate = value
				Me.SendPropertyChanged("Network_FirstDate")
				Me.OnNetwork_FirstDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_LastDate", DbType:="SmallDateTime")>  _
	Public Property Network_LastDate() As System.Nullable(Of Date)
		Get
			Return Me._Network_LastDate
		End Get
		Set
			If (Me._Network_LastDate.Equals(value) = false) Then
				Me.OnNetwork_LastDateChanging(value)
				Me.SendPropertyChanging
				Me._Network_LastDate = value
				Me.SendPropertyChanged("Network_LastDate")
				Me.OnNetwork_LastDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_CreateDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Network_CreateDate() As Date
		Get
			Return Me._Network_CreateDate
		End Get
		Set
			If ((Me._Network_CreateDate = value)  _
						= false) Then
				Me.OnNetwork_CreateDateChanging(value)
				Me.SendPropertyChanging
				Me._Network_CreateDate = value
				Me.SendPropertyChanged("Network_CreateDate")
				Me.OnNetwork_CreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Network_IsActive() As Boolean
		Get
			Return Me._Network_IsActive
		End Get
		Set
			If ((Me._Network_IsActive = value)  _
						= false) Then
				Me.OnNetwork_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Network_IsActive = value
				Me.SendPropertyChanged("Network_IsActive")
				Me.OnNetwork_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_IsIgnore", DbType:="Bit")>  _
	Public Property Network_IsIgnore() As Boolean
		Get
			Return Me._Network_IsIgnore
		End Get
		Set
			If ((Me._Network_IsIgnore = value)  _
						= false) Then
				Me.OnNetwork_IsIgnoreChanging(value)
				Me.SendPropertyChanging
				Me._Network_IsIgnore = value
				Me.SendPropertyChanged("Network_IsIgnore")
				Me.OnNetwork_IsIgnoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_Location", DbType:="VarChar(100)", CanBeNull:=false)>  _
	Public Property Network_Location() As String
		Get
			Return Me._Network_Location
		End Get
		Set
			If (String.Equals(Me._Network_Location, value) = false) Then
				Me.OnNetwork_LocationChanging(value)
				Me.SendPropertyChanging
				Me._Network_Location = value
				Me.SendPropertyChanged("Network_Location")
				Me.OnNetwork_LocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblNetwork_t360_tblNetworkHistory", Storage:="_t360_tblNetworkHistories", ThisKey:="Network_Id", OtherKey:="Network_Id")>  _
	Public Property t360_tblNetworkHistories() As EntitySet(Of t360_tblNetworkHistory)
		Get
			Return Me._t360_tblNetworkHistories
		End Get
		Set
			Me._t360_tblNetworkHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblNetwork_t360_tblNetworkWarnReason", Storage:="_t360_tblNetworkWarnReasons", ThisKey:="Network_Id", OtherKey:="Network_Id")>  _
	Public Property t360_tblNetworkWarnReasons() As EntitySet(Of t360_tblNetworkWarnReason)
		Get
			Return Me._t360_tblNetworkWarnReasons
		End Get
		Set
			Me._t360_tblNetworkWarnReasons.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblNetworkHistories(ByVal entity As t360_tblNetworkHistory)
		Me.SendPropertyChanging
		entity.t360_tblNetwork = Me
	End Sub
	
	Private Sub detach_t360_tblNetworkHistories(ByVal entity As t360_tblNetworkHistory)
		Me.SendPropertyChanging
		entity.t360_tblNetwork = Nothing
	End Sub
	
	Private Sub attach_t360_tblNetworkWarnReasons(ByVal entity As t360_tblNetworkWarnReason)
		Me.SendPropertyChanging
		entity.t360_tblNetwork = Me
	End Sub
	
	Private Sub detach_t360_tblNetworkWarnReasons(ByVal entity As t360_tblNetworkWarnReason)
		Me.SendPropertyChanging
		entity.t360_tblNetwork = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTabletOwner")>  _
Partial Public Class t360_tblTabletOwner
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TON_Id As System.Guid
	
	Private _Tablet_Id As System.Nullable(Of System.Guid)
	
	Private _Owner_Id As System.Nullable(Of System.Guid)
	
	Private _School_Code As String
	
	Private _Owner_Type As Byte
	
	Private _TON_ReceiveDate As Date
	
	Private _TON_ReturnDate As System.Nullable(Of Date)
	
	Private _TabletOwner_IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _t360_tblTabletLosts As EntitySet(Of t360_tblTabletLost)
	
	Private _t360_tblTabletLogs As EntitySet(Of t360_tblTabletLog)
	
	Private _t360_tblTabletRepairs As EntitySet(Of t360_tblTabletRepair)
	
	Private _t360_tblTablet As EntityRef(Of t360_tblTablet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTON_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTON_IdChanged()
    End Sub
    Partial Private Sub OnTablet_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnTablet_IdChanged()
    End Sub
    Partial Private Sub OnOwner_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnOwner_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnOwner_TypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnOwner_TypeChanged()
    End Sub
    Partial Private Sub OnTON_ReceiveDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTON_ReceiveDateChanged()
    End Sub
    Partial Private Sub OnTON_ReturnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTON_ReturnDateChanged()
    End Sub
    Partial Private Sub OnTabletOwner_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTabletOwner_IsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblTabletLosts = New EntitySet(Of t360_tblTabletLost)(AddressOf Me.attach_t360_tblTabletLosts, AddressOf Me.detach_t360_tblTabletLosts)
		Me._t360_tblTabletLogs = New EntitySet(Of t360_tblTabletLog)(AddressOf Me.attach_t360_tblTabletLogs, AddressOf Me.detach_t360_tblTabletLogs)
		Me._t360_tblTabletRepairs = New EntitySet(Of t360_tblTabletRepair)(AddressOf Me.attach_t360_tblTabletRepairs, AddressOf Me.detach_t360_tblTabletRepairs)
		Me._t360_tblTablet = CType(Nothing, EntityRef(Of t360_tblTablet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TON_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TON_Id() As System.Guid
		Get
			Return Me._TON_Id
		End Get
		Set
			If ((Me._TON_Id = value)  _
						= false) Then
				Me.OnTON_IdChanging(value)
				Me.SendPropertyChanging
				Me._TON_Id = value
				Me.SendPropertyChanged("TON_Id")
				Me.OnTON_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_Id", DbType:="UniqueIdentifier")>  _
	Public Property Tablet_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Tablet_Id
		End Get
		Set
			If (Me._Tablet_Id.Equals(value) = false) Then
				If Me._t360_tblTablet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTablet_IdChanging(value)
				Me.SendPropertyChanging
				Me._Tablet_Id = value
				Me.SendPropertyChanged("Tablet_Id")
				Me.OnTablet_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Owner_Id", DbType:="UniqueIdentifier")>  _
	Public Property Owner_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Owner_Id
		End Get
		Set
			If (Me._Owner_Id.Equals(value) = false) Then
				Me.OnOwner_IdChanging(value)
				Me.SendPropertyChanging
				Me._Owner_Id = value
				Me.SendPropertyChanged("Owner_Id")
				Me.OnOwner_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Owner_Type", DbType:="TinyInt NOT NULL")>  _
	Public Property Owner_Type() As Byte
		Get
			Return Me._Owner_Type
		End Get
		Set
			If ((Me._Owner_Type = value)  _
						= false) Then
				Me.OnOwner_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Owner_Type = value
				Me.SendPropertyChanged("Owner_Type")
				Me.OnOwner_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TON_ReceiveDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property TON_ReceiveDate() As Date
		Get
			Return Me._TON_ReceiveDate
		End Get
		Set
			If ((Me._TON_ReceiveDate = value)  _
						= false) Then
				Me.OnTON_ReceiveDateChanging(value)
				Me.SendPropertyChanging
				Me._TON_ReceiveDate = value
				Me.SendPropertyChanged("TON_ReceiveDate")
				Me.OnTON_ReceiveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TON_ReturnDate", DbType:="SmallDateTime")>  _
	Public Property TON_ReturnDate() As System.Nullable(Of Date)
		Get
			Return Me._TON_ReturnDate
		End Get
		Set
			If (Me._TON_ReturnDate.Equals(value) = false) Then
				Me.OnTON_ReturnDateChanging(value)
				Me.SendPropertyChanging
				Me._TON_ReturnDate = value
				Me.SendPropertyChanged("TON_ReturnDate")
				Me.OnTON_ReturnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabletOwner_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property TabletOwner_IsActive() As Boolean
		Get
			Return Me._TabletOwner_IsActive
		End Get
		Set
			If ((Me._TabletOwner_IsActive = value)  _
						= false) Then
				Me.OnTabletOwner_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._TabletOwner_IsActive = value
				Me.SendPropertyChanged("TabletOwner_IsActive")
				Me.OnTabletOwner_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTabletOwner_t360_tblTabletLost", Storage:="_t360_tblTabletLosts", ThisKey:="TON_Id", OtherKey:="TON_Id")>  _
	Public Property t360_tblTabletLosts() As EntitySet(Of t360_tblTabletLost)
		Get
			Return Me._t360_tblTabletLosts
		End Get
		Set
			Me._t360_tblTabletLosts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTabletOwner_t360_tblTabletLog", Storage:="_t360_tblTabletLogs", ThisKey:="TON_Id", OtherKey:="TON_Id")>  _
	Public Property t360_tblTabletLogs() As EntitySet(Of t360_tblTabletLog)
		Get
			Return Me._t360_tblTabletLogs
		End Get
		Set
			Me._t360_tblTabletLogs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTabletOwner_t360_tblTabletRepair", Storage:="_t360_tblTabletRepairs", ThisKey:="TON_Id", OtherKey:="TON_Id")>  _
	Public Property t360_tblTabletRepairs() As EntitySet(Of t360_tblTabletRepair)
		Get
			Return Me._t360_tblTabletRepairs
		End Get
		Set
			Me._t360_tblTabletRepairs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTablet_t360_tblTabletOwner", Storage:="_t360_tblTablet", ThisKey:="Tablet_Id", OtherKey:="Tablet_Id", IsForeignKey:=true)>  _
	Public Property t360_tblTablet() As t360_tblTablet
		Get
			Return Me._t360_tblTablet.Entity
		End Get
		Set
			Dim previousValue As t360_tblTablet = Me._t360_tblTablet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTablet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTablet.Entity = Nothing
					previousValue.t360_tblTabletOwners.Remove(Me)
				End If
				Me._t360_tblTablet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblTabletOwners.Add(Me)
					Me._Tablet_Id = value.Tablet_Id
				Else
					Me._Tablet_Id = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("t360_tblTablet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblTabletLosts(ByVal entity As t360_tblTabletLost)
		Me.SendPropertyChanging
		entity.t360_tblTabletOwner = Me
	End Sub
	
	Private Sub detach_t360_tblTabletLosts(ByVal entity As t360_tblTabletLost)
		Me.SendPropertyChanging
		entity.t360_tblTabletOwner = Nothing
	End Sub
	
	Private Sub attach_t360_tblTabletLogs(ByVal entity As t360_tblTabletLog)
		Me.SendPropertyChanging
		entity.t360_tblTabletOwner = Me
	End Sub
	
	Private Sub detach_t360_tblTabletLogs(ByVal entity As t360_tblTabletLog)
		Me.SendPropertyChanging
		entity.t360_tblTabletOwner = Nothing
	End Sub
	
	Private Sub attach_t360_tblTabletRepairs(ByVal entity As t360_tblTabletRepair)
		Me.SendPropertyChanging
		entity.t360_tblTabletOwner = Me
	End Sub
	
	Private Sub detach_t360_tblTabletRepairs(ByVal entity As t360_tblTabletRepair)
		Me.SendPropertyChanging
		entity.t360_tblTabletOwner = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTabletLost")>  _
Partial Public Class t360_tblTabletLost
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _TON_Id As System.Guid
	
	Private _TLT_LostDate As Date
	
	Private _TLT_Station As String
	
	Private _TLT_DocNumber As String
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _IsActive As Boolean
	
	Private _ClientId As String
	
	Private _t360_tblTabletOwner As EntityRef(Of t360_tblTabletOwner)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnTON_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTON_IdChanged()
    End Sub
    Partial Private Sub OnTLT_LostDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTLT_LostDateChanged()
    End Sub
    Partial Private Sub OnTLT_StationChanging(value As String)
    End Sub
    Partial Private Sub OnTLT_StationChanged()
    End Sub
    Partial Private Sub OnTLT_DocNumberChanging(value As String)
    End Sub
    Partial Private Sub OnTLT_DocNumberChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblTabletOwner = CType(Nothing, EntityRef(Of t360_tblTabletOwner))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TON_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TON_Id() As System.Guid
		Get
			Return Me._TON_Id
		End Get
		Set
			If ((Me._TON_Id = value)  _
						= false) Then
				If Me._t360_tblTabletOwner.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTON_IdChanging(value)
				Me.SendPropertyChanging
				Me._TON_Id = value
				Me.SendPropertyChanged("TON_Id")
				Me.OnTON_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLT_LostDate", DbType:="SmallDateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TLT_LostDate() As Date
		Get
			Return Me._TLT_LostDate
		End Get
		Set
			If ((Me._TLT_LostDate = value)  _
						= false) Then
				Me.OnTLT_LostDateChanging(value)
				Me.SendPropertyChanging
				Me._TLT_LostDate = value
				Me.SendPropertyChanged("TLT_LostDate")
				Me.OnTLT_LostDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLT_Station", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property TLT_Station() As String
		Get
			Return Me._TLT_Station
		End Get
		Set
			If (String.Equals(Me._TLT_Station, value) = false) Then
				Me.OnTLT_StationChanging(value)
				Me.SendPropertyChanging
				Me._TLT_Station = value
				Me.SendPropertyChanged("TLT_Station")
				Me.OnTLT_StationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLT_DocNumber", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TLT_DocNumber() As String
		Get
			Return Me._TLT_DocNumber
		End Get
		Set
			If (String.Equals(Me._TLT_DocNumber, value) = false) Then
				Me.OnTLT_DocNumberChanging(value)
				Me.SendPropertyChanging
				Me._TLT_DocNumber = value
				Me.SendPropertyChanged("TLT_DocNumber")
				Me.OnTLT_DocNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTabletOwner_t360_tblTabletLost", Storage:="_t360_tblTabletOwner", ThisKey:="TON_Id", OtherKey:="TON_Id", IsForeignKey:=true)>  _
	Public Property t360_tblTabletOwner() As t360_tblTabletOwner
		Get
			Return Me._t360_tblTabletOwner.Entity
		End Get
		Set
			Dim previousValue As t360_tblTabletOwner = Me._t360_tblTabletOwner.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTabletOwner.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTabletOwner.Entity = Nothing
					previousValue.t360_tblTabletLosts.Remove(Me)
				End If
				Me._t360_tblTabletOwner.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblTabletLosts.Add(Me)
					Me._TON_Id = value.TON_Id
				Else
					Me._TON_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblTabletOwner")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTabletLog")>  _
Partial Public Class t360_tblTabletLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _TON_Id As System.Guid
	
	Private _TLG_Event As String
	
	Private _TLG_ErrMsg As String
	
	Private _TLG_TimeStamp As System.Nullable(Of Date)
	
	Private _TLG_AppName As String
	
	Private _TLG_InSchool As System.Nullable(Of Boolean)
	
	Private _TLG_Storage As String
	
	Private _TLG_BatteryStatus As System.Nullable(Of Byte)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _IsActive As Boolean
	
	Private _ClientId As String
	
	Private _t360_tblTabletOwner As EntityRef(Of t360_tblTabletOwner)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnTON_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTON_IdChanged()
    End Sub
    Partial Private Sub OnTLG_EventChanging(value As String)
    End Sub
    Partial Private Sub OnTLG_EventChanged()
    End Sub
    Partial Private Sub OnTLG_ErrMsgChanging(value As String)
    End Sub
    Partial Private Sub OnTLG_ErrMsgChanged()
    End Sub
    Partial Private Sub OnTLG_TimeStampChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTLG_TimeStampChanged()
    End Sub
    Partial Private Sub OnTLG_AppNameChanging(value As String)
    End Sub
    Partial Private Sub OnTLG_AppNameChanged()
    End Sub
    Partial Private Sub OnTLG_InSchoolChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTLG_InSchoolChanged()
    End Sub
    Partial Private Sub OnTLG_StorageChanging(value As String)
    End Sub
    Partial Private Sub OnTLG_StorageChanged()
    End Sub
    Partial Private Sub OnTLG_BatteryStatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnTLG_BatteryStatusChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblTabletOwner = CType(Nothing, EntityRef(Of t360_tblTabletOwner))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TON_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TON_Id() As System.Guid
		Get
			Return Me._TON_Id
		End Get
		Set
			If ((Me._TON_Id = value)  _
						= false) Then
				If Me._t360_tblTabletOwner.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTON_IdChanging(value)
				Me.SendPropertyChanging
				Me._TON_Id = value
				Me.SendPropertyChanged("TON_Id")
				Me.OnTON_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLG_Event", DbType:="VarChar(100)")>  _
	Public Property TLG_Event() As String
		Get
			Return Me._TLG_Event
		End Get
		Set
			If (String.Equals(Me._TLG_Event, value) = false) Then
				Me.OnTLG_EventChanging(value)
				Me.SendPropertyChanging
				Me._TLG_Event = value
				Me.SendPropertyChanged("TLG_Event")
				Me.OnTLG_EventChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLG_ErrMsg", DbType:="VarChar(255)")>  _
	Public Property TLG_ErrMsg() As String
		Get
			Return Me._TLG_ErrMsg
		End Get
		Set
			If (String.Equals(Me._TLG_ErrMsg, value) = false) Then
				Me.OnTLG_ErrMsgChanging(value)
				Me.SendPropertyChanging
				Me._TLG_ErrMsg = value
				Me.SendPropertyChanged("TLG_ErrMsg")
				Me.OnTLG_ErrMsgChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLG_TimeStamp", DbType:="SmallDateTime", IsPrimaryKey:=true)>  _
	Public Property TLG_TimeStamp() As System.Nullable(Of Date)
		Get
			Return Me._TLG_TimeStamp
		End Get
		Set
			If (Me._TLG_TimeStamp.Equals(value) = false) Then
				Me.OnTLG_TimeStampChanging(value)
				Me.SendPropertyChanging
				Me._TLG_TimeStamp = value
				Me.SendPropertyChanged("TLG_TimeStamp")
				Me.OnTLG_TimeStampChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLG_AppName", DbType:="VarChar(255)")>  _
	Public Property TLG_AppName() As String
		Get
			Return Me._TLG_AppName
		End Get
		Set
			If (String.Equals(Me._TLG_AppName, value) = false) Then
				Me.OnTLG_AppNameChanging(value)
				Me.SendPropertyChanging
				Me._TLG_AppName = value
				Me.SendPropertyChanged("TLG_AppName")
				Me.OnTLG_AppNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLG_InSchool", DbType:="Bit")>  _
	Public Property TLG_InSchool() As System.Nullable(Of Boolean)
		Get
			Return Me._TLG_InSchool
		End Get
		Set
			If (Me._TLG_InSchool.Equals(value) = false) Then
				Me.OnTLG_InSchoolChanging(value)
				Me.SendPropertyChanging
				Me._TLG_InSchool = value
				Me.SendPropertyChanged("TLG_InSchool")
				Me.OnTLG_InSchoolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLG_Storage", DbType:="VarChar(30)")>  _
	Public Property TLG_Storage() As String
		Get
			Return Me._TLG_Storage
		End Get
		Set
			If (String.Equals(Me._TLG_Storage, value) = false) Then
				Me.OnTLG_StorageChanging(value)
				Me.SendPropertyChanging
				Me._TLG_Storage = value
				Me.SendPropertyChanged("TLG_Storage")
				Me.OnTLG_StorageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLG_BatteryStatus", DbType:="TinyInt")>  _
	Public Property TLG_BatteryStatus() As System.Nullable(Of Byte)
		Get
			Return Me._TLG_BatteryStatus
		End Get
		Set
			If (Me._TLG_BatteryStatus.Equals(value) = false) Then
				Me.OnTLG_BatteryStatusChanging(value)
				Me.SendPropertyChanging
				Me._TLG_BatteryStatus = value
				Me.SendPropertyChanged("TLG_BatteryStatus")
				Me.OnTLG_BatteryStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTabletOwner_t360_tblTabletLog", Storage:="_t360_tblTabletOwner", ThisKey:="TON_Id", OtherKey:="TON_Id", IsForeignKey:=true)>  _
	Public Property t360_tblTabletOwner() As t360_tblTabletOwner
		Get
			Return Me._t360_tblTabletOwner.Entity
		End Get
		Set
			Dim previousValue As t360_tblTabletOwner = Me._t360_tblTabletOwner.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTabletOwner.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTabletOwner.Entity = Nothing
					previousValue.t360_tblTabletLogs.Remove(Me)
				End If
				Me._t360_tblTabletOwner.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblTabletLogs.Add(Me)
					Me._TON_Id = value.TON_Id
				Else
					Me._TON_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblTabletOwner")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblClass")>  _
Partial Public Class t360_tblClass
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Class_Name As String
	
	Private _Class_Order As Byte
	
	Private _Class_IsActive As Boolean
	
	Private _Class_Finish As Boolean
	
	Private _t360_tblRooms As EntitySet(Of t360_tblRoom)
	
	Private _t360_tblSchoolClasses As EntitySet(Of t360_tblSchoolClass)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnClass_NameChanging(value As String)
    End Sub
    Partial Private Sub OnClass_NameChanged()
    End Sub
    Partial Private Sub OnClass_OrderChanging(value As Byte)
    End Sub
    Partial Private Sub OnClass_OrderChanged()
    End Sub
    Partial Private Sub OnClass_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnClass_IsActiveChanged()
    End Sub
    Partial Private Sub OnClass_FinishChanging(value As Boolean)
    End Sub
    Partial Private Sub OnClass_FinishChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblRooms = New EntitySet(Of t360_tblRoom)(AddressOf Me.attach_t360_tblRooms, AddressOf Me.detach_t360_tblRooms)
		Me._t360_tblSchoolClasses = New EntitySet(Of t360_tblSchoolClass)(AddressOf Me.attach_t360_tblSchoolClasses, AddressOf Me.detach_t360_tblSchoolClasses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				Me.OnClass_NameChanging(value)
				Me.SendPropertyChanging
				Me._Class_Name = value
				Me.SendPropertyChanged("Class_Name")
				Me.OnClass_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Order", DbType:="TinyInt NOT NULL")>  _
	Public Property Class_Order() As Byte
		Get
			Return Me._Class_Order
		End Get
		Set
			If ((Me._Class_Order = value)  _
						= false) Then
				Me.OnClass_OrderChanging(value)
				Me.SendPropertyChanging
				Me._Class_Order = value
				Me.SendPropertyChanged("Class_Order")
				Me.OnClass_OrderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Class_IsActive() As Boolean
		Get
			Return Me._Class_IsActive
		End Get
		Set
			If ((Me._Class_IsActive = value)  _
						= false) Then
				Me.OnClass_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Class_IsActive = value
				Me.SendPropertyChanged("Class_IsActive")
				Me.OnClass_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Finish", DbType:="Bit NOT NULL")>  _
	Public Property Class_Finish() As Boolean
		Get
			Return Me._Class_Finish
		End Get
		Set
			If ((Me._Class_Finish = value)  _
						= false) Then
				Me.OnClass_FinishChanging(value)
				Me.SendPropertyChanging
				Me._Class_Finish = value
				Me.SendPropertyChanged("Class_Finish")
				Me.OnClass_FinishChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblClass_t360_tblRoom", Storage:="_t360_tblRooms", ThisKey:="Class_Name", OtherKey:="Class_Name")>  _
	Public Property t360_tblRooms() As EntitySet(Of t360_tblRoom)
		Get
			Return Me._t360_tblRooms
		End Get
		Set
			Me._t360_tblRooms.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblClass_t360_tblSchoolClass", Storage:="_t360_tblSchoolClasses", ThisKey:="Class_Name", OtherKey:="Class_Name")>  _
	Public Property t360_tblSchoolClasses() As EntitySet(Of t360_tblSchoolClass)
		Get
			Return Me._t360_tblSchoolClasses
		End Get
		Set
			Me._t360_tblSchoolClasses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblRooms(ByVal entity As t360_tblRoom)
		Me.SendPropertyChanging
		entity.t360_tblClass = Me
	End Sub
	
	Private Sub detach_t360_tblRooms(ByVal entity As t360_tblRoom)
		Me.SendPropertyChanging
		entity.t360_tblClass = Nothing
	End Sub
	
	Private Sub attach_t360_tblSchoolClasses(ByVal entity As t360_tblSchoolClass)
		Me.SendPropertyChanging
		entity.t360_tblClass = Me
	End Sub
	
	Private Sub detach_t360_tblSchoolClasses(ByVal entity As t360_tblSchoolClass)
		Me.SendPropertyChanging
		entity.t360_tblClass = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblRoom")>  _
Partial Public Class t360_tblRoom
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _Class_Name As String
	
	Private _Room_Name As String
	
	Private _Room_Id As System.Guid
	
	Private _Room_IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _t360_tblClass As EntityRef(Of t360_tblClass)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnClass_NameChanging(value As String)
    End Sub
    Partial Private Sub OnClass_NameChanged()
    End Sub
    Partial Private Sub OnRoom_NameChanging(value As String)
    End Sub
    Partial Private Sub OnRoom_NameChanged()
    End Sub
    Partial Private Sub OnRoom_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoom_IdChanged()
    End Sub
    Partial Private Sub OnRoom_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnRoom_IsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblClass = CType(Nothing, EntityRef(Of t360_tblClass))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				If Me._t360_tblClass.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnClass_NameChanging(value)
				Me.SendPropertyChanging
				Me._Class_Name = value
				Me.SendPropertyChanged("Class_Name")
				Me.OnClass_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Room_Name() As String
		Get
			Return Me._Room_Name
		End Get
		Set
			If (String.Equals(Me._Room_Name, value) = false) Then
				Me.OnRoom_NameChanging(value)
				Me.SendPropertyChanging
				Me._Room_Name = value
				Me.SendPropertyChanged("Room_Name")
				Me.OnRoom_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Room_Id() As System.Guid
		Get
			Return Me._Room_Id
		End Get
		Set
			If ((Me._Room_Id = value)  _
						= false) Then
				Me.OnRoom_IdChanging(value)
				Me.SendPropertyChanging
				Me._Room_Id = value
				Me.SendPropertyChanged("Room_Id")
				Me.OnRoom_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Room_IsActive() As Boolean
		Get
			Return Me._Room_IsActive
		End Get
		Set
			If ((Me._Room_IsActive = value)  _
						= false) Then
				Me.OnRoom_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Room_IsActive = value
				Me.SendPropertyChanged("Room_IsActive")
				Me.OnRoom_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblClass_t360_tblRoom", Storage:="_t360_tblClass", ThisKey:="Class_Name", OtherKey:="Class_Name", IsForeignKey:=true)>  _
	Public Property t360_tblClass() As t360_tblClass
		Get
			Return Me._t360_tblClass.Entity
		End Get
		Set
			Dim previousValue As t360_tblClass = Me._t360_tblClass.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblClass.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblClass.Entity = Nothing
					previousValue.t360_tblRooms.Remove(Me)
				End If
				Me._t360_tblClass.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblRooms.Add(Me)
					Me._Class_Name = value.Class_Name
				Else
					Me._Class_Name = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("t360_tblClass")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblUnit")>  _
Partial Public Class t360_tblUnit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _Subject_Id As System.Guid
	
	Private _Unit_Id As System.Guid
	
	Private _Unit_Name As String
	
	Private _Unit_IsActive As Boolean
	
	Private _t360_tblLessons As EntitySet(Of t360_tblLesson)
	
	Private _t360_tblSubject As EntityRef(Of t360_tblSubject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnSubject_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubject_IdChanged()
    End Sub
    Partial Private Sub OnUnit_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUnit_IdChanged()
    End Sub
    Partial Private Sub OnUnit_NameChanging(value As String)
    End Sub
    Partial Private Sub OnUnit_NameChanged()
    End Sub
    Partial Private Sub OnUnit_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUnit_IsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblLessons = New EntitySet(Of t360_tblLesson)(AddressOf Me.attach_t360_tblLessons, AddressOf Me.detach_t360_tblLessons)
		Me._t360_tblSubject = CType(Nothing, EntityRef(Of t360_tblSubject))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Subject_Id() As System.Guid
		Get
			Return Me._Subject_Id
		End Get
		Set
			If ((Me._Subject_Id = value)  _
						= false) Then
				If Me._t360_tblSubject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSubject_IdChanging(value)
				Me.SendPropertyChanging
				Me._Subject_Id = value
				Me.SendPropertyChanged("Subject_Id")
				Me.OnSubject_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unit_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Unit_Id() As System.Guid
		Get
			Return Me._Unit_Id
		End Get
		Set
			If ((Me._Unit_Id = value)  _
						= false) Then
				Me.OnUnit_IdChanging(value)
				Me.SendPropertyChanging
				Me._Unit_Id = value
				Me.SendPropertyChanged("Unit_Id")
				Me.OnUnit_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unit_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Unit_Name() As String
		Get
			Return Me._Unit_Name
		End Get
		Set
			If (String.Equals(Me._Unit_Name, value) = false) Then
				Me.OnUnit_NameChanging(value)
				Me.SendPropertyChanging
				Me._Unit_Name = value
				Me.SendPropertyChanged("Unit_Name")
				Me.OnUnit_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unit_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Unit_IsActive() As Boolean
		Get
			Return Me._Unit_IsActive
		End Get
		Set
			If ((Me._Unit_IsActive = value)  _
						= false) Then
				Me.OnUnit_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Unit_IsActive = value
				Me.SendPropertyChanged("Unit_IsActive")
				Me.OnUnit_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblUnit_t360_tblLesson", Storage:="_t360_tblLessons", ThisKey:="Unit_Id", OtherKey:="Unit_Id")>  _
	Public Property t360_tblLessons() As EntitySet(Of t360_tblLesson)
		Get
			Return Me._t360_tblLessons
		End Get
		Set
			Me._t360_tblLessons.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubject_t360_tblUnit", Storage:="_t360_tblSubject", ThisKey:="Subject_Id", OtherKey:="Subject_Id", IsForeignKey:=true)>  _
	Public Property t360_tblSubject() As t360_tblSubject
		Get
			Return Me._t360_tblSubject.Entity
		End Get
		Set
			Dim previousValue As t360_tblSubject = Me._t360_tblSubject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblSubject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblSubject.Entity = Nothing
					previousValue.t360_tblUnits.Remove(Me)
				End If
				Me._t360_tblSubject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblUnits.Add(Me)
					Me._Subject_Id = value.Subject_Id
				Else
					Me._Subject_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblSubject")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblLessons(ByVal entity As t360_tblLesson)
		Me.SendPropertyChanging
		entity.t360_tblUnit = Me
	End Sub
	
	Private Sub detach_t360_tblLessons(ByVal entity As t360_tblLesson)
		Me.SendPropertyChanging
		entity.t360_tblUnit = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblLesson")>  _
Partial Public Class t360_tblLesson
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _Unit_Id As System.Nullable(Of System.Guid)
	
	Private _Lesson_Id As System.Guid
	
	Private _Lesson_Name As String
	
	Private _Lesson_IsActive As Boolean
	
	Private _t360_tblParts As EntitySet(Of t360_tblPart)
	
	Private _t360_tblUnit As EntityRef(Of t360_tblUnit)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnUnit_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUnit_IdChanged()
    End Sub
    Partial Private Sub OnLesson_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLesson_IdChanged()
    End Sub
    Partial Private Sub OnLesson_NameChanging(value As String)
    End Sub
    Partial Private Sub OnLesson_NameChanged()
    End Sub
    Partial Private Sub OnLesson_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLesson_IsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblParts = New EntitySet(Of t360_tblPart)(AddressOf Me.attach_t360_tblParts, AddressOf Me.detach_t360_tblParts)
		Me._t360_tblUnit = CType(Nothing, EntityRef(Of t360_tblUnit))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unit_Id", DbType:="UniqueIdentifier")>  _
	Public Property Unit_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Unit_Id
		End Get
		Set
			If (Me._Unit_Id.Equals(value) = false) Then
				If Me._t360_tblUnit.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUnit_IdChanging(value)
				Me.SendPropertyChanging
				Me._Unit_Id = value
				Me.SendPropertyChanged("Unit_Id")
				Me.OnUnit_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lesson_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Lesson_Id() As System.Guid
		Get
			Return Me._Lesson_Id
		End Get
		Set
			If ((Me._Lesson_Id = value)  _
						= false) Then
				Me.OnLesson_IdChanging(value)
				Me.SendPropertyChanging
				Me._Lesson_Id = value
				Me.SendPropertyChanged("Lesson_Id")
				Me.OnLesson_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lesson_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Lesson_Name() As String
		Get
			Return Me._Lesson_Name
		End Get
		Set
			If (String.Equals(Me._Lesson_Name, value) = false) Then
				Me.OnLesson_NameChanging(value)
				Me.SendPropertyChanging
				Me._Lesson_Name = value
				Me.SendPropertyChanged("Lesson_Name")
				Me.OnLesson_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lesson_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Lesson_IsActive() As Boolean
		Get
			Return Me._Lesson_IsActive
		End Get
		Set
			If ((Me._Lesson_IsActive = value)  _
						= false) Then
				Me.OnLesson_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Lesson_IsActive = value
				Me.SendPropertyChanged("Lesson_IsActive")
				Me.OnLesson_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblLesson_t360_tblPart", Storage:="_t360_tblParts", ThisKey:="Lesson_Id", OtherKey:="Lesson_Id")>  _
	Public Property t360_tblParts() As EntitySet(Of t360_tblPart)
		Get
			Return Me._t360_tblParts
		End Get
		Set
			Me._t360_tblParts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblUnit_t360_tblLesson", Storage:="_t360_tblUnit", ThisKey:="Unit_Id", OtherKey:="Unit_Id", IsForeignKey:=true)>  _
	Public Property t360_tblUnit() As t360_tblUnit
		Get
			Return Me._t360_tblUnit.Entity
		End Get
		Set
			Dim previousValue As t360_tblUnit = Me._t360_tblUnit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblUnit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblUnit.Entity = Nothing
					previousValue.t360_tblLessons.Remove(Me)
				End If
				Me._t360_tblUnit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblLessons.Add(Me)
					Me._Unit_Id = value.Unit_Id
				Else
					Me._Unit_Id = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("t360_tblUnit")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblParts(ByVal entity As t360_tblPart)
		Me.SendPropertyChanging
		entity.t360_tblLesson = Me
	End Sub
	
	Private Sub detach_t360_tblParts(ByVal entity As t360_tblPart)
		Me.SendPropertyChanging
		entity.t360_tblLesson = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblPart")>  _
Partial Public Class t360_tblPart
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _Lesson_Id As System.Guid
	
	Private _Part_Name As String
	
	Private _Part_IsActive As Boolean
	
	Private _t360_tblLesson As EntityRef(Of t360_tblLesson)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnLesson_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLesson_IdChanged()
    End Sub
    Partial Private Sub OnPart_NameChanging(value As String)
    End Sub
    Partial Private Sub OnPart_NameChanged()
    End Sub
    Partial Private Sub OnPart_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPart_IsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblLesson = CType(Nothing, EntityRef(Of t360_tblLesson))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lesson_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Lesson_Id() As System.Guid
		Get
			Return Me._Lesson_Id
		End Get
		Set
			If ((Me._Lesson_Id = value)  _
						= false) Then
				If Me._t360_tblLesson.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLesson_IdChanging(value)
				Me.SendPropertyChanging
				Me._Lesson_Id = value
				Me.SendPropertyChanged("Lesson_Id")
				Me.OnLesson_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Part_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Part_Name() As String
		Get
			Return Me._Part_Name
		End Get
		Set
			If (String.Equals(Me._Part_Name, value) = false) Then
				Me.OnPart_NameChanging(value)
				Me.SendPropertyChanging
				Me._Part_Name = value
				Me.SendPropertyChanged("Part_Name")
				Me.OnPart_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Part_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Part_IsActive() As Boolean
		Get
			Return Me._Part_IsActive
		End Get
		Set
			If ((Me._Part_IsActive = value)  _
						= false) Then
				Me.OnPart_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Part_IsActive = value
				Me.SendPropertyChanged("Part_IsActive")
				Me.OnPart_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblLesson_t360_tblPart", Storage:="_t360_tblLesson", ThisKey:="Lesson_Id", OtherKey:="Lesson_Id", IsForeignKey:=true)>  _
	Public Property t360_tblLesson() As t360_tblLesson
		Get
			Return Me._t360_tblLesson.Entity
		End Get
		Set
			Dim previousValue As t360_tblLesson = Me._t360_tblLesson.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblLesson.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblLesson.Entity = Nothing
					previousValue.t360_tblParts.Remove(Me)
				End If
				Me._t360_tblLesson.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblParts.Add(Me)
					Me._Lesson_Id = value.Lesson_Id
				Else
					Me._Lesson_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblLesson")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblSubjectClass")>  _
Partial Public Class t360_tblSubjectClass
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _Class_Name As String
	
	Private _Subject_Id As System.Guid
	
	Private _t360_tblSubject As EntityRef(Of t360_tblSubject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnClass_NameChanging(value As String)
    End Sub
    Partial Private Sub OnClass_NameChanged()
    End Sub
    Partial Private Sub OnSubject_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubject_IdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblSubject = CType(Nothing, EntityRef(Of t360_tblSubject))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				Me.OnClass_NameChanging(value)
				Me.SendPropertyChanging
				Me._Class_Name = value
				Me.SendPropertyChanged("Class_Name")
				Me.OnClass_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Subject_Id() As System.Guid
		Get
			Return Me._Subject_Id
		End Get
		Set
			If ((Me._Subject_Id = value)  _
						= false) Then
				If Me._t360_tblSubject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSubject_IdChanging(value)
				Me.SendPropertyChanging
				Me._Subject_Id = value
				Me.SendPropertyChanged("Subject_Id")
				Me.OnSubject_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubject_t360_tblSubjectClass", Storage:="_t360_tblSubject", ThisKey:="Subject_Id", OtherKey:="Subject_Id", IsForeignKey:=true)>  _
	Public Property t360_tblSubject() As t360_tblSubject
		Get
			Return Me._t360_tblSubject.Entity
		End Get
		Set
			Dim previousValue As t360_tblSubject = Me._t360_tblSubject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblSubject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblSubject.Entity = Nothing
					previousValue.t360_tblSubjectClasses.Remove(Me)
				End If
				Me._t360_tblSubject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblSubjectClasses.Add(Me)
					Me._Subject_Id = value.Subject_Id
				Else
					Me._Subject_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblSubject")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblSubjectType")>  _
Partial Public Class t360_tblSubjectType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ST_Id As System.Guid
	
	Private _ST_Name As String
	
	Private _SubjectType_IsActive As Boolean
	
	Private _t360_tblSchoolSubjectTypes As EntitySet(Of t360_tblSchoolSubjectType)
	
	Private _t360_tblSubject As EntityRef(Of t360_tblSubject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnST_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnST_IdChanged()
    End Sub
    Partial Private Sub OnST_NameChanging(value As String)
    End Sub
    Partial Private Sub OnST_NameChanged()
    End Sub
    Partial Private Sub OnSubjectType_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSubjectType_IsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblSchoolSubjectTypes = New EntitySet(Of t360_tblSchoolSubjectType)(AddressOf Me.attach_t360_tblSchoolSubjectTypes, AddressOf Me.detach_t360_tblSchoolSubjectTypes)
		Me._t360_tblSubject = CType(Nothing, EntityRef(Of t360_tblSubject))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ST_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ST_Id() As System.Guid
		Get
			Return Me._ST_Id
		End Get
		Set
			If ((Me._ST_Id = value)  _
						= false) Then
				If Me._t360_tblSubject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnST_IdChanging(value)
				Me.SendPropertyChanging
				Me._ST_Id = value
				Me.SendPropertyChanged("ST_Id")
				Me.OnST_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ST_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property ST_Name() As String
		Get
			Return Me._ST_Name
		End Get
		Set
			If (String.Equals(Me._ST_Name, value) = false) Then
				Me.OnST_NameChanging(value)
				Me.SendPropertyChanging
				Me._ST_Name = value
				Me.SendPropertyChanged("ST_Name")
				Me.OnST_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubjectType_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property SubjectType_IsActive() As Boolean
		Get
			Return Me._SubjectType_IsActive
		End Get
		Set
			If ((Me._SubjectType_IsActive = value)  _
						= false) Then
				Me.OnSubjectType_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._SubjectType_IsActive = value
				Me.SendPropertyChanged("SubjectType_IsActive")
				Me.OnSubjectType_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubjectType_t360_tblSchoolSubjectType", Storage:="_t360_tblSchoolSubjectTypes", ThisKey:="ST_Id", OtherKey:="ST_Id")>  _
	Public Property t360_tblSchoolSubjectTypes() As EntitySet(Of t360_tblSchoolSubjectType)
		Get
			Return Me._t360_tblSchoolSubjectTypes
		End Get
		Set
			Me._t360_tblSchoolSubjectTypes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubject_t360_tblSubjectType", Storage:="_t360_tblSubject", ThisKey:="ST_Id", OtherKey:="ST_Id", IsForeignKey:=true)>  _
	Public Property t360_tblSubject() As t360_tblSubject
		Get
			Return Me._t360_tblSubject.Entity
		End Get
		Set
			Dim previousValue As t360_tblSubject = Me._t360_tblSubject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblSubject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblSubject.Entity = Nothing
					previousValue.t360_tblSubjectTypes.Remove(Me)
				End If
				Me._t360_tblSubject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblSubjectTypes.Add(Me)
					Me._ST_Id = value.ST_Id
				Else
					Me._ST_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblSubject")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblSchoolSubjectTypes(ByVal entity As t360_tblSchoolSubjectType)
		Me.SendPropertyChanging
		entity.t360_tblSubjectType = Me
	End Sub
	
	Private Sub detach_t360_tblSchoolSubjectTypes(ByVal entity As t360_tblSchoolSubjectType)
		Me.SendPropertyChanging
		entity.t360_tblSubjectType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblSubject")>  _
Partial Public Class t360_tblSubject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _Subject_Id As System.Guid
	
	Private _Subject_Code As String
	
	Private _Subject_Name As String
	
	Private _ST_Id As System.Guid
	
	Private _Subject_IsActive As Boolean
	
	Private _t360_tblUnits As EntitySet(Of t360_tblUnit)
	
	Private _t360_tblSubjectClasses As EntitySet(Of t360_tblSubjectClass)
	
	Private _t360_tblSubjectTypes As EntitySet(Of t360_tblSubjectType)
	
	Private _t360_tblStudentCheckNames As EntitySet(Of t360_tblStudentCheckName)
	
	Private _t360_tblStudentTests As EntitySet(Of t360_tblStudentTest)
	
	Private _t360_tblStudentHomeWork As EntityRef(Of t360_tblStudentHomeWork)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnSubject_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubject_IdChanged()
    End Sub
    Partial Private Sub OnSubject_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSubject_CodeChanged()
    End Sub
    Partial Private Sub OnSubject_NameChanging(value As String)
    End Sub
    Partial Private Sub OnSubject_NameChanged()
    End Sub
    Partial Private Sub OnST_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnST_IdChanged()
    End Sub
    Partial Private Sub OnSubject_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSubject_IsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblUnits = New EntitySet(Of t360_tblUnit)(AddressOf Me.attach_t360_tblUnits, AddressOf Me.detach_t360_tblUnits)
		Me._t360_tblSubjectClasses = New EntitySet(Of t360_tblSubjectClass)(AddressOf Me.attach_t360_tblSubjectClasses, AddressOf Me.detach_t360_tblSubjectClasses)
		Me._t360_tblSubjectTypes = New EntitySet(Of t360_tblSubjectType)(AddressOf Me.attach_t360_tblSubjectTypes, AddressOf Me.detach_t360_tblSubjectTypes)
		Me._t360_tblStudentCheckNames = New EntitySet(Of t360_tblStudentCheckName)(AddressOf Me.attach_t360_tblStudentCheckNames, AddressOf Me.detach_t360_tblStudentCheckNames)
		Me._t360_tblStudentTests = New EntitySet(Of t360_tblStudentTest)(AddressOf Me.attach_t360_tblStudentTests, AddressOf Me.detach_t360_tblStudentTests)
		Me._t360_tblStudentHomeWork = CType(Nothing, EntityRef(Of t360_tblStudentHomeWork))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Subject_Id() As System.Guid
		Get
			Return Me._Subject_Id
		End Get
		Set
			If ((Me._Subject_Id = value)  _
						= false) Then
				If Me._t360_tblStudentHomeWork.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSubject_IdChanging(value)
				Me.SendPropertyChanging
				Me._Subject_Id = value
				Me.SendPropertyChanged("Subject_Id")
				Me.OnSubject_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Subject_Code() As String
		Get
			Return Me._Subject_Code
		End Get
		Set
			If (String.Equals(Me._Subject_Code, value) = false) Then
				Me.OnSubject_CodeChanging(value)
				Me.SendPropertyChanging
				Me._Subject_Code = value
				Me.SendPropertyChanged("Subject_Code")
				Me.OnSubject_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Subject_Name() As String
		Get
			Return Me._Subject_Name
		End Get
		Set
			If (String.Equals(Me._Subject_Name, value) = false) Then
				Me.OnSubject_NameChanging(value)
				Me.SendPropertyChanging
				Me._Subject_Name = value
				Me.SendPropertyChanged("Subject_Name")
				Me.OnSubject_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ST_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ST_Id() As System.Guid
		Get
			Return Me._ST_Id
		End Get
		Set
			If ((Me._ST_Id = value)  _
						= false) Then
				Me.OnST_IdChanging(value)
				Me.SendPropertyChanging
				Me._ST_Id = value
				Me.SendPropertyChanged("ST_Id")
				Me.OnST_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Subject_IsActive() As Boolean
		Get
			Return Me._Subject_IsActive
		End Get
		Set
			If ((Me._Subject_IsActive = value)  _
						= false) Then
				Me.OnSubject_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Subject_IsActive = value
				Me.SendPropertyChanged("Subject_IsActive")
				Me.OnSubject_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubject_t360_tblUnit", Storage:="_t360_tblUnits", ThisKey:="Subject_Id", OtherKey:="Subject_Id")>  _
	Public Property t360_tblUnits() As EntitySet(Of t360_tblUnit)
		Get
			Return Me._t360_tblUnits
		End Get
		Set
			Me._t360_tblUnits.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubject_t360_tblSubjectClass", Storage:="_t360_tblSubjectClasses", ThisKey:="Subject_Id", OtherKey:="Subject_Id")>  _
	Public Property t360_tblSubjectClasses() As EntitySet(Of t360_tblSubjectClass)
		Get
			Return Me._t360_tblSubjectClasses
		End Get
		Set
			Me._t360_tblSubjectClasses.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubject_t360_tblSubjectType", Storage:="_t360_tblSubjectTypes", ThisKey:="ST_Id", OtherKey:="ST_Id")>  _
	Public Property t360_tblSubjectTypes() As EntitySet(Of t360_tblSubjectType)
		Get
			Return Me._t360_tblSubjectTypes
		End Get
		Set
			Me._t360_tblSubjectTypes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubject_t360_tblStudentCheckName", Storage:="_t360_tblStudentCheckNames", ThisKey:="Subject_Id", OtherKey:="Subject_Id")>  _
	Public Property t360_tblStudentCheckNames() As EntitySet(Of t360_tblStudentCheckName)
		Get
			Return Me._t360_tblStudentCheckNames
		End Get
		Set
			Me._t360_tblStudentCheckNames.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubject_t360_tblStudentTest", Storage:="_t360_tblStudentTests", ThisKey:="Subject_Id", OtherKey:="Student_Id")>  _
	Public Property t360_tblStudentTests() As EntitySet(Of t360_tblStudentTest)
		Get
			Return Me._t360_tblStudentTests
		End Get
		Set
			Me._t360_tblStudentTests.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblStudentHomeWork_t360_tblSubject", Storage:="_t360_tblStudentHomeWork", ThisKey:="Subject_Id", OtherKey:="Subject_Id", IsForeignKey:=true)>  _
	Public Property t360_tblStudentHomeWork() As t360_tblStudentHomeWork
		Get
			Return Me._t360_tblStudentHomeWork.Entity
		End Get
		Set
			Dim previousValue As t360_tblStudentHomeWork = Me._t360_tblStudentHomeWork.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblStudentHomeWork.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblStudentHomeWork.Entity = Nothing
					previousValue.t360_tblSubjects.Remove(Me)
				End If
				Me._t360_tblStudentHomeWork.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblSubjects.Add(Me)
					Me._Subject_Id = value.Subject_Id
				Else
					Me._Subject_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblStudentHomeWork")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblUnits(ByVal entity As t360_tblUnit)
		Me.SendPropertyChanging
		entity.t360_tblSubject = Me
	End Sub
	
	Private Sub detach_t360_tblUnits(ByVal entity As t360_tblUnit)
		Me.SendPropertyChanging
		entity.t360_tblSubject = Nothing
	End Sub
	
	Private Sub attach_t360_tblSubjectClasses(ByVal entity As t360_tblSubjectClass)
		Me.SendPropertyChanging
		entity.t360_tblSubject = Me
	End Sub
	
	Private Sub detach_t360_tblSubjectClasses(ByVal entity As t360_tblSubjectClass)
		Me.SendPropertyChanging
		entity.t360_tblSubject = Nothing
	End Sub
	
	Private Sub attach_t360_tblSubjectTypes(ByVal entity As t360_tblSubjectType)
		Me.SendPropertyChanging
		entity.t360_tblSubject = Me
	End Sub
	
	Private Sub detach_t360_tblSubjectTypes(ByVal entity As t360_tblSubjectType)
		Me.SendPropertyChanging
		entity.t360_tblSubject = Nothing
	End Sub
	
	Private Sub attach_t360_tblStudentCheckNames(ByVal entity As t360_tblStudentCheckName)
		Me.SendPropertyChanging
		entity.t360_tblSubject = Me
	End Sub
	
	Private Sub detach_t360_tblStudentCheckNames(ByVal entity As t360_tblStudentCheckName)
		Me.SendPropertyChanging
		entity.t360_tblSubject = Nothing
	End Sub
	
	Private Sub attach_t360_tblStudentTests(ByVal entity As t360_tblStudentTest)
		Me.SendPropertyChanging
		entity.t360_tblSubject = Me
	End Sub
	
	Private Sub detach_t360_tblStudentTests(ByVal entity As t360_tblStudentTest)
		Me.SendPropertyChanging
		entity.t360_tblSubject = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblSchoolSubjectType")>  _
Partial Public Class t360_tblSchoolSubjectType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _ST_Id As System.Guid
	
	Private _t360_tblSubjectType As EntityRef(Of t360_tblSubjectType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnST_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnST_IdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblSubjectType = CType(Nothing, EntityRef(Of t360_tblSubjectType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ST_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ST_Id() As System.Guid
		Get
			Return Me._ST_Id
		End Get
		Set
			If ((Me._ST_Id = value)  _
						= false) Then
				If Me._t360_tblSubjectType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnST_IdChanging(value)
				Me.SendPropertyChanging
				Me._ST_Id = value
				Me.SendPropertyChanged("ST_Id")
				Me.OnST_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubjectType_t360_tblSchoolSubjectType", Storage:="_t360_tblSubjectType", ThisKey:="ST_Id", OtherKey:="ST_Id", IsForeignKey:=true)>  _
	Public Property t360_tblSubjectType() As t360_tblSubjectType
		Get
			Return Me._t360_tblSubjectType.Entity
		End Get
		Set
			Dim previousValue As t360_tblSubjectType = Me._t360_tblSubjectType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblSubjectType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblSubjectType.Entity = Nothing
					previousValue.t360_tblSchoolSubjectTypes.Remove(Me)
				End If
				Me._t360_tblSubjectType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblSchoolSubjectTypes.Add(Me)
					Me._ST_Id = value.ST_Id
				Else
					Me._ST_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblSubjectType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTestType")>  _
Partial Public Class t360_tblTestType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TestType_Id As System.Guid
	
	Private _TestType_Name As String
	
	Private _t360_tblStudentTests As EntitySet(Of t360_tblStudentTest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTestType_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTestType_IdChanged()
    End Sub
    Partial Private Sub OnTestType_NameChanging(value As String)
    End Sub
    Partial Private Sub OnTestType_NameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblStudentTests = New EntitySet(Of t360_tblStudentTest)(AddressOf Me.attach_t360_tblStudentTests, AddressOf Me.detach_t360_tblStudentTests)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestType_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TestType_Id() As System.Guid
		Get
			Return Me._TestType_Id
		End Get
		Set
			If ((Me._TestType_Id = value)  _
						= false) Then
				Me.OnTestType_IdChanging(value)
				Me.SendPropertyChanging
				Me._TestType_Id = value
				Me.SendPropertyChanged("TestType_Id")
				Me.OnTestType_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestType_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property TestType_Name() As String
		Get
			Return Me._TestType_Name
		End Get
		Set
			If (String.Equals(Me._TestType_Name, value) = false) Then
				Me.OnTestType_NameChanging(value)
				Me.SendPropertyChanging
				Me._TestType_Name = value
				Me.SendPropertyChanged("TestType_Name")
				Me.OnTestType_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTestType_t360_tblStudentTest", Storage:="_t360_tblStudentTests", ThisKey:="TestType_Id", OtherKey:="TestType_Id")>  _
	Public Property t360_tblStudentTests() As EntitySet(Of t360_tblStudentTest)
		Get
			Return Me._t360_tblStudentTests
		End Get
		Set
			Me._t360_tblStudentTests.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblStudentTests(ByVal entity As t360_tblStudentTest)
		Me.SendPropertyChanging
		entity.t360_tblTestType = Me
	End Sub
	
	Private Sub detach_t360_tblStudentTests(ByVal entity As t360_tblStudentTest)
		Me.SendPropertyChanging
		entity.t360_tblTestType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTeacher")>  _
Partial Public Class t360_tblTeacher
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Teacher_id As System.Guid
	
	Private _School_Code As String
	
	Private _Teacher_Code As String
	
	Private _Teacher_PrefixName As String
	
	Private _Teacher_FirstName As String
	
	Private _Teacher_LastName As String
	
	Private _Teacher_Phone As String
	
	Private _Teacher_Status As Byte
	
	Private _Teacher_CurrentClass As String
	
	Private _Teacher_CurrentRoom As String
	
	Private _Teacher_Number As String
	
	Private _Teacher_Soi As String
	
	Private _Teacher_Street As String
	
	Private _SubDistrict_Id As Integer
	
	Private _District_Id As Integer
	
	Private _Province_Id As Integer
	
	Private _Teacher_IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _t360_tblStudentHomeWorks As EntitySet(Of t360_tblStudentHomeWork)
	
	Private _t360_tblStudentCheckNames As EntitySet(Of t360_tblStudentCheckName)
	
	Private _t360_tblStudentTests As EntitySet(Of t360_tblStudentTest)
	
	Private _t360_tblTeacherRooms As EntitySet(Of t360_tblTeacherRoom)
	
	Private _tblAssistants As EntitySet(Of tblAssistant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTeacher_idChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTeacher_idChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnTeacher_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_CodeChanged()
    End Sub
    Partial Private Sub OnTeacher_PrefixNameChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_PrefixNameChanged()
    End Sub
    Partial Private Sub OnTeacher_FirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_FirstNameChanged()
    End Sub
    Partial Private Sub OnTeacher_LastNameChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_LastNameChanged()
    End Sub
    Partial Private Sub OnTeacher_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_PhoneChanged()
    End Sub
    Partial Private Sub OnTeacher_StatusChanging(value As Byte)
    End Sub
    Partial Private Sub OnTeacher_StatusChanged()
    End Sub
    Partial Private Sub OnTeacher_CurrentClassChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_CurrentClassChanged()
    End Sub
    Partial Private Sub OnTeacher_CurrentRoomChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_CurrentRoomChanged()
    End Sub
    Partial Private Sub OnTeacher_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_NumberChanged()
    End Sub
    Partial Private Sub OnTeacher_SoiChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_SoiChanged()
    End Sub
    Partial Private Sub OnTeacher_StreetChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_StreetChanged()
    End Sub
    Partial Private Sub OnSubDistrict_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubDistrict_IdChanged()
    End Sub
    Partial Private Sub OnDistrict_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDistrict_IdChanged()
    End Sub
    Partial Private Sub OnProvince_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvince_IdChanged()
    End Sub
    Partial Private Sub OnTeacher_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTeacher_IsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblStudentHomeWorks = New EntitySet(Of t360_tblStudentHomeWork)(AddressOf Me.attach_t360_tblStudentHomeWorks, AddressOf Me.detach_t360_tblStudentHomeWorks)
		Me._t360_tblStudentCheckNames = New EntitySet(Of t360_tblStudentCheckName)(AddressOf Me.attach_t360_tblStudentCheckNames, AddressOf Me.detach_t360_tblStudentCheckNames)
		Me._t360_tblStudentTests = New EntitySet(Of t360_tblStudentTest)(AddressOf Me.attach_t360_tblStudentTests, AddressOf Me.detach_t360_tblStudentTests)
		Me._t360_tblTeacherRooms = New EntitySet(Of t360_tblTeacherRoom)(AddressOf Me.attach_t360_tblTeacherRooms, AddressOf Me.detach_t360_tblTeacherRooms)
		Me._tblAssistants = New EntitySet(Of tblAssistant)(AddressOf Me.attach_tblAssistants, AddressOf Me.detach_tblAssistants)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Teacher_id() As System.Guid
		Get
			Return Me._Teacher_id
		End Get
		Set
			If ((Me._Teacher_id = value)  _
						= false) Then
				Me.OnTeacher_idChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_id = value
				Me.SendPropertyChanged("Teacher_id")
				Me.OnTeacher_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_Code() As String
		Get
			Return Me._Teacher_Code
		End Get
		Set
			If (String.Equals(Me._Teacher_Code, value) = false) Then
				Me.OnTeacher_CodeChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Code = value
				Me.SendPropertyChanged("Teacher_Code")
				Me.OnTeacher_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_PrefixName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_PrefixName() As String
		Get
			Return Me._Teacher_PrefixName
		End Get
		Set
			If (String.Equals(Me._Teacher_PrefixName, value) = false) Then
				Me.OnTeacher_PrefixNameChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_PrefixName = value
				Me.SendPropertyChanged("Teacher_PrefixName")
				Me.OnTeacher_PrefixNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_FirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_FirstName() As String
		Get
			Return Me._Teacher_FirstName
		End Get
		Set
			If (String.Equals(Me._Teacher_FirstName, value) = false) Then
				Me.OnTeacher_FirstNameChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_FirstName = value
				Me.SendPropertyChanged("Teacher_FirstName")
				Me.OnTeacher_FirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_LastName() As String
		Get
			Return Me._Teacher_LastName
		End Get
		Set
			If (String.Equals(Me._Teacher_LastName, value) = false) Then
				Me.OnTeacher_LastNameChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_LastName = value
				Me.SendPropertyChanged("Teacher_LastName")
				Me.OnTeacher_LastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Phone", DbType:="VarChar(50)")>  _
	Public Property Teacher_Phone() As String
		Get
			Return Me._Teacher_Phone
		End Get
		Set
			If (String.Equals(Me._Teacher_Phone, value) = false) Then
				Me.OnTeacher_PhoneChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Phone = value
				Me.SendPropertyChanged("Teacher_Phone")
				Me.OnTeacher_PhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Status", DbType:="TinyInt NOT NULL")>  _
	Public Property Teacher_Status() As Byte
		Get
			Return Me._Teacher_Status
		End Get
		Set
			If ((Me._Teacher_Status = value)  _
						= false) Then
				Me.OnTeacher_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Status = value
				Me.SendPropertyChanged("Teacher_Status")
				Me.OnTeacher_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_CurrentClass", DbType:="VarChar(50)")>  _
	Public Property Teacher_CurrentClass() As String
		Get
			Return Me._Teacher_CurrentClass
		End Get
		Set
			If (String.Equals(Me._Teacher_CurrentClass, value) = false) Then
				Me.OnTeacher_CurrentClassChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_CurrentClass = value
				Me.SendPropertyChanged("Teacher_CurrentClass")
				Me.OnTeacher_CurrentClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_CurrentRoom", DbType:="VarChar(50)")>  _
	Public Property Teacher_CurrentRoom() As String
		Get
			Return Me._Teacher_CurrentRoom
		End Get
		Set
			If (String.Equals(Me._Teacher_CurrentRoom, value) = false) Then
				Me.OnTeacher_CurrentRoomChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_CurrentRoom = value
				Me.SendPropertyChanged("Teacher_CurrentRoom")
				Me.OnTeacher_CurrentRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Number", DbType:="VarChar(50)")>  _
	Public Property Teacher_Number() As String
		Get
			Return Me._Teacher_Number
		End Get
		Set
			If (String.Equals(Me._Teacher_Number, value) = false) Then
				Me.OnTeacher_NumberChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Number = value
				Me.SendPropertyChanged("Teacher_Number")
				Me.OnTeacher_NumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Soi", DbType:="VarChar(100)")>  _
	Public Property Teacher_Soi() As String
		Get
			Return Me._Teacher_Soi
		End Get
		Set
			If (String.Equals(Me._Teacher_Soi, value) = false) Then
				Me.OnTeacher_SoiChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Soi = value
				Me.SendPropertyChanged("Teacher_Soi")
				Me.OnTeacher_SoiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Street", DbType:="VarChar(100)")>  _
	Public Property Teacher_Street() As String
		Get
			Return Me._Teacher_Street
		End Get
		Set
			If (String.Equals(Me._Teacher_Street, value) = false) Then
				Me.OnTeacher_StreetChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Street = value
				Me.SendPropertyChanged("Teacher_Street")
				Me.OnTeacher_StreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubDistrict_Id", DbType:="Int NOT NULL")>  _
	Public Property SubDistrict_Id() As Integer
		Get
			Return Me._SubDistrict_Id
		End Get
		Set
			If ((Me._SubDistrict_Id = value)  _
						= false) Then
				Me.OnSubDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._SubDistrict_Id = value
				Me.SendPropertyChanged("SubDistrict_Id")
				Me.OnSubDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District_Id", DbType:="Int NOT NULL")>  _
	Public Property District_Id() As Integer
		Get
			Return Me._District_Id
		End Get
		Set
			If ((Me._District_Id = value)  _
						= false) Then
				Me.OnDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._District_Id = value
				Me.SendPropertyChanged("District_Id")
				Me.OnDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province_Id", DbType:="Int NOT NULL")>  _
	Public Property Province_Id() As Integer
		Get
			Return Me._Province_Id
		End Get
		Set
			If ((Me._Province_Id = value)  _
						= false) Then
				Me.OnProvince_IdChanging(value)
				Me.SendPropertyChanging
				Me._Province_Id = value
				Me.SendPropertyChanged("Province_Id")
				Me.OnProvince_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Teacher_IsActive() As Boolean
		Get
			Return Me._Teacher_IsActive
		End Get
		Set
			If ((Me._Teacher_IsActive = value)  _
						= false) Then
				Me.OnTeacher_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_IsActive = value
				Me.SendPropertyChanged("Teacher_IsActive")
				Me.OnTeacher_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTeacher_t360_tblStudentHomeWork", Storage:="_t360_tblStudentHomeWorks", ThisKey:="Teacher_id", OtherKey:="Teacher_Id")>  _
	Public Property t360_tblStudentHomeWorks() As EntitySet(Of t360_tblStudentHomeWork)
		Get
			Return Me._t360_tblStudentHomeWorks
		End Get
		Set
			Me._t360_tblStudentHomeWorks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTeacher_t360_tblStudentCheckName", Storage:="_t360_tblStudentCheckNames", ThisKey:="Teacher_id", OtherKey:="Teacher_Id")>  _
	Public Property t360_tblStudentCheckNames() As EntitySet(Of t360_tblStudentCheckName)
		Get
			Return Me._t360_tblStudentCheckNames
		End Get
		Set
			Me._t360_tblStudentCheckNames.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTeacher_t360_tblStudentTest", Storage:="_t360_tblStudentTests", ThisKey:="Teacher_id", OtherKey:="Teacher_Id")>  _
	Public Property t360_tblStudentTests() As EntitySet(Of t360_tblStudentTest)
		Get
			Return Me._t360_tblStudentTests
		End Get
		Set
			Me._t360_tblStudentTests.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTeacher_t360_tblTeacherRoom", Storage:="_t360_tblTeacherRooms", ThisKey:="Teacher_id", OtherKey:="Teacher_Id")>  _
	Public Property t360_tblTeacherRooms() As EntitySet(Of t360_tblTeacherRoom)
		Get
			Return Me._t360_tblTeacherRooms
		End Get
		Set
			Me._t360_tblTeacherRooms.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTeacher_tblAssistant", Storage:="_tblAssistants", ThisKey:="Teacher_id", OtherKey:="Assistant_id")>  _
	Public Property tblAssistants() As EntitySet(Of tblAssistant)
		Get
			Return Me._tblAssistants
		End Get
		Set
			Me._tblAssistants.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblStudentHomeWorks(ByVal entity As t360_tblStudentHomeWork)
		Me.SendPropertyChanging
		entity.t360_tblTeacher = Me
	End Sub
	
	Private Sub detach_t360_tblStudentHomeWorks(ByVal entity As t360_tblStudentHomeWork)
		Me.SendPropertyChanging
		entity.t360_tblTeacher = Nothing
	End Sub
	
	Private Sub attach_t360_tblStudentCheckNames(ByVal entity As t360_tblStudentCheckName)
		Me.SendPropertyChanging
		entity.t360_tblTeacher = Me
	End Sub
	
	Private Sub detach_t360_tblStudentCheckNames(ByVal entity As t360_tblStudentCheckName)
		Me.SendPropertyChanging
		entity.t360_tblTeacher = Nothing
	End Sub
	
	Private Sub attach_t360_tblStudentTests(ByVal entity As t360_tblStudentTest)
		Me.SendPropertyChanging
		entity.t360_tblTeacher = Me
	End Sub
	
	Private Sub detach_t360_tblStudentTests(ByVal entity As t360_tblStudentTest)
		Me.SendPropertyChanging
		entity.t360_tblTeacher = Nothing
	End Sub
	
	Private Sub attach_t360_tblTeacherRooms(ByVal entity As t360_tblTeacherRoom)
		Me.SendPropertyChanging
		entity.t360_tblTeacher = Me
	End Sub
	
	Private Sub detach_t360_tblTeacherRooms(ByVal entity As t360_tblTeacherRoom)
		Me.SendPropertyChanging
		entity.t360_tblTeacher = Nothing
	End Sub
	
	Private Sub attach_tblAssistants(ByVal entity As tblAssistant)
		Me.SendPropertyChanging
		entity.t360_tblTeacher = Me
	End Sub
	
	Private Sub detach_tblAssistants(ByVal entity As tblAssistant)
		Me.SendPropertyChanging
		entity.t360_tblTeacher = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblStudentHomeWork")>  _
Partial Public Class t360_tblStudentHomeWork
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _Student_Id As System.Guid
	
	Private _Subject_Id As System.Guid
	
	Private _Teacher_Id As System.Guid
	
	Private _HW_Room As String
	
	Private _HW_Class As String
	
	Private _HW_MaxScore As Decimal
	
	Private _HW_Score As Decimal
	
	Private _HW_Date As Date
	
	Private _t360_tblSubjects As EntitySet(Of t360_tblSubject)
	
	Private _t360_tblTeacher As EntityRef(Of t360_tblTeacher)
	
	Private _t360_tblStudent As EntityRef(Of t360_tblStudent)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnSubject_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubject_IdChanged()
    End Sub
    Partial Private Sub OnTeacher_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTeacher_IdChanged()
    End Sub
    Partial Private Sub OnHW_RoomChanging(value As String)
    End Sub
    Partial Private Sub OnHW_RoomChanged()
    End Sub
    Partial Private Sub OnHW_ClassChanging(value As String)
    End Sub
    Partial Private Sub OnHW_ClassChanged()
    End Sub
    Partial Private Sub OnHW_MaxScoreChanging(value As Decimal)
    End Sub
    Partial Private Sub OnHW_MaxScoreChanged()
    End Sub
    Partial Private Sub OnHW_ScoreChanging(value As Decimal)
    End Sub
    Partial Private Sub OnHW_ScoreChanged()
    End Sub
    Partial Private Sub OnHW_DateChanging(value As Date)
    End Sub
    Partial Private Sub OnHW_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblSubjects = New EntitySet(Of t360_tblSubject)(AddressOf Me.attach_t360_tblSubjects, AddressOf Me.detach_t360_tblSubjects)
		Me._t360_tblTeacher = CType(Nothing, EntityRef(Of t360_tblTeacher))
		Me._t360_tblStudent = CType(Nothing, EntityRef(Of t360_tblStudent))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Student_Id() As System.Guid
		Get
			Return Me._Student_Id
		End Get
		Set
			If ((Me._Student_Id = value)  _
						= false) Then
				If Me._t360_tblStudent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Subject_Id() As System.Guid
		Get
			Return Me._Subject_Id
		End Get
		Set
			If ((Me._Subject_Id = value)  _
						= false) Then
				Me.OnSubject_IdChanging(value)
				Me.SendPropertyChanging
				Me._Subject_Id = value
				Me.SendPropertyChanged("Subject_Id")
				Me.OnSubject_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Teacher_Id() As System.Guid
		Get
			Return Me._Teacher_Id
		End Get
		Set
			If ((Me._Teacher_Id = value)  _
						= false) Then
				If Me._t360_tblTeacher.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTeacher_IdChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Id = value
				Me.SendPropertyChanged("Teacher_Id")
				Me.OnTeacher_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HW_Room", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property HW_Room() As String
		Get
			Return Me._HW_Room
		End Get
		Set
			If (String.Equals(Me._HW_Room, value) = false) Then
				Me.OnHW_RoomChanging(value)
				Me.SendPropertyChanging
				Me._HW_Room = value
				Me.SendPropertyChanged("HW_Room")
				Me.OnHW_RoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HW_Class", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property HW_Class() As String
		Get
			Return Me._HW_Class
		End Get
		Set
			If (String.Equals(Me._HW_Class, value) = false) Then
				Me.OnHW_ClassChanging(value)
				Me.SendPropertyChanging
				Me._HW_Class = value
				Me.SendPropertyChanged("HW_Class")
				Me.OnHW_ClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HW_MaxScore", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property HW_MaxScore() As Decimal
		Get
			Return Me._HW_MaxScore
		End Get
		Set
			If ((Me._HW_MaxScore = value)  _
						= false) Then
				Me.OnHW_MaxScoreChanging(value)
				Me.SendPropertyChanging
				Me._HW_MaxScore = value
				Me.SendPropertyChanged("HW_MaxScore")
				Me.OnHW_MaxScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HW_Score", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property HW_Score() As Decimal
		Get
			Return Me._HW_Score
		End Get
		Set
			If ((Me._HW_Score = value)  _
						= false) Then
				Me.OnHW_ScoreChanging(value)
				Me.SendPropertyChanging
				Me._HW_Score = value
				Me.SendPropertyChanged("HW_Score")
				Me.OnHW_ScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HW_Date", DbType:="SmallDateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property HW_Date() As Date
		Get
			Return Me._HW_Date
		End Get
		Set
			If ((Me._HW_Date = value)  _
						= false) Then
				Me.OnHW_DateChanging(value)
				Me.SendPropertyChanging
				Me._HW_Date = value
				Me.SendPropertyChanged("HW_Date")
				Me.OnHW_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblStudentHomeWork_t360_tblSubject", Storage:="_t360_tblSubjects", ThisKey:="Subject_Id", OtherKey:="Subject_Id")>  _
	Public Property t360_tblSubjects() As EntitySet(Of t360_tblSubject)
		Get
			Return Me._t360_tblSubjects
		End Get
		Set
			Me._t360_tblSubjects.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTeacher_t360_tblStudentHomeWork", Storage:="_t360_tblTeacher", ThisKey:="Teacher_Id", OtherKey:="Teacher_id", IsForeignKey:=true)>  _
	Public Property t360_tblTeacher() As t360_tblTeacher
		Get
			Return Me._t360_tblTeacher.Entity
		End Get
		Set
			Dim previousValue As t360_tblTeacher = Me._t360_tblTeacher.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTeacher.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTeacher.Entity = Nothing
					previousValue.t360_tblStudentHomeWorks.Remove(Me)
				End If
				Me._t360_tblTeacher.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblStudentHomeWorks.Add(Me)
					Me._Teacher_Id = value.Teacher_id
				Else
					Me._Teacher_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblTeacher")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblStudent_t360_tblStudentHomeWork", Storage:="_t360_tblStudent", ThisKey:="Student_Id", OtherKey:="Student_Id", IsForeignKey:=true)>  _
	Public Property t360_tblStudent() As t360_tblStudent
		Get
			Return Me._t360_tblStudent.Entity
		End Get
		Set
			Dim previousValue As t360_tblStudent = Me._t360_tblStudent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblStudent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblStudent.Entity = Nothing
					previousValue.t360_tblStudentHomeWorks.Remove(Me)
				End If
				Me._t360_tblStudent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblStudentHomeWorks.Add(Me)
					Me._Student_Id = value.Student_Id
				Else
					Me._Student_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblStudent")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblSubjects(ByVal entity As t360_tblSubject)
		Me.SendPropertyChanging
		entity.t360_tblStudentHomeWork = Me
	End Sub
	
	Private Sub detach_t360_tblSubjects(ByVal entity As t360_tblSubject)
		Me.SendPropertyChanging
		entity.t360_tblStudentHomeWork = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblStudentCheckName")>  _
Partial Public Class t360_tblStudentCheckName
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _Student_Id As System.Guid
	
	Private _Teacher_Id As System.Guid
	
	Private _Subject_Id As System.Guid
	
	Private _SCN_Class As String
	
	Private _SCN_Room As String
	
	Private _SCN_StartDate As Date
	
	Private _SCN_EndDate As Date
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _IsActive As Boolean
	
	Private _t360_tblTeacher As EntityRef(Of t360_tblTeacher)
	
	Private _t360_tblSubject As EntityRef(Of t360_tblSubject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnTeacher_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTeacher_IdChanged()
    End Sub
    Partial Private Sub OnSubject_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubject_IdChanged()
    End Sub
    Partial Private Sub OnSCN_ClassChanging(value As String)
    End Sub
    Partial Private Sub OnSCN_ClassChanged()
    End Sub
    Partial Private Sub OnSCN_RoomChanging(value As String)
    End Sub
    Partial Private Sub OnSCN_RoomChanged()
    End Sub
    Partial Private Sub OnSCN_StartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnSCN_StartDateChanged()
    End Sub
    Partial Private Sub OnSCN_EndDateChanging(value As Date)
    End Sub
    Partial Private Sub OnSCN_EndDateChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblTeacher = CType(Nothing, EntityRef(Of t360_tblTeacher))
		Me._t360_tblSubject = CType(Nothing, EntityRef(Of t360_tblSubject))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Student_Id() As System.Guid
		Get
			Return Me._Student_Id
		End Get
		Set
			If ((Me._Student_Id = value)  _
						= false) Then
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Teacher_Id() As System.Guid
		Get
			Return Me._Teacher_Id
		End Get
		Set
			If ((Me._Teacher_Id = value)  _
						= false) Then
				If Me._t360_tblTeacher.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTeacher_IdChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Id = value
				Me.SendPropertyChanged("Teacher_Id")
				Me.OnTeacher_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Subject_Id() As System.Guid
		Get
			Return Me._Subject_Id
		End Get
		Set
			If ((Me._Subject_Id = value)  _
						= false) Then
				If Me._t360_tblSubject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSubject_IdChanging(value)
				Me.SendPropertyChanging
				Me._Subject_Id = value
				Me.SendPropertyChanged("Subject_Id")
				Me.OnSubject_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SCN_Class", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property SCN_Class() As String
		Get
			Return Me._SCN_Class
		End Get
		Set
			If (String.Equals(Me._SCN_Class, value) = false) Then
				Me.OnSCN_ClassChanging(value)
				Me.SendPropertyChanging
				Me._SCN_Class = value
				Me.SendPropertyChanged("SCN_Class")
				Me.OnSCN_ClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SCN_Room", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property SCN_Room() As String
		Get
			Return Me._SCN_Room
		End Get
		Set
			If (String.Equals(Me._SCN_Room, value) = false) Then
				Me.OnSCN_RoomChanging(value)
				Me.SendPropertyChanging
				Me._SCN_Room = value
				Me.SendPropertyChanged("SCN_Room")
				Me.OnSCN_RoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SCN_StartDate", DbType:="SmallDateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SCN_StartDate() As Date
		Get
			Return Me._SCN_StartDate
		End Get
		Set
			If ((Me._SCN_StartDate = value)  _
						= false) Then
				Me.OnSCN_StartDateChanging(value)
				Me.SendPropertyChanging
				Me._SCN_StartDate = value
				Me.SendPropertyChanged("SCN_StartDate")
				Me.OnSCN_StartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SCN_EndDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property SCN_EndDate() As Date
		Get
			Return Me._SCN_EndDate
		End Get
		Set
			If ((Me._SCN_EndDate = value)  _
						= false) Then
				Me.OnSCN_EndDateChanging(value)
				Me.SendPropertyChanging
				Me._SCN_EndDate = value
				Me.SendPropertyChanged("SCN_EndDate")
				Me.OnSCN_EndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTeacher_t360_tblStudentCheckName", Storage:="_t360_tblTeacher", ThisKey:="Teacher_Id", OtherKey:="Teacher_id", IsForeignKey:=true)>  _
	Public Property t360_tblTeacher() As t360_tblTeacher
		Get
			Return Me._t360_tblTeacher.Entity
		End Get
		Set
			Dim previousValue As t360_tblTeacher = Me._t360_tblTeacher.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTeacher.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTeacher.Entity = Nothing
					previousValue.t360_tblStudentCheckNames.Remove(Me)
				End If
				Me._t360_tblTeacher.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblStudentCheckNames.Add(Me)
					Me._Teacher_Id = value.Teacher_id
				Else
					Me._Teacher_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblTeacher")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubject_t360_tblStudentCheckName", Storage:="_t360_tblSubject", ThisKey:="Subject_Id", OtherKey:="Subject_Id", IsForeignKey:=true)>  _
	Public Property t360_tblSubject() As t360_tblSubject
		Get
			Return Me._t360_tblSubject.Entity
		End Get
		Set
			Dim previousValue As t360_tblSubject = Me._t360_tblSubject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblSubject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblSubject.Entity = Nothing
					previousValue.t360_tblStudentCheckNames.Remove(Me)
				End If
				Me._t360_tblSubject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblStudentCheckNames.Add(Me)
					Me._Subject_Id = value.Subject_Id
				Else
					Me._Subject_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblSubject")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblStudentTest")>  _
Partial Public Class t360_tblStudentTest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _Student_Id As System.Guid
	
	Private _Teacher_Id As System.Guid
	
	Private _ST_Class As String
	
	Private _ST_Room As String
	
	Private _TestType_Id As System.Guid
	
	Private _Subject_Id As System.Guid
	
	Private _ST_MaxScore As Decimal
	
	Private _ST_Score As Decimal
	
	Private _ST_StartTime As Date
	
	Private _ST_EndTime As Date
	
	Private _t360_tblTeacher As EntityRef(Of t360_tblTeacher)
	
	Private _t360_tblTestType As EntityRef(Of t360_tblTestType)
	
	Private _t360_tblSubject As EntityRef(Of t360_tblSubject)
	
	Private _t360_tblStudent As EntityRef(Of t360_tblStudent)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnTeacher_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTeacher_IdChanged()
    End Sub
    Partial Private Sub OnST_ClassChanging(value As String)
    End Sub
    Partial Private Sub OnST_ClassChanged()
    End Sub
    Partial Private Sub OnST_RoomChanging(value As String)
    End Sub
    Partial Private Sub OnST_RoomChanged()
    End Sub
    Partial Private Sub OnTestType_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTestType_IdChanged()
    End Sub
    Partial Private Sub OnSubject_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSubject_IdChanged()
    End Sub
    Partial Private Sub OnST_MaxScoreChanging(value As Decimal)
    End Sub
    Partial Private Sub OnST_MaxScoreChanged()
    End Sub
    Partial Private Sub OnST_ScoreChanging(value As Decimal)
    End Sub
    Partial Private Sub OnST_ScoreChanged()
    End Sub
    Partial Private Sub OnST_StartTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnST_StartTimeChanged()
    End Sub
    Partial Private Sub OnST_EndTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnST_EndTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblTeacher = CType(Nothing, EntityRef(Of t360_tblTeacher))
		Me._t360_tblTestType = CType(Nothing, EntityRef(Of t360_tblTestType))
		Me._t360_tblSubject = CType(Nothing, EntityRef(Of t360_tblSubject))
		Me._t360_tblStudent = CType(Nothing, EntityRef(Of t360_tblStudent))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Student_Id() As System.Guid
		Get
			Return Me._Student_Id
		End Get
		Set
			If ((Me._Student_Id = value)  _
						= false) Then
				If (Me._t360_tblSubject.HasLoadedOrAssignedValue OrElse Me._t360_tblStudent.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Teacher_Id() As System.Guid
		Get
			Return Me._Teacher_Id
		End Get
		Set
			If ((Me._Teacher_Id = value)  _
						= false) Then
				If Me._t360_tblTeacher.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTeacher_IdChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Id = value
				Me.SendPropertyChanged("Teacher_Id")
				Me.OnTeacher_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ST_Class", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property ST_Class() As String
		Get
			Return Me._ST_Class
		End Get
		Set
			If (String.Equals(Me._ST_Class, value) = false) Then
				Me.OnST_ClassChanging(value)
				Me.SendPropertyChanging
				Me._ST_Class = value
				Me.SendPropertyChanged("ST_Class")
				Me.OnST_ClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ST_Room", DbType:="VarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property ST_Room() As String
		Get
			Return Me._ST_Room
		End Get
		Set
			If (String.Equals(Me._ST_Room, value) = false) Then
				Me.OnST_RoomChanging(value)
				Me.SendPropertyChanging
				Me._ST_Room = value
				Me.SendPropertyChanged("ST_Room")
				Me.OnST_RoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestType_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property TestType_Id() As System.Guid
		Get
			Return Me._TestType_Id
		End Get
		Set
			If ((Me._TestType_Id = value)  _
						= false) Then
				If Me._t360_tblTestType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTestType_IdChanging(value)
				Me.SendPropertyChanging
				Me._TestType_Id = value
				Me.SendPropertyChanged("TestType_Id")
				Me.OnTestType_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Subject_Id() As System.Guid
		Get
			Return Me._Subject_Id
		End Get
		Set
			If ((Me._Subject_Id = value)  _
						= false) Then
				Me.OnSubject_IdChanging(value)
				Me.SendPropertyChanging
				Me._Subject_Id = value
				Me.SendPropertyChanged("Subject_Id")
				Me.OnSubject_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ST_MaxScore", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property ST_MaxScore() As Decimal
		Get
			Return Me._ST_MaxScore
		End Get
		Set
			If ((Me._ST_MaxScore = value)  _
						= false) Then
				Me.OnST_MaxScoreChanging(value)
				Me.SendPropertyChanging
				Me._ST_MaxScore = value
				Me.SendPropertyChanged("ST_MaxScore")
				Me.OnST_MaxScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ST_Score", DbType:="Decimal(18,2) NOT NULL")>  _
	Public Property ST_Score() As Decimal
		Get
			Return Me._ST_Score
		End Get
		Set
			If ((Me._ST_Score = value)  _
						= false) Then
				Me.OnST_ScoreChanging(value)
				Me.SendPropertyChanging
				Me._ST_Score = value
				Me.SendPropertyChanged("ST_Score")
				Me.OnST_ScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ST_StartTime", DbType:="SmallDateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ST_StartTime() As Date
		Get
			Return Me._ST_StartTime
		End Get
		Set
			If ((Me._ST_StartTime = value)  _
						= false) Then
				Me.OnST_StartTimeChanging(value)
				Me.SendPropertyChanging
				Me._ST_StartTime = value
				Me.SendPropertyChanged("ST_StartTime")
				Me.OnST_StartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ST_EndTime", DbType:="SmallDateTime NOT NULL")>  _
	Public Property ST_EndTime() As Date
		Get
			Return Me._ST_EndTime
		End Get
		Set
			If ((Me._ST_EndTime = value)  _
						= false) Then
				Me.OnST_EndTimeChanging(value)
				Me.SendPropertyChanging
				Me._ST_EndTime = value
				Me.SendPropertyChanged("ST_EndTime")
				Me.OnST_EndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTeacher_t360_tblStudentTest", Storage:="_t360_tblTeacher", ThisKey:="Teacher_Id", OtherKey:="Teacher_id", IsForeignKey:=true)>  _
	Public Property t360_tblTeacher() As t360_tblTeacher
		Get
			Return Me._t360_tblTeacher.Entity
		End Get
		Set
			Dim previousValue As t360_tblTeacher = Me._t360_tblTeacher.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTeacher.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTeacher.Entity = Nothing
					previousValue.t360_tblStudentTests.Remove(Me)
				End If
				Me._t360_tblTeacher.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblStudentTests.Add(Me)
					Me._Teacher_Id = value.Teacher_id
				Else
					Me._Teacher_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblTeacher")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTestType_t360_tblStudentTest", Storage:="_t360_tblTestType", ThisKey:="TestType_Id", OtherKey:="TestType_Id", IsForeignKey:=true)>  _
	Public Property t360_tblTestType() As t360_tblTestType
		Get
			Return Me._t360_tblTestType.Entity
		End Get
		Set
			Dim previousValue As t360_tblTestType = Me._t360_tblTestType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTestType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTestType.Entity = Nothing
					previousValue.t360_tblStudentTests.Remove(Me)
				End If
				Me._t360_tblTestType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblStudentTests.Add(Me)
					Me._TestType_Id = value.TestType_Id
				Else
					Me._TestType_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblTestType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblSubject_t360_tblStudentTest", Storage:="_t360_tblSubject", ThisKey:="Student_Id", OtherKey:="Subject_Id", IsForeignKey:=true)>  _
	Public Property t360_tblSubject() As t360_tblSubject
		Get
			Return Me._t360_tblSubject.Entity
		End Get
		Set
			Dim previousValue As t360_tblSubject = Me._t360_tblSubject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblSubject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblSubject.Entity = Nothing
					previousValue.t360_tblStudentTests.Remove(Me)
				End If
				Me._t360_tblSubject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblStudentTests.Add(Me)
					Me._Student_Id = value.Subject_Id
				Else
					Me._Student_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblSubject")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblStudent_t360_tblStudentTest", Storage:="_t360_tblStudent", ThisKey:="Student_Id", OtherKey:="Student_Id", IsForeignKey:=true)>  _
	Public Property t360_tblStudent() As t360_tblStudent
		Get
			Return Me._t360_tblStudent.Entity
		End Get
		Set
			Dim previousValue As t360_tblStudent = Me._t360_tblStudent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblStudent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblStudent.Entity = Nothing
					previousValue.t360_tblStudentTests.Remove(Me)
				End If
				Me._t360_tblStudent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblStudentTests.Add(Me)
					Me._Student_Id = value.Student_Id
				Else
					Me._Student_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblStudent")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblStudentRoom")>  _
Partial Public Class t360_tblStudentRoom
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SR_Id As System.Guid
	
	Private _Student_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Student_NoInRoom As Byte
	
	Private _Class_Name As String
	
	Private _Room_Name As String
	
	Private _SR_MoveDate As Date
	
	Private _SR_AcademicYear As Short
	
	Private _SR_MoveType As Byte
	
	Private _SR_IsActive As Boolean
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _Room_Id As System.Nullable(Of System.Guid)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _t360_tblStudent As EntityRef(Of t360_tblStudent)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSR_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSR_IdChanged()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnStudent_NoInRoomChanging(value As Byte)
    End Sub
    Partial Private Sub OnStudent_NoInRoomChanged()
    End Sub
    Partial Private Sub OnClass_NameChanging(value As String)
    End Sub
    Partial Private Sub OnClass_NameChanged()
    End Sub
    Partial Private Sub OnRoom_NameChanging(value As String)
    End Sub
    Partial Private Sub OnRoom_NameChanged()
    End Sub
    Partial Private Sub OnSR_MoveDateChanging(value As Date)
    End Sub
    Partial Private Sub OnSR_MoveDateChanged()
    End Sub
    Partial Private Sub OnSR_AcademicYearChanging(value As Short)
    End Sub
    Partial Private Sub OnSR_AcademicYearChanged()
    End Sub
    Partial Private Sub OnSR_MoveTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnSR_MoveTypeChanged()
    End Sub
    Partial Private Sub OnSR_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSR_IsActiveChanged()
    End Sub
    Partial Private Sub OnCalendar_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCalendar_IdChanged()
    End Sub
    Partial Private Sub OnRoom_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRoom_IdChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblStudent = CType(Nothing, EntityRef(Of t360_tblStudent))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SR_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SR_Id() As System.Guid
		Get
			Return Me._SR_Id
		End Get
		Set
			If ((Me._SR_Id = value)  _
						= false) Then
				Me.OnSR_IdChanging(value)
				Me.SendPropertyChanging
				Me._SR_Id = value
				Me.SendPropertyChanged("SR_Id")
				Me.OnSR_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Student_Id() As System.Guid
		Get
			Return Me._Student_Id
		End Get
		Set
			If ((Me._Student_Id = value)  _
						= false) Then
				If Me._t360_tblStudent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_NoInRoom", DbType:="TinyInt NOT NULL")>  _
	Public Property Student_NoInRoom() As Byte
		Get
			Return Me._Student_NoInRoom
		End Get
		Set
			If ((Me._Student_NoInRoom = value)  _
						= false) Then
				Me.OnStudent_NoInRoomChanging(value)
				Me.SendPropertyChanging
				Me._Student_NoInRoom = value
				Me.SendPropertyChanged("Student_NoInRoom")
				Me.OnStudent_NoInRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				Me.OnClass_NameChanging(value)
				Me.SendPropertyChanging
				Me._Class_Name = value
				Me.SendPropertyChanged("Class_Name")
				Me.OnClass_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Room_Name() As String
		Get
			Return Me._Room_Name
		End Get
		Set
			If (String.Equals(Me._Room_Name, value) = false) Then
				Me.OnRoom_NameChanging(value)
				Me.SendPropertyChanging
				Me._Room_Name = value
				Me.SendPropertyChanged("Room_Name")
				Me.OnRoom_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SR_MoveDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property SR_MoveDate() As Date
		Get
			Return Me._SR_MoveDate
		End Get
		Set
			If ((Me._SR_MoveDate = value)  _
						= false) Then
				Me.OnSR_MoveDateChanging(value)
				Me.SendPropertyChanging
				Me._SR_MoveDate = value
				Me.SendPropertyChanged("SR_MoveDate")
				Me.OnSR_MoveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SR_AcademicYear", DbType:="SmallInt NOT NULL")>  _
	Public Property SR_AcademicYear() As Short
		Get
			Return Me._SR_AcademicYear
		End Get
		Set
			If ((Me._SR_AcademicYear = value)  _
						= false) Then
				Me.OnSR_AcademicYearChanging(value)
				Me.SendPropertyChanging
				Me._SR_AcademicYear = value
				Me.SendPropertyChanged("SR_AcademicYear")
				Me.OnSR_AcademicYearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SR_MoveType", DbType:="TinyInt NOT NULL")>  _
	Public Property SR_MoveType() As Byte
		Get
			Return Me._SR_MoveType
		End Get
		Set
			If ((Me._SR_MoveType = value)  _
						= false) Then
				Me.OnSR_MoveTypeChanging(value)
				Me.SendPropertyChanging
				Me._SR_MoveType = value
				Me.SendPropertyChanged("SR_MoveType")
				Me.OnSR_MoveTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SR_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property SR_IsActive() As Boolean
		Get
			Return Me._SR_IsActive
		End Get
		Set
			If ((Me._SR_IsActive = value)  _
						= false) Then
				Me.OnSR_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._SR_IsActive = value
				Me.SendPropertyChanged("SR_IsActive")
				Me.OnSR_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me.OnCalendar_IdChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Id = value
				Me.SendPropertyChanged("Calendar_Id")
				Me.OnCalendar_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Id", DbType:="UniqueIdentifier")>  _
	Public Property Room_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Room_Id
		End Get
		Set
			If (Me._Room_Id.Equals(value) = false) Then
				Me.OnRoom_IdChanging(value)
				Me.SendPropertyChanging
				Me._Room_Id = value
				Me.SendPropertyChanged("Room_Id")
				Me.OnRoom_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblStudent_t360_tblStudentRoom", Storage:="_t360_tblStudent", ThisKey:="Student_Id", OtherKey:="Student_Id", IsForeignKey:=true)>  _
	Public Property t360_tblStudent() As t360_tblStudent
		Get
			Return Me._t360_tblStudent.Entity
		End Get
		Set
			Dim previousValue As t360_tblStudent = Me._t360_tblStudent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblStudent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblStudent.Entity = Nothing
					previousValue.t360_tblStudentRooms.Remove(Me)
				End If
				Me._t360_tblStudent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblStudentRooms.Add(Me)
					Me._Student_Id = value.Student_Id
				Else
					Me._Student_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblStudent")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTeacherRoom")>  _
Partial Public Class t360_tblTeacherRoom
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TR_Id As System.Guid
	
	Private _Teacher_Id As System.Nullable(Of System.Guid)
	
	Private _School_Code As String
	
	Private _Class_Name As String
	
	Private _Room_Name As String
	
	Private _TR_UpdateDate As Date
	
	Private _TR_MoveType As Byte
	
	Private _TR_IsActive As Boolean
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _Room_Id As System.Guid
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _t360_tblTeacher As EntityRef(Of t360_tblTeacher)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTR_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTR_IdChanged()
    End Sub
    Partial Private Sub OnTeacher_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnTeacher_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnClass_NameChanging(value As String)
    End Sub
    Partial Private Sub OnClass_NameChanged()
    End Sub
    Partial Private Sub OnRoom_NameChanging(value As String)
    End Sub
    Partial Private Sub OnRoom_NameChanged()
    End Sub
    Partial Private Sub OnTR_UpdateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTR_UpdateDateChanged()
    End Sub
    Partial Private Sub OnTR_MoveTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnTR_MoveTypeChanged()
    End Sub
    Partial Private Sub OnTR_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTR_IsActiveChanged()
    End Sub
    Partial Private Sub OnCalendar_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCalendar_IdChanged()
    End Sub
    Partial Private Sub OnRoom_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoom_IdChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblTeacher = CType(Nothing, EntityRef(Of t360_tblTeacher))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TR_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TR_Id() As System.Guid
		Get
			Return Me._TR_Id
		End Get
		Set
			If ((Me._TR_Id = value)  _
						= false) Then
				Me.OnTR_IdChanging(value)
				Me.SendPropertyChanging
				Me._TR_Id = value
				Me.SendPropertyChanged("TR_Id")
				Me.OnTR_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Id", DbType:="UniqueIdentifier")>  _
	Public Property Teacher_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Teacher_Id
		End Get
		Set
			If (Me._Teacher_Id.Equals(value) = false) Then
				If Me._t360_tblTeacher.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTeacher_IdChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Id = value
				Me.SendPropertyChanged("Teacher_Id")
				Me.OnTeacher_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				Me.OnClass_NameChanging(value)
				Me.SendPropertyChanging
				Me._Class_Name = value
				Me.SendPropertyChanged("Class_Name")
				Me.OnClass_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Room_Name() As String
		Get
			Return Me._Room_Name
		End Get
		Set
			If (String.Equals(Me._Room_Name, value) = false) Then
				Me.OnRoom_NameChanging(value)
				Me.SendPropertyChanging
				Me._Room_Name = value
				Me.SendPropertyChanged("Room_Name")
				Me.OnRoom_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TR_UpdateDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property TR_UpdateDate() As Date
		Get
			Return Me._TR_UpdateDate
		End Get
		Set
			If ((Me._TR_UpdateDate = value)  _
						= false) Then
				Me.OnTR_UpdateDateChanging(value)
				Me.SendPropertyChanging
				Me._TR_UpdateDate = value
				Me.SendPropertyChanged("TR_UpdateDate")
				Me.OnTR_UpdateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TR_MoveType", DbType:="TinyInt NOT NULL")>  _
	Public Property TR_MoveType() As Byte
		Get
			Return Me._TR_MoveType
		End Get
		Set
			If ((Me._TR_MoveType = value)  _
						= false) Then
				Me.OnTR_MoveTypeChanging(value)
				Me.SendPropertyChanging
				Me._TR_MoveType = value
				Me.SendPropertyChanged("TR_MoveType")
				Me.OnTR_MoveTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TR_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property TR_IsActive() As Boolean
		Get
			Return Me._TR_IsActive
		End Get
		Set
			If ((Me._TR_IsActive = value)  _
						= false) Then
				Me.OnTR_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._TR_IsActive = value
				Me.SendPropertyChanged("TR_IsActive")
				Me.OnTR_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me.OnCalendar_IdChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Id = value
				Me.SendPropertyChanged("Calendar_Id")
				Me.OnCalendar_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Id", DbType:="UniqueIdentifier")>  _
	Public Property Room_Id() As System.Guid
		Get
			Return Me._Room_Id
		End Get
		Set
			If ((Me._Room_Id = value)  _
						= false) Then
				Me.OnRoom_IdChanging(value)
				Me.SendPropertyChanging
				Me._Room_Id = value
				Me.SendPropertyChanged("Room_Id")
				Me.OnRoom_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTeacher_t360_tblTeacherRoom", Storage:="_t360_tblTeacher", ThisKey:="Teacher_Id", OtherKey:="Teacher_id", IsForeignKey:=true)>  _
	Public Property t360_tblTeacher() As t360_tblTeacher
		Get
			Return Me._t360_tblTeacher.Entity
		End Get
		Set
			Dim previousValue As t360_tblTeacher = Me._t360_tblTeacher.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTeacher.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTeacher.Entity = Nothing
					previousValue.t360_tblTeacherRooms.Remove(Me)
				End If
				Me._t360_tblTeacher.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblTeacherRooms.Add(Me)
					Me._Teacher_Id = value.Teacher_id
				Else
					Me._Teacher_Id = CType(Nothing, Nullable(Of System.Guid))
				End If
				Me.SendPropertyChanged("t360_tblTeacher")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_uvwTabletDetail")>  _
Partial Public Class t360_uvwTabletDetail
	
	Private _School_Code As String
	
	Private _Student_Id As System.Nullable(Of System.Guid)
	
	Private _Student_Code As String
	
	Private _Student_PrefixName As String
	
	Private _Student_FirstName As String
	
	Private _Student_LastName As String
	
	Private _Class_Name As String
	
	Private _Room_Name As String
	
	Private _Class_Room As String
	
	Private _Start_Time As System.Nullable(Of Date)
	
	Private _End_Time As System.Nullable(Of Date)
	
	Private _DiffMin As System.Nullable(Of Integer)
	
	Private _Hr As System.Nullable(Of Integer)
	
	Private _Mn As System.Nullable(Of Integer)
	
	Private _Subject_Code As String
	
	Private _Subject_Name As String
	
	Private _Unit_Name As String
	
	Private _Lesson_Name As String
	
	Private _Part_Name As String
	
	Private _Teacher_Id As System.Nullable(Of System.Guid)
	
	Private _Teacher_Code As String
	
	Private _Teacher_PrefixName As String
	
	Private _Teacher_FirstName As String
	
	Private _Teacher_LastName As String
	
	Private _Check_Name As System.Nullable(Of Boolean)
	
	Private _Use_OutClassName As String
	
	Private _Use_OutClassType As System.Nullable(Of Byte)
	
	Private _Use_InClassName As String
	
	Private _Use_InClassType As System.Nullable(Of Byte)
	
	Private _Score_Full As System.Nullable(Of Decimal)
	
	Private _Score_Available As System.Nullable(Of Decimal)
	
	Private _Score_Type As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(100)")>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me._School_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier")>  _
	Public Property Student_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Student_Id
		End Get
		Set
			If (Me._Student_Id.Equals(value) = false) Then
				Me._Student_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Code", DbType:="VarChar(100)")>  _
	Public Property Student_Code() As String
		Get
			Return Me._Student_Code
		End Get
		Set
			If (String.Equals(Me._Student_Code, value) = false) Then
				Me._Student_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_PrefixName", DbType:="VarChar(100)")>  _
	Public Property Student_PrefixName() As String
		Get
			Return Me._Student_PrefixName
		End Get
		Set
			If (String.Equals(Me._Student_PrefixName, value) = false) Then
				Me._Student_PrefixName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_FirstName", DbType:="VarChar(100)")>  _
	Public Property Student_FirstName() As String
		Get
			Return Me._Student_FirstName
		End Get
		Set
			If (String.Equals(Me._Student_FirstName, value) = false) Then
				Me._Student_FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_LastName", DbType:="VarChar(100)")>  _
	Public Property Student_LastName() As String
		Get
			Return Me._Student_LastName
		End Get
		Set
			If (String.Equals(Me._Student_LastName, value) = false) Then
				Me._Student_LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(100)")>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				Me._Class_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Name", DbType:="VarChar(100)")>  _
	Public Property Room_Name() As String
		Get
			Return Me._Room_Name
		End Get
		Set
			If (String.Equals(Me._Room_Name, value) = false) Then
				Me._Room_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Room", DbType:="VarChar(201)")>  _
	Public Property Class_Room() As String
		Get
			Return Me._Class_Room
		End Get
		Set
			If (String.Equals(Me._Class_Room, value) = false) Then
				Me._Class_Room = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Start_Time", DbType:="SmallDateTime")>  _
	Public Property Start_Time() As System.Nullable(Of Date)
		Get
			Return Me._Start_Time
		End Get
		Set
			If (Me._Start_Time.Equals(value) = false) Then
				Me._Start_Time = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_End_Time", DbType:="SmallDateTime")>  _
	Public Property End_Time() As System.Nullable(Of Date)
		Get
			Return Me._End_Time
		End Get
		Set
			If (Me._End_Time.Equals(value) = false) Then
				Me._End_Time = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiffMin", DbType:="Int")>  _
	Public Property DiffMin() As System.Nullable(Of Integer)
		Get
			Return Me._DiffMin
		End Get
		Set
			If (Me._DiffMin.Equals(value) = false) Then
				Me._DiffMin = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Hr", DbType:="Int")>  _
	Public Property Hr() As System.Nullable(Of Integer)
		Get
			Return Me._Hr
		End Get
		Set
			If (Me._Hr.Equals(value) = false) Then
				Me._Hr = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mn", DbType:="Int")>  _
	Public Property Mn() As System.Nullable(Of Integer)
		Get
			Return Me._Mn
		End Get
		Set
			If (Me._Mn.Equals(value) = false) Then
				Me._Mn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Code", DbType:="VarChar(100)")>  _
	Public Property Subject_Code() As String
		Get
			Return Me._Subject_Code
		End Get
		Set
			If (String.Equals(Me._Subject_Code, value) = false) Then
				Me._Subject_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Name", DbType:="VarChar(100)")>  _
	Public Property Subject_Name() As String
		Get
			Return Me._Subject_Name
		End Get
		Set
			If (String.Equals(Me._Subject_Name, value) = false) Then
				Me._Subject_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Unit_Name", DbType:="VarChar(100)")>  _
	Public Property Unit_Name() As String
		Get
			Return Me._Unit_Name
		End Get
		Set
			If (String.Equals(Me._Unit_Name, value) = false) Then
				Me._Unit_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lesson_Name", DbType:="VarChar(100)")>  _
	Public Property Lesson_Name() As String
		Get
			Return Me._Lesson_Name
		End Get
		Set
			If (String.Equals(Me._Lesson_Name, value) = false) Then
				Me._Lesson_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Part_Name", DbType:="VarChar(100)")>  _
	Public Property Part_Name() As String
		Get
			Return Me._Part_Name
		End Get
		Set
			If (String.Equals(Me._Part_Name, value) = false) Then
				Me._Part_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Id", DbType:="UniqueIdentifier")>  _
	Public Property Teacher_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Teacher_Id
		End Get
		Set
			If (Me._Teacher_Id.Equals(value) = false) Then
				Me._Teacher_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Code", DbType:="VarChar(100)")>  _
	Public Property Teacher_Code() As String
		Get
			Return Me._Teacher_Code
		End Get
		Set
			If (String.Equals(Me._Teacher_Code, value) = false) Then
				Me._Teacher_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_PrefixName", DbType:="VarChar(100)")>  _
	Public Property Teacher_PrefixName() As String
		Get
			Return Me._Teacher_PrefixName
		End Get
		Set
			If (String.Equals(Me._Teacher_PrefixName, value) = false) Then
				Me._Teacher_PrefixName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_FirstName", DbType:="VarChar(100)")>  _
	Public Property Teacher_FirstName() As String
		Get
			Return Me._Teacher_FirstName
		End Get
		Set
			If (String.Equals(Me._Teacher_FirstName, value) = false) Then
				Me._Teacher_FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_LastName", DbType:="VarChar(100)")>  _
	Public Property Teacher_LastName() As String
		Get
			Return Me._Teacher_LastName
		End Get
		Set
			If (String.Equals(Me._Teacher_LastName, value) = false) Then
				Me._Teacher_LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Check_Name", DbType:="Bit")>  _
	Public Property Check_Name() As System.Nullable(Of Boolean)
		Get
			Return Me._Check_Name
		End Get
		Set
			If (Me._Check_Name.Equals(value) = false) Then
				Me._Check_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Use_OutClassName", DbType:="VarChar(100)")>  _
	Public Property Use_OutClassName() As String
		Get
			Return Me._Use_OutClassName
		End Get
		Set
			If (String.Equals(Me._Use_OutClassName, value) = false) Then
				Me._Use_OutClassName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Use_OutClassType", DbType:="TinyInt")>  _
	Public Property Use_OutClassType() As System.Nullable(Of Byte)
		Get
			Return Me._Use_OutClassType
		End Get
		Set
			If (Me._Use_OutClassType.Equals(value) = false) Then
				Me._Use_OutClassType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Use_InClassName", DbType:="VarChar(100)")>  _
	Public Property Use_InClassName() As String
		Get
			Return Me._Use_InClassName
		End Get
		Set
			If (String.Equals(Me._Use_InClassName, value) = false) Then
				Me._Use_InClassName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Use_InClassType", DbType:="TinyInt")>  _
	Public Property Use_InClassType() As System.Nullable(Of Byte)
		Get
			Return Me._Use_InClassType
		End Get
		Set
			If (Me._Use_InClassType.Equals(value) = false) Then
				Me._Use_InClassType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score_Full", DbType:="Decimal(18,2)")>  _
	Public Property Score_Full() As System.Nullable(Of Decimal)
		Get
			Return Me._Score_Full
		End Get
		Set
			If (Me._Score_Full.Equals(value) = false) Then
				Me._Score_Full = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score_Available", DbType:="Decimal(18,2)")>  _
	Public Property Score_Available() As System.Nullable(Of Decimal)
		Get
			Return Me._Score_Available
		End Get
		Set
			If (Me._Score_Available.Equals(value) = false) Then
				Me._Score_Available = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Score_Type", DbType:="Int")>  _
	Public Property Score_Type() As System.Nullable(Of Integer)
		Get
			Return Me._Score_Type
		End Get
		Set
			If (Me._Score_Type.Equals(value) = false) Then
				Me._Score_Type = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTempStudent")>  _
Partial Public Class t360_tblTempStudent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Is_Check As System.Nullable(Of Boolean)
	
	Private _Record_Status As System.Nullable(Of Byte)
	
	Private _Validate_Status As System.Nullable(Of Byte)
	
	Private _Validate_StatusMessage As String
	
	Private _Validate_Message As String
	
	Private _Student_Information As String
	
	Private _School_Code As String
	
	Private _Student_Id As System.Nullable(Of System.Guid)
	
	Private _Student_Code As String
	
	Private _Student_PrefixName As String
	
	Private _Student_FirstName As String
	
	Private _Student_LastName As String
	
	Private _Student_ParentName As String
	
	Private _Student_ParentPhone As String
	
	Private _Student_Status As System.Nullable(Of Byte)
	
	Private _Student_CurrentClass As String
	
	Private _Student_CurrentRoom As String
	
	Private _Student_Number As String
	
	Private _Student_Soi As String
	
	Private _Student_Street As String
	
	Private _SubDistrict_Id As System.Nullable(Of Integer)
	
	Private _District_Id As System.Nullable(Of Integer)
	
	Private _Province_Id As System.Nullable(Of Integer)
	
	Private _Student_IsActive As System.Nullable(Of Boolean)
	
	Private _Student_CurrentNoInRoom As System.Nullable(Of Byte)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIs_CheckChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIs_CheckChanged()
    End Sub
    Partial Private Sub OnRecord_StatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnRecord_StatusChanged()
    End Sub
    Partial Private Sub OnValidate_StatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnValidate_StatusChanged()
    End Sub
    Partial Private Sub OnValidate_StatusMessageChanging(value As String)
    End Sub
    Partial Private Sub OnValidate_StatusMessageChanged()
    End Sub
    Partial Private Sub OnValidate_MessageChanging(value As String)
    End Sub
    Partial Private Sub OnValidate_MessageChanged()
    End Sub
    Partial Private Sub OnStudent_InformationChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_InformationChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnStudent_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_CodeChanged()
    End Sub
    Partial Private Sub OnStudent_PrefixNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_PrefixNameChanged()
    End Sub
    Partial Private Sub OnStudent_FirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_FirstNameChanged()
    End Sub
    Partial Private Sub OnStudent_LastNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_LastNameChanged()
    End Sub
    Partial Private Sub OnStudent_ParentNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_ParentNameChanged()
    End Sub
    Partial Private Sub OnStudent_ParentPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_ParentPhoneChanged()
    End Sub
    Partial Private Sub OnStudent_StatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnStudent_StatusChanged()
    End Sub
    Partial Private Sub OnStudent_CurrentClassChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_CurrentClassChanged()
    End Sub
    Partial Private Sub OnStudent_CurrentRoomChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_CurrentRoomChanged()
    End Sub
    Partial Private Sub OnStudent_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_NumberChanged()
    End Sub
    Partial Private Sub OnStudent_SoiChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_SoiChanged()
    End Sub
    Partial Private Sub OnStudent_StreetChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_StreetChanged()
    End Sub
    Partial Private Sub OnSubDistrict_IdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubDistrict_IdChanged()
    End Sub
    Partial Private Sub OnDistrict_IdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDistrict_IdChanged()
    End Sub
    Partial Private Sub OnProvince_IdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProvince_IdChanged()
    End Sub
    Partial Private Sub OnStudent_IsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStudent_IsActiveChanged()
    End Sub
    Partial Private Sub OnStudent_CurrentNoInRoomChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnStudent_CurrentNoInRoomChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Is_Check", DbType:="Bit")>  _
	Public Property Is_Check() As System.Nullable(Of Boolean)
		Get
			Return Me._Is_Check
		End Get
		Set
			If (Me._Is_Check.Equals(value) = false) Then
				Me.OnIs_CheckChanging(value)
				Me.SendPropertyChanging
				Me._Is_Check = value
				Me.SendPropertyChanged("Is_Check")
				Me.OnIs_CheckChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Record_Status", DbType:="TinyInt")>  _
	Public Property Record_Status() As System.Nullable(Of Byte)
		Get
			Return Me._Record_Status
		End Get
		Set
			If (Me._Record_Status.Equals(value) = false) Then
				Me.OnRecord_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Record_Status = value
				Me.SendPropertyChanged("Record_Status")
				Me.OnRecord_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validate_Status", DbType:="TinyInt")>  _
	Public Property Validate_Status() As System.Nullable(Of Byte)
		Get
			Return Me._Validate_Status
		End Get
		Set
			If (Me._Validate_Status.Equals(value) = false) Then
				Me.OnValidate_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Validate_Status = value
				Me.SendPropertyChanged("Validate_Status")
				Me.OnValidate_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validate_StatusMessage", DbType:="VarChar(50)")>  _
	Public Property Validate_StatusMessage() As String
		Get
			Return Me._Validate_StatusMessage
		End Get
		Set
			If (String.Equals(Me._Validate_StatusMessage, value) = false) Then
				Me.OnValidate_StatusMessageChanging(value)
				Me.SendPropertyChanging
				Me._Validate_StatusMessage = value
				Me.SendPropertyChanged("Validate_StatusMessage")
				Me.OnValidate_StatusMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validate_Message", DbType:="VarChar(2000)")>  _
	Public Property Validate_Message() As String
		Get
			Return Me._Validate_Message
		End Get
		Set
			If (String.Equals(Me._Validate_Message, value) = false) Then
				Me.OnValidate_MessageChanging(value)
				Me.SendPropertyChanging
				Me._Validate_Message = value
				Me.SendPropertyChanged("Validate_Message")
				Me.OnValidate_MessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Information", DbType:="VarChar(2000)")>  _
	Public Property Student_Information() As String
		Get
			Return Me._Student_Information
		End Get
		Set
			If (String.Equals(Me._Student_Information, value) = false) Then
				Me.OnStudent_InformationChanging(value)
				Me.SendPropertyChanging
				Me._Student_Information = value
				Me.SendPropertyChanged("Student_Information")
				Me.OnStudent_InformationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20)")>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier")>  _
	Public Property Student_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Student_Id
		End Get
		Set
			If (Me._Student_Id.Equals(value) = false) Then
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Student_Code() As String
		Get
			Return Me._Student_Code
		End Get
		Set
			If (String.Equals(Me._Student_Code, value) = false) Then
				Me.OnStudent_CodeChanging(value)
				Me.SendPropertyChanging
				Me._Student_Code = value
				Me.SendPropertyChanged("Student_Code")
				Me.OnStudent_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_PrefixName", DbType:="VarChar(50)")>  _
	Public Property Student_PrefixName() As String
		Get
			Return Me._Student_PrefixName
		End Get
		Set
			If (String.Equals(Me._Student_PrefixName, value) = false) Then
				Me.OnStudent_PrefixNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_PrefixName = value
				Me.SendPropertyChanged("Student_PrefixName")
				Me.OnStudent_PrefixNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_FirstName", DbType:="VarChar(50)")>  _
	Public Property Student_FirstName() As String
		Get
			Return Me._Student_FirstName
		End Get
		Set
			If (String.Equals(Me._Student_FirstName, value) = false) Then
				Me.OnStudent_FirstNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_FirstName = value
				Me.SendPropertyChanged("Student_FirstName")
				Me.OnStudent_FirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_LastName", DbType:="VarChar(50)")>  _
	Public Property Student_LastName() As String
		Get
			Return Me._Student_LastName
		End Get
		Set
			If (String.Equals(Me._Student_LastName, value) = false) Then
				Me.OnStudent_LastNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_LastName = value
				Me.SendPropertyChanged("Student_LastName")
				Me.OnStudent_LastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_ParentName", DbType:="VarChar(100)")>  _
	Public Property Student_ParentName() As String
		Get
			Return Me._Student_ParentName
		End Get
		Set
			If (String.Equals(Me._Student_ParentName, value) = false) Then
				Me.OnStudent_ParentNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_ParentName = value
				Me.SendPropertyChanged("Student_ParentName")
				Me.OnStudent_ParentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_ParentPhone", DbType:="VarChar(50)")>  _
	Public Property Student_ParentPhone() As String
		Get
			Return Me._Student_ParentPhone
		End Get
		Set
			If (String.Equals(Me._Student_ParentPhone, value) = false) Then
				Me.OnStudent_ParentPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Student_ParentPhone = value
				Me.SendPropertyChanged("Student_ParentPhone")
				Me.OnStudent_ParentPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Status", DbType:="TinyInt")>  _
	Public Property Student_Status() As System.Nullable(Of Byte)
		Get
			Return Me._Student_Status
		End Get
		Set
			If (Me._Student_Status.Equals(value) = false) Then
				Me.OnStudent_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Student_Status = value
				Me.SendPropertyChanged("Student_Status")
				Me.OnStudent_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentClass", DbType:="VarChar(50)")>  _
	Public Property Student_CurrentClass() As String
		Get
			Return Me._Student_CurrentClass
		End Get
		Set
			If (String.Equals(Me._Student_CurrentClass, value) = false) Then
				Me.OnStudent_CurrentClassChanging(value)
				Me.SendPropertyChanging
				Me._Student_CurrentClass = value
				Me.SendPropertyChanged("Student_CurrentClass")
				Me.OnStudent_CurrentClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentRoom", DbType:="VarChar(50)")>  _
	Public Property Student_CurrentRoom() As String
		Get
			Return Me._Student_CurrentRoom
		End Get
		Set
			If (String.Equals(Me._Student_CurrentRoom, value) = false) Then
				Me.OnStudent_CurrentRoomChanging(value)
				Me.SendPropertyChanging
				Me._Student_CurrentRoom = value
				Me.SendPropertyChanged("Student_CurrentRoom")
				Me.OnStudent_CurrentRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Number", DbType:="VarChar(50)")>  _
	Public Property Student_Number() As String
		Get
			Return Me._Student_Number
		End Get
		Set
			If (String.Equals(Me._Student_Number, value) = false) Then
				Me.OnStudent_NumberChanging(value)
				Me.SendPropertyChanging
				Me._Student_Number = value
				Me.SendPropertyChanged("Student_Number")
				Me.OnStudent_NumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Soi", DbType:="VarChar(100)")>  _
	Public Property Student_Soi() As String
		Get
			Return Me._Student_Soi
		End Get
		Set
			If (String.Equals(Me._Student_Soi, value) = false) Then
				Me.OnStudent_SoiChanging(value)
				Me.SendPropertyChanging
				Me._Student_Soi = value
				Me.SendPropertyChanged("Student_Soi")
				Me.OnStudent_SoiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Street", DbType:="VarChar(100)")>  _
	Public Property Student_Street() As String
		Get
			Return Me._Student_Street
		End Get
		Set
			If (String.Equals(Me._Student_Street, value) = false) Then
				Me.OnStudent_StreetChanging(value)
				Me.SendPropertyChanging
				Me._Student_Street = value
				Me.SendPropertyChanged("Student_Street")
				Me.OnStudent_StreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubDistrict_Id", DbType:="Int")>  _
	Public Property SubDistrict_Id() As System.Nullable(Of Integer)
		Get
			Return Me._SubDistrict_Id
		End Get
		Set
			If (Me._SubDistrict_Id.Equals(value) = false) Then
				Me.OnSubDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._SubDistrict_Id = value
				Me.SendPropertyChanged("SubDistrict_Id")
				Me.OnSubDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District_Id", DbType:="Int")>  _
	Public Property District_Id() As System.Nullable(Of Integer)
		Get
			Return Me._District_Id
		End Get
		Set
			If (Me._District_Id.Equals(value) = false) Then
				Me.OnDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._District_Id = value
				Me.SendPropertyChanged("District_Id")
				Me.OnDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province_Id", DbType:="Int")>  _
	Public Property Province_Id() As System.Nullable(Of Integer)
		Get
			Return Me._Province_Id
		End Get
		Set
			If (Me._Province_Id.Equals(value) = false) Then
				Me.OnProvince_IdChanging(value)
				Me.SendPropertyChanging
				Me._Province_Id = value
				Me.SendPropertyChanged("Province_Id")
				Me.OnProvince_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_IsActive", DbType:="Bit")>  _
	Public Property Student_IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._Student_IsActive
		End Get
		Set
			If (Me._Student_IsActive.Equals(value) = false) Then
				Me.OnStudent_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Student_IsActive = value
				Me.SendPropertyChanged("Student_IsActive")
				Me.OnStudent_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentNoInRoom", DbType:="TinyInt ")>  _
	Public Property Student_CurrentNoInRoom() As System.Nullable(Of Byte)
		Get
			Return Me._Student_CurrentNoInRoom
		End Get
		Set
			If (Me._Student_CurrentNoInRoom.Equals(value) = false) Then
				Me.OnStudent_CurrentNoInRoomChanging(value)
				Me.SendPropertyChanging
				Me._Student_CurrentNoInRoom = value
				Me.SendPropertyChanged("Student_CurrentNoInRoom")
				Me.OnStudent_CurrentNoInRoomChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblNetworkHistory")>  _
Partial Public Class t360_tblNetworkHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NWH_Id As System.Guid
	
	Private _Network_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Network_IP As String
	
	Private _Network_Name As String
	
	Private _Network_Type As String
	
	Private _NWH_IsFound As Boolean
	
	Private _NWH_PingTime As Date
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _IsActive As Boolean
	
	Private _ClientId As String
	
	Private _t360_tblNetwork As EntityRef(Of t360_tblNetwork)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNWH_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNWH_IdChanged()
    End Sub
    Partial Private Sub OnNetwork_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNetwork_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnNetwork_IPChanging(value As String)
    End Sub
    Partial Private Sub OnNetwork_IPChanged()
    End Sub
    Partial Private Sub OnNetwork_NameChanging(value As String)
    End Sub
    Partial Private Sub OnNetwork_NameChanged()
    End Sub
    Partial Private Sub OnNetwork_TypeChanging(value As String)
    End Sub
    Partial Private Sub OnNetwork_TypeChanged()
    End Sub
    Partial Private Sub OnNWH_IsFoundChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNWH_IsFoundChanged()
    End Sub
    Partial Private Sub OnNWH_PingTimeChanging(value As Date)
    End Sub
    Partial Private Sub OnNWH_PingTimeChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblNetwork = CType(Nothing, EntityRef(Of t360_tblNetwork))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NWH_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property NWH_Id() As System.Guid
		Get
			Return Me._NWH_Id
		End Get
		Set
			If ((Me._NWH_Id = value)  _
						= false) Then
				Me.OnNWH_IdChanging(value)
				Me.SendPropertyChanging
				Me._NWH_Id = value
				Me.SendPropertyChanged("NWH_Id")
				Me.OnNWH_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Network_Id() As System.Guid
		Get
			Return Me._Network_Id
		End Get
		Set
			If ((Me._Network_Id = value)  _
						= false) Then
				If Me._t360_tblNetwork.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNetwork_IdChanging(value)
				Me.SendPropertyChanging
				Me._Network_Id = value
				Me.SendPropertyChanged("Network_Id")
				Me.OnNetwork_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_IP", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Network_IP() As String
		Get
			Return Me._Network_IP
		End Get
		Set
			If (String.Equals(Me._Network_IP, value) = false) Then
				Me.OnNetwork_IPChanging(value)
				Me.SendPropertyChanging
				Me._Network_IP = value
				Me.SendPropertyChanged("Network_IP")
				Me.OnNetwork_IPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Network_Name() As String
		Get
			Return Me._Network_Name
		End Get
		Set
			If (String.Equals(Me._Network_Name, value) = false) Then
				Me.OnNetwork_NameChanging(value)
				Me.SendPropertyChanging
				Me._Network_Name = value
				Me.SendPropertyChanged("Network_Name")
				Me.OnNetwork_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_Type", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Network_Type() As String
		Get
			Return Me._Network_Type
		End Get
		Set
			If (String.Equals(Me._Network_Type, value) = false) Then
				Me.OnNetwork_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Network_Type = value
				Me.SendPropertyChanged("Network_Type")
				Me.OnNetwork_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NWH_IsFound", DbType:="Bit NOT NULL")>  _
	Public Property NWH_IsFound() As Boolean
		Get
			Return Me._NWH_IsFound
		End Get
		Set
			If ((Me._NWH_IsFound = value)  _
						= false) Then
				Me.OnNWH_IsFoundChanging(value)
				Me.SendPropertyChanging
				Me._NWH_IsFound = value
				Me.SendPropertyChanged("NWH_IsFound")
				Me.OnNWH_IsFoundChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NWH_PingTime", DbType:="DateTime NOT NULL")>  _
	Public Property NWH_PingTime() As Date
		Get
			Return Me._NWH_PingTime
		End Get
		Set
			If ((Me._NWH_PingTime = value)  _
						= false) Then
				Me.OnNWH_PingTimeChanging(value)
				Me.SendPropertyChanging
				Me._NWH_PingTime = value
				Me.SendPropertyChanged("NWH_PingTime")
				Me.OnNWH_PingTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblNetwork_t360_tblNetworkHistory", Storage:="_t360_tblNetwork", ThisKey:="Network_Id", OtherKey:="Network_Id", IsForeignKey:=true)>  _
	Public Property t360_tblNetwork() As t360_tblNetwork
		Get
			Return Me._t360_tblNetwork.Entity
		End Get
		Set
			Dim previousValue As t360_tblNetwork = Me._t360_tblNetwork.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblNetwork.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblNetwork.Entity = Nothing
					previousValue.t360_tblNetworkHistories.Remove(Me)
				End If
				Me._t360_tblNetwork.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblNetworkHistories.Add(Me)
					Me._Network_Id = value.Network_Id
				Else
					Me._Network_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblNetwork")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblModule")>  _
Partial Public Class tblModule
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Module_Id As System.Guid
	
	Private _Title As String
	
	Private _Description As String
	
	Private _IsActive As Boolean
	
	Private _School_Code As String
	
	Private _LastUpdate As Date
	
	Private _Create_By As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnModule_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnModule_IdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnCreate_ByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCreate_ByChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Module_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Module_Id() As System.Guid
		Get
			Return Me._Module_Id
		End Get
		Set
			If ((Me._Module_Id = value)  _
						= false) Then
				Me.OnModule_IdChanging(value)
				Me.SendPropertyChanging
				Me._Module_Id = value
				Me.SendPropertyChanged("Module_Id")
				Me.OnModule_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20)")>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_By", DbType:="UniqueIdentifier")>  _
	Public Property Create_By() As System.Nullable(Of System.Guid)
		Get
			Return Me._Create_By
		End Get
		Set
			If (Me._Create_By.Equals(value) = false) Then
				Me.OnCreate_ByChanging(value)
				Me.SendPropertyChanging
				Me._Create_By = value
				Me.SendPropertyChanged("Create_By")
				Me.OnCreate_ByChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblModuleDetail")>  _
Partial Public Class tblModuleDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ModuleDetail_Id As System.Guid
	
	Private _Module_Id As System.Guid
	
	Private _Reference_Id As System.Guid
	
	Private _Reference_Type As Byte
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnModuleDetail_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnModuleDetail_IdChanged()
    End Sub
    Partial Private Sub OnModule_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnModule_IdChanged()
    End Sub
    Partial Private Sub OnReference_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnReference_IdChanged()
    End Sub
    Partial Private Sub OnReference_TypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnReference_TypeChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDetail_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ModuleDetail_Id() As System.Guid
		Get
			Return Me._ModuleDetail_Id
		End Get
		Set
			If ((Me._ModuleDetail_Id = value)  _
						= false) Then
				Me.OnModuleDetail_IdChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDetail_Id = value
				Me.SendPropertyChanged("ModuleDetail_Id")
				Me.OnModuleDetail_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Module_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Module_Id() As System.Guid
		Get
			Return Me._Module_Id
		End Get
		Set
			If ((Me._Module_Id = value)  _
						= false) Then
				Me.OnModule_IdChanging(value)
				Me.SendPropertyChanging
				Me._Module_Id = value
				Me.SendPropertyChanged("Module_Id")
				Me.OnModule_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Reference_Id() As System.Guid
		Get
			Return Me._Reference_Id
		End Get
		Set
			If ((Me._Reference_Id = value)  _
						= false) Then
				Me.OnReference_IdChanging(value)
				Me.SendPropertyChanging
				Me._Reference_Id = value
				Me.SendPropertyChanged("Reference_Id")
				Me.OnReference_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference_Type", DbType:="TinyInt NOT NULL")>  _
	Public Property Reference_Type() As Byte
		Get
			Return Me._Reference_Type
		End Get
		Set
			If ((Me._Reference_Type = value)  _
						= false) Then
				Me.OnReference_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Reference_Type = value
				Me.SendPropertyChanged("Reference_Type")
				Me.OnReference_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblModuleAssignmentDetail")>  _
Partial Public Class tblModuleAssignmentDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MAD_Id As System.Guid
	
	Private _MA_Id As System.Nullable(Of System.Guid)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _Class_Name As String
	
	Private _Student_Id As System.Nullable(Of System.Guid)
	
	Private _Subject_Id As System.Nullable(Of System.Guid)
	
	Private _Room_Id As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMAD_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnMAD_IdChanged()
    End Sub
    Partial Private Sub OnMA_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnMA_IdChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClass_NameChanging(value As String)
    End Sub
    Partial Private Sub OnClass_NameChanged()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnSubject_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSubject_IdChanged()
    End Sub
    Partial Private Sub OnRoom_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRoom_IdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAD_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property MAD_Id() As System.Guid
		Get
			Return Me._MAD_Id
		End Get
		Set
			If ((Me._MAD_Id = value)  _
						= false) Then
				Me.OnMAD_IdChanging(value)
				Me.SendPropertyChanging
				Me._MAD_Id = value
				Me.SendPropertyChanged("MAD_Id")
				Me.OnMAD_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MA_Id", DbType:="UniqueIdentifier")>  _
	Public Property MA_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._MA_Id
		End Get
		Set
			If (Me._MA_Id.Equals(value) = false) Then
				Me.OnMA_IdChanging(value)
				Me.SendPropertyChanging
				Me._MA_Id = value
				Me.SendPropertyChanged("MA_Id")
				Me.OnMA_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(50)")>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				Me.OnClass_NameChanging(value)
				Me.SendPropertyChanging
				Me._Class_Name = value
				Me.SendPropertyChanged("Class_Name")
				Me.OnClass_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier")>  _
	Public Property Student_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Student_Id
		End Get
		Set
			If (Me._Student_Id.Equals(value) = false) Then
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subject_Id", DbType:="UniqueIdentifier")>  _
	Public Property Subject_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Subject_Id
		End Get
		Set
			If (Me._Subject_Id.Equals(value) = false) Then
				Me.OnSubject_IdChanging(value)
				Me.SendPropertyChanging
				Me._Subject_Id = value
				Me.SendPropertyChanged("Subject_Id")
				Me.OnSubject_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Id", DbType:="UniqueIdentifier")>  _
	Public Property Room_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Room_Id
		End Get
		Set
			If (Me._Room_Id.Equals(value) = false) Then
				Me.OnRoom_IdChanging(value)
				Me.SendPropertyChanging
				Me._Room_Id = value
				Me.SendPropertyChanged("Room_Id")
				Me.OnRoom_IdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTestSet")>  _
Partial Public Class tblTestSet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TestSet_Id As System.Guid
	
	Private _TestSet_Name As String
	
	Private _UserIdOld As Integer
	
	Private _SchoolId As System.Nullable(Of Integer)
	
	Private _Level_Id As System.Nullable(Of System.Guid)
	
	Private _TestSet_Time As System.Nullable(Of Short)
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As Date
	
	Private _TestSet_FontSize As System.Nullable(Of Byte)
	
	Private _IsPracticeMode As System.Nullable(Of Boolean)
	
	Private _IsHomeWorkMode As System.Nullable(Of Boolean)
	
	Private _IsReportMode As System.Nullable(Of Boolean)
	
	Private _IsQuizMode As System.Nullable(Of Boolean)
	
	Private _IsStandard As System.Nullable(Of Boolean)
	
	Private _NeedConnectCheckmark As System.Nullable(Of Boolean)
	
	Private _UserId As System.Guid
	
	Private _UserType As Byte
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTestSet_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTestSet_IdChanged()
    End Sub
    Partial Private Sub OnTestSet_NameChanging(value As String)
    End Sub
    Partial Private Sub OnTestSet_NameChanged()
    End Sub
    Partial Private Sub OnUserIdOldChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdOldChanged()
    End Sub
    Partial Private Sub OnSchoolIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSchoolIdChanged()
    End Sub
    Partial Private Sub OnLevel_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnLevel_IdChanged()
    End Sub
    Partial Private Sub OnTestSet_TimeChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnTestSet_TimeChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnTestSet_FontSizeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnTestSet_FontSizeChanged()
    End Sub
    Partial Private Sub OnIsPracticeModeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsPracticeModeChanged()
    End Sub
    Partial Private Sub OnIsHomeWorkModeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsHomeWorkModeChanged()
    End Sub
    Partial Private Sub OnIsReportModeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsReportModeChanged()
    End Sub
    Partial Private Sub OnIsQuizModeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsQuizModeChanged()
    End Sub
    Partial Private Sub OnIsStandardChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsStandardChanged()
    End Sub
    Partial Private Sub OnNeedConnectCheckmarkChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNeedConnectCheckmarkChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnUserTypeChanged()
    End Sub
    Partial Private Sub OnCalendar_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCalendar_IdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSet_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TestSet_Id() As System.Guid
		Get
			Return Me._TestSet_Id
		End Get
		Set
			If ((Me._TestSet_Id = value)  _
						= false) Then
				Me.OnTestSet_IdChanging(value)
				Me.SendPropertyChanging
				Me._TestSet_Id = value
				Me.SendPropertyChanged("TestSet_Id")
				Me.OnTestSet_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSet_Name", DbType:="VarChar(255)")>  _
	Public Property TestSet_Name() As String
		Get
			Return Me._TestSet_Name
		End Get
		Set
			If (String.Equals(Me._TestSet_Name, value) = false) Then
				Me.OnTestSet_NameChanging(value)
				Me.SendPropertyChanging
				Me._TestSet_Name = value
				Me.SendPropertyChanged("TestSet_Name")
				Me.OnTestSet_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserIdOld", DbType:="Int NOT NULL")>  _
	Public Property UserIdOld() As Integer
		Get
			Return Me._UserIdOld
		End Get
		Set
			If ((Me._UserIdOld = value)  _
						= false) Then
				Me.OnUserIdOldChanging(value)
				Me.SendPropertyChanging
				Me._UserIdOld = value
				Me.SendPropertyChanged("UserIdOld")
				Me.OnUserIdOldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolId", DbType:="Int")>  _
	Public Property SchoolId() As System.Nullable(Of Integer)
		Get
			Return Me._SchoolId
		End Get
		Set
			If (Me._SchoolId.Equals(value) = false) Then
				Me.OnSchoolIdChanging(value)
				Me.SendPropertyChanging
				Me._SchoolId = value
				Me.SendPropertyChanged("SchoolId")
				Me.OnSchoolIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Level_Id", DbType:="UniqueIdentifier")>  _
	Public Property Level_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Level_Id
		End Get
		Set
			If (Me._Level_Id.Equals(value) = false) Then
				Me.OnLevel_IdChanging(value)
				Me.SendPropertyChanging
				Me._Level_Id = value
				Me.SendPropertyChanged("Level_Id")
				Me.OnLevel_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSet_Time", DbType:="SmallInt")>  _
	Public Property TestSet_Time() As System.Nullable(Of Short)
		Get
			Return Me._TestSet_Time
		End Get
		Set
			If (Me._TestSet_Time.Equals(value) = false) Then
				Me.OnTestSet_TimeChanging(value)
				Me.SendPropertyChanging
				Me._TestSet_Time = value
				Me.SendPropertyChanged("TestSet_Time")
				Me.OnTestSet_TimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSet_FontSize", DbType:="TinyInt")>  _
	Public Property TestSet_FontSize() As System.Nullable(Of Byte)
		Get
			Return Me._TestSet_FontSize
		End Get
		Set
			If (Me._TestSet_FontSize.Equals(value) = false) Then
				Me.OnTestSet_FontSizeChanging(value)
				Me.SendPropertyChanging
				Me._TestSet_FontSize = value
				Me.SendPropertyChanged("TestSet_FontSize")
				Me.OnTestSet_FontSizeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPracticeMode", DbType:="Bit")>  _
	Public Property IsPracticeMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPracticeMode
		End Get
		Set
			If (Me._IsPracticeMode.Equals(value) = false) Then
				Me.OnIsPracticeModeChanging(value)
				Me.SendPropertyChanging
				Me._IsPracticeMode = value
				Me.SendPropertyChanged("IsPracticeMode")
				Me.OnIsPracticeModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHomeWorkMode", DbType:="Bit")>  _
	Public Property IsHomeWorkMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsHomeWorkMode
		End Get
		Set
			If (Me._IsHomeWorkMode.Equals(value) = false) Then
				Me.OnIsHomeWorkModeChanging(value)
				Me.SendPropertyChanging
				Me._IsHomeWorkMode = value
				Me.SendPropertyChanged("IsHomeWorkMode")
				Me.OnIsHomeWorkModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsReportMode", DbType:="Bit")>  _
	Public Property IsReportMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsReportMode
		End Get
		Set
			If (Me._IsReportMode.Equals(value) = false) Then
				Me.OnIsReportModeChanging(value)
				Me.SendPropertyChanging
				Me._IsReportMode = value
				Me.SendPropertyChanged("IsReportMode")
				Me.OnIsReportModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsQuizMode", DbType:="Bit")>  _
	Public Property IsQuizMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsQuizMode
		End Get
		Set
			If (Me._IsQuizMode.Equals(value) = false) Then
				Me.OnIsQuizModeChanging(value)
				Me.SendPropertyChanging
				Me._IsQuizMode = value
				Me.SendPropertyChanged("IsQuizMode")
				Me.OnIsQuizModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsStandard", DbType:="Bit")>  _
	Public Property IsStandard() As System.Nullable(Of Boolean)
		Get
			Return Me._IsStandard
		End Get
		Set
			If (Me._IsStandard.Equals(value) = false) Then
				Me.OnIsStandardChanging(value)
				Me.SendPropertyChanging
				Me._IsStandard = value
				Me.SendPropertyChanged("IsStandard")
				Me.OnIsStandardChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NeedConnectCheckmark", DbType:="Bit")>  _
	Public Property NeedConnectCheckmark() As System.Nullable(Of Boolean)
		Get
			Return Me._NeedConnectCheckmark
		End Get
		Set
			If (Me._NeedConnectCheckmark.Equals(value) = false) Then
				Me.OnNeedConnectCheckmarkChanging(value)
				Me.SendPropertyChanging
				Me._NeedConnectCheckmark = value
				Me.SendPropertyChanged("NeedConnectCheckmark")
				Me.OnNeedConnectCheckmarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserType", DbType:="TinyInt NOT NULL")>  _
	Public Property UserType() As Byte
		Get
			Return Me._UserType
		End Get
		Set
			If ((Me._UserType = value)  _
						= false) Then
				Me.OnUserTypeChanging(value)
				Me.SendPropertyChanging
				Me._UserType = value
				Me.SendPropertyChanged("UserType")
				Me.OnUserTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me.OnCalendar_IdChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Id = value
				Me.SendPropertyChanged("Calendar_Id")
				Me.OnCalendar_IdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblStudent")>  _
Partial Public Class t360_tblStudent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Student_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Student_Code As String
	
	Private _Student_PrefixName As String
	
	Private _Student_FirstName As String
	
	Private _Student_LastName As String
	
	Private _Student_NickName As String
	
	Private _Student_FatherName As String
	
	Private _Student_FatherPhone As String
	
	Private _Student_MotherName As String
	
	Private _Student_MotherPhone As String
	
	Private _Student_Status As Byte
	
	Private _Student_CurrentNoInRoom As Byte
	
	Private _Student_CurrentClass As String
	
	Private _Student_CurrentRoom As String
	
	Private _Student_CurrentRoomId As System.Nullable(Of System.Guid)
	
	Private _Student_Phone As String
	
	Private _Student_Soi As String
	
	Private _Student_Street As String
	
	Private _SubDistrict_Id As Integer
	
	Private _District_Id As Integer
	
	Private _Province_Id As Integer
	
	Private _Student_IsActive As Boolean
	
	Private _Student_Number As String
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _Student_AvatarSeqNo As System.Nullable(Of Short)
	
	Private _Student_Gender As String
	
	Private _ClientId As String
	
	Private _Student_FatherPhone2 As String
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _t360_tblStudentHomeWorks As EntitySet(Of t360_tblStudentHomeWork)
	
	Private _t360_tblStudentTests As EntitySet(Of t360_tblStudentTest)
	
	Private _t360_tblStudentRooms As EntitySet(Of t360_tblStudentRoom)
	
	Private _t360_tblStudentFinishes As EntitySet(Of t360_tblStudentFinish)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnStudent_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_CodeChanged()
    End Sub
    Partial Private Sub OnStudent_PrefixNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_PrefixNameChanged()
    End Sub
    Partial Private Sub OnStudent_FirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_FirstNameChanged()
    End Sub
    Partial Private Sub OnStudent_LastNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_LastNameChanged()
    End Sub
    Partial Private Sub OnStudent_NickNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_NickNameChanged()
    End Sub
    Partial Private Sub OnStudent_FatherNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_FatherNameChanged()
    End Sub
    Partial Private Sub OnStudent_FatherPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_FatherPhoneChanged()
    End Sub
    Partial Private Sub OnStudent_MotherNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_MotherNameChanged()
    End Sub
    Partial Private Sub OnStudent_MotherPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_MotherPhoneChanged()
    End Sub
    Partial Private Sub OnStudent_StatusChanging(value As Byte)
    End Sub
    Partial Private Sub OnStudent_StatusChanged()
    End Sub
    Partial Private Sub OnStudent_CurrentNoInRoomChanging(value As Byte)
    End Sub
    Partial Private Sub OnStudent_CurrentNoInRoomChanged()
    End Sub
    Partial Private Sub OnStudent_CurrentClassChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_CurrentClassChanged()
    End Sub
    Partial Private Sub OnStudent_CurrentRoomChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_CurrentRoomChanged()
    End Sub
    Partial Private Sub OnStudent_CurrentRoomIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnStudent_CurrentRoomIdChanged()
    End Sub
    Partial Private Sub OnStudent_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_PhoneChanged()
    End Sub
    Partial Private Sub OnStudent_SoiChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_SoiChanged()
    End Sub
    Partial Private Sub OnStudent_StreetChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_StreetChanged()
    End Sub
    Partial Private Sub OnSubDistrict_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubDistrict_IdChanged()
    End Sub
    Partial Private Sub OnDistrict_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDistrict_IdChanged()
    End Sub
    Partial Private Sub OnProvince_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvince_IdChanged()
    End Sub
    Partial Private Sub OnStudent_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStudent_IsActiveChanged()
    End Sub
    Partial Private Sub OnStudent_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_NumberChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnStudent_AvatarSeqNoChanging(value As System.Nullable(Of Short))
    End Sub
    Partial Private Sub OnStudent_AvatarSeqNoChanged()
    End Sub
    Partial Private Sub OnStudent_GenderChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_GenderChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnStudent_FatherPhone2Changing(value As String)
    End Sub
    Partial Private Sub OnStudent_FatherPhone2Changed()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblStudentHomeWorks = New EntitySet(Of t360_tblStudentHomeWork)(AddressOf Me.attach_t360_tblStudentHomeWorks, AddressOf Me.detach_t360_tblStudentHomeWorks)
		Me._t360_tblStudentTests = New EntitySet(Of t360_tblStudentTest)(AddressOf Me.attach_t360_tblStudentTests, AddressOf Me.detach_t360_tblStudentTests)
		Me._t360_tblStudentRooms = New EntitySet(Of t360_tblStudentRoom)(AddressOf Me.attach_t360_tblStudentRooms, AddressOf Me.detach_t360_tblStudentRooms)
		Me._t360_tblStudentFinishes = New EntitySet(Of t360_tblStudentFinish)(AddressOf Me.attach_t360_tblStudentFinishes, AddressOf Me.detach_t360_tblStudentFinishes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Student_Id() As System.Guid
		Get
			Return Me._Student_Id
		End Get
		Set
			If ((Me._Student_Id = value)  _
						= false) Then
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Student_Code() As String
		Get
			Return Me._Student_Code
		End Get
		Set
			If (String.Equals(Me._Student_Code, value) = false) Then
				Me.OnStudent_CodeChanging(value)
				Me.SendPropertyChanging
				Me._Student_Code = value
				Me.SendPropertyChanged("Student_Code")
				Me.OnStudent_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_PrefixName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Student_PrefixName() As String
		Get
			Return Me._Student_PrefixName
		End Get
		Set
			If (String.Equals(Me._Student_PrefixName, value) = false) Then
				Me.OnStudent_PrefixNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_PrefixName = value
				Me.SendPropertyChanged("Student_PrefixName")
				Me.OnStudent_PrefixNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_FirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Student_FirstName() As String
		Get
			Return Me._Student_FirstName
		End Get
		Set
			If (String.Equals(Me._Student_FirstName, value) = false) Then
				Me.OnStudent_FirstNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_FirstName = value
				Me.SendPropertyChanged("Student_FirstName")
				Me.OnStudent_FirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Student_LastName() As String
		Get
			Return Me._Student_LastName
		End Get
		Set
			If (String.Equals(Me._Student_LastName, value) = false) Then
				Me.OnStudent_LastNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_LastName = value
				Me.SendPropertyChanged("Student_LastName")
				Me.OnStudent_LastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_NickName", DbType:="VarChar(20)")>  _
	Public Property Student_NickName() As String
		Get
			Return Me._Student_NickName
		End Get
		Set
			If (String.Equals(Me._Student_NickName, value) = false) Then
				Me.OnStudent_NickNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_NickName = value
				Me.SendPropertyChanged("Student_NickName")
				Me.OnStudent_NickNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_FatherName", DbType:="VarChar(100)")>  _
	Public Property Student_FatherName() As String
		Get
			Return Me._Student_FatherName
		End Get
		Set
			If (String.Equals(Me._Student_FatherName, value) = false) Then
				Me.OnStudent_FatherNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_FatherName = value
				Me.SendPropertyChanged("Student_FatherName")
				Me.OnStudent_FatherNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_FatherPhone", DbType:="VarChar(50)")>  _
	Public Property Student_FatherPhone() As String
		Get
			Return Me._Student_FatherPhone
		End Get
		Set
			If (String.Equals(Me._Student_FatherPhone, value) = false) Then
				Me.OnStudent_FatherPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Student_FatherPhone = value
				Me.SendPropertyChanged("Student_FatherPhone")
				Me.OnStudent_FatherPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_MotherName", DbType:="VarChar(100)")>  _
	Public Property Student_MotherName() As String
		Get
			Return Me._Student_MotherName
		End Get
		Set
			If (String.Equals(Me._Student_MotherName, value) = false) Then
				Me.OnStudent_MotherNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_MotherName = value
				Me.SendPropertyChanged("Student_MotherName")
				Me.OnStudent_MotherNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_MotherPhone", DbType:="VarChar(50)")>  _
	Public Property Student_MotherPhone() As String
		Get
			Return Me._Student_MotherPhone
		End Get
		Set
			If (String.Equals(Me._Student_MotherPhone, value) = false) Then
				Me.OnStudent_MotherPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Student_MotherPhone = value
				Me.SendPropertyChanged("Student_MotherPhone")
				Me.OnStudent_MotherPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Status", DbType:="TinyInt NOT NULL")>  _
	Public Property Student_Status() As Byte
		Get
			Return Me._Student_Status
		End Get
		Set
			If ((Me._Student_Status = value)  _
						= false) Then
				Me.OnStudent_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Student_Status = value
				Me.SendPropertyChanged("Student_Status")
				Me.OnStudent_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentNoInRoom", DbType:="TinyInt NOT NULL")>  _
	Public Property Student_CurrentNoInRoom() As Byte
		Get
			Return Me._Student_CurrentNoInRoom
		End Get
		Set
			If ((Me._Student_CurrentNoInRoom = value)  _
						= false) Then
				Me.OnStudent_CurrentNoInRoomChanging(value)
				Me.SendPropertyChanging
				Me._Student_CurrentNoInRoom = value
				Me.SendPropertyChanged("Student_CurrentNoInRoom")
				Me.OnStudent_CurrentNoInRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentClass", DbType:="VarChar(50)")>  _
	Public Property Student_CurrentClass() As String
		Get
			Return Me._Student_CurrentClass
		End Get
		Set
			If (String.Equals(Me._Student_CurrentClass, value) = false) Then
				Me.OnStudent_CurrentClassChanging(value)
				Me.SendPropertyChanging
				Me._Student_CurrentClass = value
				Me.SendPropertyChanged("Student_CurrentClass")
				Me.OnStudent_CurrentClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentRoom", DbType:="VarChar(50)")>  _
	Public Property Student_CurrentRoom() As String
		Get
			Return Me._Student_CurrentRoom
		End Get
		Set
			If (String.Equals(Me._Student_CurrentRoom, value) = false) Then
				Me.OnStudent_CurrentRoomChanging(value)
				Me.SendPropertyChanging
				Me._Student_CurrentRoom = value
				Me.SendPropertyChanged("Student_CurrentRoom")
				Me.OnStudent_CurrentRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentRoomId", DbType:="UniqueIdentifier")>  _
	Public Property Student_CurrentRoomId() As System.Nullable(Of System.Guid)
		Get
			Return Me._Student_CurrentRoomId
		End Get
		Set
			If (Me._Student_CurrentRoomId.Equals(value) = false) Then
				Me.OnStudent_CurrentRoomIdChanging(value)
				Me.SendPropertyChanging
				Me._Student_CurrentRoomId = value
				Me.SendPropertyChanged("Student_CurrentRoomId")
				Me.OnStudent_CurrentRoomIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Phone", DbType:="VarChar(50)")>  _
	Public Property Student_Phone() As String
		Get
			Return Me._Student_Phone
		End Get
		Set
			If (String.Equals(Me._Student_Phone, value) = false) Then
				Me.OnStudent_PhoneChanging(value)
				Me.SendPropertyChanging
				Me._Student_Phone = value
				Me.SendPropertyChanged("Student_Phone")
				Me.OnStudent_PhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Soi", DbType:="VarChar(100)")>  _
	Public Property Student_Soi() As String
		Get
			Return Me._Student_Soi
		End Get
		Set
			If (String.Equals(Me._Student_Soi, value) = false) Then
				Me.OnStudent_SoiChanging(value)
				Me.SendPropertyChanging
				Me._Student_Soi = value
				Me.SendPropertyChanged("Student_Soi")
				Me.OnStudent_SoiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Street", DbType:="VarChar(100)")>  _
	Public Property Student_Street() As String
		Get
			Return Me._Student_Street
		End Get
		Set
			If (String.Equals(Me._Student_Street, value) = false) Then
				Me.OnStudent_StreetChanging(value)
				Me.SendPropertyChanging
				Me._Student_Street = value
				Me.SendPropertyChanged("Student_Street")
				Me.OnStudent_StreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubDistrict_Id", DbType:="Int NOT NULL")>  _
	Public Property SubDistrict_Id() As Integer
		Get
			Return Me._SubDistrict_Id
		End Get
		Set
			If ((Me._SubDistrict_Id = value)  _
						= false) Then
				Me.OnSubDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._SubDistrict_Id = value
				Me.SendPropertyChanged("SubDistrict_Id")
				Me.OnSubDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District_Id", DbType:="Int NOT NULL")>  _
	Public Property District_Id() As Integer
		Get
			Return Me._District_Id
		End Get
		Set
			If ((Me._District_Id = value)  _
						= false) Then
				Me.OnDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._District_Id = value
				Me.SendPropertyChanged("District_Id")
				Me.OnDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province_Id", DbType:="Int NOT NULL")>  _
	Public Property Province_Id() As Integer
		Get
			Return Me._Province_Id
		End Get
		Set
			If ((Me._Province_Id = value)  _
						= false) Then
				Me.OnProvince_IdChanging(value)
				Me.SendPropertyChanging
				Me._Province_Id = value
				Me.SendPropertyChanged("Province_Id")
				Me.OnProvince_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Student_IsActive() As Boolean
		Get
			Return Me._Student_IsActive
		End Get
		Set
			If ((Me._Student_IsActive = value)  _
						= false) Then
				Me.OnStudent_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Student_IsActive = value
				Me.SendPropertyChanged("Student_IsActive")
				Me.OnStudent_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Number", DbType:="VarChar(100)")>  _
	Public Property Student_Number() As String
		Get
			Return Me._Student_Number
		End Get
		Set
			If (String.Equals(Me._Student_Number, value) = false) Then
				Me.OnStudent_NumberChanging(value)
				Me.SendPropertyChanging
				Me._Student_Number = value
				Me.SendPropertyChanged("Student_Number")
				Me.OnStudent_NumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_AvatarSeqNo", DbType:="SmallInt")>  _
	Public Property Student_AvatarSeqNo() As System.Nullable(Of Short)
		Get
			Return Me._Student_AvatarSeqNo
		End Get
		Set
			If (Me._Student_AvatarSeqNo.Equals(value) = false) Then
				Me.OnStudent_AvatarSeqNoChanging(value)
				Me.SendPropertyChanging
				Me._Student_AvatarSeqNo = value
				Me.SendPropertyChanged("Student_AvatarSeqNo")
				Me.OnStudent_AvatarSeqNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Gender", DbType:="VarChar(10)")>  _
	Public Property Student_Gender() As String
		Get
			Return Me._Student_Gender
		End Get
		Set
			If (String.Equals(Me._Student_Gender, value) = false) Then
				Me.OnStudent_GenderChanging(value)
				Me.SendPropertyChanging
				Me._Student_Gender = value
				Me.SendPropertyChanged("Student_Gender")
				Me.OnStudent_GenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_FatherPhone2", DbType:="VarChar(50)")>  _
	Public Property Student_FatherPhone2() As String
		Get
			Return Me._Student_FatherPhone2
		End Get
		Set
			If (String.Equals(Me._Student_FatherPhone2, value) = false) Then
				Me.OnStudent_FatherPhone2Changing(value)
				Me.SendPropertyChanging
				Me._Student_FatherPhone2 = value
				Me.SendPropertyChanged("Student_FatherPhone2")
				Me.OnStudent_FatherPhone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(100)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(100)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblStudent_t360_tblStudentHomeWork", Storage:="_t360_tblStudentHomeWorks", ThisKey:="Student_Id", OtherKey:="Student_Id")>  _
	Public Property t360_tblStudentHomeWorks() As EntitySet(Of t360_tblStudentHomeWork)
		Get
			Return Me._t360_tblStudentHomeWorks
		End Get
		Set
			Me._t360_tblStudentHomeWorks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblStudent_t360_tblStudentTest", Storage:="_t360_tblStudentTests", ThisKey:="Student_Id", OtherKey:="Student_Id")>  _
	Public Property t360_tblStudentTests() As EntitySet(Of t360_tblStudentTest)
		Get
			Return Me._t360_tblStudentTests
		End Get
		Set
			Me._t360_tblStudentTests.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblStudent_t360_tblStudentRoom", Storage:="_t360_tblStudentRooms", ThisKey:="Student_Id", OtherKey:="Student_Id")>  _
	Public Property t360_tblStudentRooms() As EntitySet(Of t360_tblStudentRoom)
		Get
			Return Me._t360_tblStudentRooms
		End Get
		Set
			Me._t360_tblStudentRooms.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblStudent_t360_tblStudentFinish", Storage:="_t360_tblStudentFinishes", ThisKey:="Student_Id", OtherKey:="Student_Id")>  _
	Public Property t360_tblStudentFinishes() As EntitySet(Of t360_tblStudentFinish)
		Get
			Return Me._t360_tblStudentFinishes
		End Get
		Set
			Me._t360_tblStudentFinishes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblStudentHomeWorks(ByVal entity As t360_tblStudentHomeWork)
		Me.SendPropertyChanging
		entity.t360_tblStudent = Me
	End Sub
	
	Private Sub detach_t360_tblStudentHomeWorks(ByVal entity As t360_tblStudentHomeWork)
		Me.SendPropertyChanging
		entity.t360_tblStudent = Nothing
	End Sub
	
	Private Sub attach_t360_tblStudentTests(ByVal entity As t360_tblStudentTest)
		Me.SendPropertyChanging
		entity.t360_tblStudent = Me
	End Sub
	
	Private Sub detach_t360_tblStudentTests(ByVal entity As t360_tblStudentTest)
		Me.SendPropertyChanging
		entity.t360_tblStudent = Nothing
	End Sub
	
	Private Sub attach_t360_tblStudentRooms(ByVal entity As t360_tblStudentRoom)
		Me.SendPropertyChanging
		entity.t360_tblStudent = Me
	End Sub
	
	Private Sub detach_t360_tblStudentRooms(ByVal entity As t360_tblStudentRoom)
		Me.SendPropertyChanging
		entity.t360_tblStudent = Nothing
	End Sub
	
	Private Sub attach_t360_tblStudentFinishes(ByVal entity As t360_tblStudentFinish)
		Me.SendPropertyChanging
		entity.t360_tblStudent = Me
	End Sub
	
	Private Sub detach_t360_tblStudentFinishes(ByVal entity As t360_tblStudentFinish)
		Me.SendPropertyChanging
		entity.t360_tblStudent = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvw_GetSubjectForHomework")>  _
Partial Public Class uvw_GetSubjectForHomework
	
	Private _GroupSubject_Id As System.Guid
	
	Private _GroupSubject_Name As String
	
	Private _IsActive As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupSubject_Id() As System.Guid
		Get
			Return Me._GroupSubject_Id
		End Get
		Set
			If ((Me._GroupSubject_Id = value)  _
						= false) Then
				Me._GroupSubject_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Name", DbType:="VarChar(255)")>  _
	Public Property GroupSubject_Name() As String
		Get
			Return Me._GroupSubject_Name
		End Get
		Set
			If (String.Equals(Me._GroupSubject_Name, value) = false) Then
				Me._GroupSubject_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me._IsActive = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvw_StudentHomeworkScore")>  _
Partial Public Class uvw_StudentHomeworkScore
	
	Private _MA_Id As System.Guid
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _ModuleDetail_Id As System.Guid
	
	Private _Reference_Id As System.Guid
	
	Private _Reference_Type As Byte
	
	Private _TestSet_Name As String
	
	Private _GroupSubject_Id As System.Guid
	
	Private _GroupSubject_Name As String
	
	Private _Module_Id As System.Guid
	
	Private _School_Code As String
	
	Private _TotalScore As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MA_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property MA_Id() As System.Guid
		Get
			Return Me._MA_Id
		End Get
		Set
			If ((Me._MA_Id = value)  _
						= false) Then
				Me._MA_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me._Calendar_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDetail_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ModuleDetail_Id() As System.Guid
		Get
			Return Me._ModuleDetail_Id
		End Get
		Set
			If ((Me._ModuleDetail_Id = value)  _
						= false) Then
				Me._ModuleDetail_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Reference_Id() As System.Guid
		Get
			Return Me._Reference_Id
		End Get
		Set
			If ((Me._Reference_Id = value)  _
						= false) Then
				Me._Reference_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference_Type", DbType:="TinyInt NOT NULL")>  _
	Public Property Reference_Type() As Byte
		Get
			Return Me._Reference_Type
		End Get
		Set
			If ((Me._Reference_Type = value)  _
						= false) Then
				Me._Reference_Type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSet_Name", DbType:="VarChar(255)")>  _
	Public Property TestSet_Name() As String
		Get
			Return Me._TestSet_Name
		End Get
		Set
			If (String.Equals(Me._TestSet_Name, value) = false) Then
				Me._TestSet_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupSubject_Id() As System.Guid
		Get
			Return Me._GroupSubject_Id
		End Get
		Set
			If ((Me._GroupSubject_Id = value)  _
						= false) Then
				Me._GroupSubject_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Name", DbType:="VarChar(255)")>  _
	Public Property GroupSubject_Name() As String
		Get
			Return Me._GroupSubject_Name
		End Get
		Set
			If (String.Equals(Me._GroupSubject_Name, value) = false) Then
				Me._GroupSubject_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Module_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Module_Id() As System.Guid
		Get
			Return Me._Module_Id
		End Get
		Set
			If ((Me._Module_Id = value)  _
						= false) Then
				Me._Module_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20)")>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me._School_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalScore", DbType:="Decimal(18,2)")>  _
	Public Property TotalScore() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalScore
		End Get
		Set
			If (Me._TotalScore.Equals(value) = false) Then
				Me._TotalScore = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvw_StudentDoAllQuiz")>  _
Partial Public Class uvw_StudentDoAllQuiz
	
	Private _Student_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Student_Code As String
	
	Private _Student_PrefixName As String
	
	Private _Student_FirstName As String
	
	Private _Student_LastName As String
	
	Private _Student_NickName As String
	
	Private _Student_CurrentClass As String
	
	Private _Student_CurrentRoom As String
	
	Private _Student_CurrentRoomId As System.Nullable(Of System.Guid)
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _GroupSubject_Id As System.Guid
	
	Private _GroupSubject_Name As String
	
	Private _Quiz_Id As System.Guid
	
	Private _TotalScore As System.Nullable(Of Decimal)
	
	Private _t360_SchoolCode As String
	
	Private _IsPracticeMode As System.Nullable(Of Boolean)
	
	Private _IsHomeWorkMode As System.Nullable(Of Boolean)
	
	Private _IsQuizMode As System.Nullable(Of Boolean)
	
	Private _IsHalfWay As Boolean
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Student_Id() As System.Guid
		Get
			Return Me._Student_Id
		End Get
		Set
			If ((Me._Student_Id = value)  _
						= false) Then
				Me._Student_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me._School_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Student_Code() As String
		Get
			Return Me._Student_Code
		End Get
		Set
			If (String.Equals(Me._Student_Code, value) = false) Then
				Me._Student_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_PrefixName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Student_PrefixName() As String
		Get
			Return Me._Student_PrefixName
		End Get
		Set
			If (String.Equals(Me._Student_PrefixName, value) = false) Then
				Me._Student_PrefixName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_FirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Student_FirstName() As String
		Get
			Return Me._Student_FirstName
		End Get
		Set
			If (String.Equals(Me._Student_FirstName, value) = false) Then
				Me._Student_FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Student_LastName() As String
		Get
			Return Me._Student_LastName
		End Get
		Set
			If (String.Equals(Me._Student_LastName, value) = false) Then
				Me._Student_LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_NickName", DbType:="VarChar(20)")>  _
	Public Property Student_NickName() As String
		Get
			Return Me._Student_NickName
		End Get
		Set
			If (String.Equals(Me._Student_NickName, value) = false) Then
				Me._Student_NickName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentClass", DbType:="VarChar(50)")>  _
	Public Property Student_CurrentClass() As String
		Get
			Return Me._Student_CurrentClass
		End Get
		Set
			If (String.Equals(Me._Student_CurrentClass, value) = false) Then
				Me._Student_CurrentClass = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentRoom", DbType:="VarChar(50)")>  _
	Public Property Student_CurrentRoom() As String
		Get
			Return Me._Student_CurrentRoom
		End Get
		Set
			If (String.Equals(Me._Student_CurrentRoom, value) = false) Then
				Me._Student_CurrentRoom = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentRoomId", DbType:="UniqueIdentifier")>  _
	Public Property Student_CurrentRoomId() As System.Nullable(Of System.Guid)
		Get
			Return Me._Student_CurrentRoomId
		End Get
		Set
			If (Me._Student_CurrentRoomId.Equals(value) = false) Then
				Me._Student_CurrentRoomId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me._Calendar_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupSubject_Id() As System.Guid
		Get
			Return Me._GroupSubject_Id
		End Get
		Set
			If ((Me._GroupSubject_Id = value)  _
						= false) Then
				Me._GroupSubject_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Name", DbType:="VarChar(255)")>  _
	Public Property GroupSubject_Name() As String
		Get
			Return Me._GroupSubject_Name
		End Get
		Set
			If (String.Equals(Me._GroupSubject_Name, value) = false) Then
				Me._GroupSubject_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quiz_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Quiz_Id() As System.Guid
		Get
			Return Me._Quiz_Id
		End Get
		Set
			If ((Me._Quiz_Id = value)  _
						= false) Then
				Me._Quiz_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalScore", DbType:="Decimal(18,2)")>  _
	Public Property TotalScore() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalScore
		End Get
		Set
			If (Me._TotalScore.Equals(value) = false) Then
				Me._TotalScore = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_t360_SchoolCode", DbType:="VarChar(20)")>  _
	Public Property t360_SchoolCode() As String
		Get
			Return Me._t360_SchoolCode
		End Get
		Set
			If (String.Equals(Me._t360_SchoolCode, value) = false) Then
				Me._t360_SchoolCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPracticeMode", DbType:="Bit")>  _
	Public Property IsPracticeMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPracticeMode
		End Get
		Set
			If (Me._IsPracticeMode.Equals(value) = false) Then
				Me._IsPracticeMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHomeWorkMode", DbType:="Bit")>  _
	Public Property IsHomeWorkMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsHomeWorkMode
		End Get
		Set
			If (Me._IsHomeWorkMode.Equals(value) = false) Then
				Me._IsHomeWorkMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsQuizMode", DbType:="Bit")>  _
	Public Property IsQuizMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsQuizMode
		End Get
		Set
			If (Me._IsQuizMode.Equals(value) = false) Then
				Me._IsQuizMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHalfWay", DbType:="Bit")>  _
	Public Property IsHalfWay() As Boolean
		Get
			Return Me._IsHalfWay
		End Get
		Set
			If ((Me._IsHalfWay = value)  _
						= false) Then
				Me._IsHalfWay = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvw_TeacherCreateTestset")>  _
Partial Public Class uvw_TeacherCreateTestset
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _t360_SchoolCode As String
	
	Private _IsPracticeMode As System.Nullable(Of Boolean)
	
	Private _IsHomeWorkMode As System.Nullable(Of Boolean)
	
	Private _IsQuizMode As System.Nullable(Of Boolean)
	
	Private _User_Id As System.Guid
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _Teacher_FirstName As String
	
	Private _Teacher_LastName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me._Calendar_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_t360_SchoolCode", DbType:="VarChar(20)")>  _
	Public Property t360_SchoolCode() As String
		Get
			Return Me._t360_SchoolCode
		End Get
		Set
			If (String.Equals(Me._t360_SchoolCode, value) = false) Then
				Me._t360_SchoolCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPracticeMode", DbType:="Bit")>  _
	Public Property IsPracticeMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPracticeMode
		End Get
		Set
			If (Me._IsPracticeMode.Equals(value) = false) Then
				Me._IsPracticeMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHomeWorkMode", DbType:="Bit")>  _
	Public Property IsHomeWorkMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsHomeWorkMode
		End Get
		Set
			If (Me._IsHomeWorkMode.Equals(value) = false) Then
				Me._IsHomeWorkMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsQuizMode", DbType:="Bit")>  _
	Public Property IsQuizMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsQuizMode
		End Get
		Set
			If (Me._IsQuizMode.Equals(value) = false) Then
				Me._IsQuizMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property User_Id() As System.Guid
		Get
			Return Me._User_Id
		End Get
		Set
			If ((Me._User_Id = value)  _
						= false) Then
				Me._User_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_FirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_FirstName() As String
		Get
			Return Me._Teacher_FirstName
		End Get
		Set
			If (String.Equals(Me._Teacher_FirstName, value) = false) Then
				Me._Teacher_FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_LastName() As String
		Get
			Return Me._Teacher_LastName
		End Get
		Set
			If (String.Equals(Me._Teacher_LastName, value) = false) Then
				Me._Teacher_LastName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvw_TeacherCreateHomework")>  _
Partial Public Class uvw_TeacherCreateHomework
	
	Private _Teacher_id As System.Guid
	
	Private _Module_Id As System.Nullable(Of System.Guid)
	
	Private _MA_Id As System.Nullable(Of System.Guid)
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _Teacher_FirstName As String
	
	Private _Teacher_LastName As String
	
	Private _ModuleDetail_Id As System.Nullable(Of System.Guid)
	
	Private _Reference_Id As System.Nullable(Of System.Guid)
	
	Private _Reference_Type As System.Nullable(Of Byte)
	
	Private _TestSet_Name As String
	
	Private _GroupSubject_Id As System.Nullable(Of System.Guid)
	
	Private _GroupSubject_Name As String
	
	Private _School_Code As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Teacher_id() As System.Guid
		Get
			Return Me._Teacher_id
		End Get
		Set
			If ((Me._Teacher_id = value)  _
						= false) Then
				Me._Teacher_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Module_Id", DbType:="UniqueIdentifier")>  _
	Public Property Module_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Module_Id
		End Get
		Set
			If (Me._Module_Id.Equals(value) = false) Then
				Me._Module_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MA_Id", DbType:="UniqueIdentifier")>  _
	Public Property MA_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._MA_Id
		End Get
		Set
			If (Me._MA_Id.Equals(value) = false) Then
				Me._MA_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me._Calendar_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_FirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_FirstName() As String
		Get
			Return Me._Teacher_FirstName
		End Get
		Set
			If (String.Equals(Me._Teacher_FirstName, value) = false) Then
				Me._Teacher_FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_LastName() As String
		Get
			Return Me._Teacher_LastName
		End Get
		Set
			If (String.Equals(Me._Teacher_LastName, value) = false) Then
				Me._Teacher_LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDetail_Id", DbType:="UniqueIdentifier")>  _
	Public Property ModuleDetail_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._ModuleDetail_Id
		End Get
		Set
			If (Me._ModuleDetail_Id.Equals(value) = false) Then
				Me._ModuleDetail_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference_Id", DbType:="UniqueIdentifier")>  _
	Public Property Reference_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Reference_Id
		End Get
		Set
			If (Me._Reference_Id.Equals(value) = false) Then
				Me._Reference_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference_Type", DbType:="TinyInt")>  _
	Public Property Reference_Type() As System.Nullable(Of Byte)
		Get
			Return Me._Reference_Type
		End Get
		Set
			If (Me._Reference_Type.Equals(value) = false) Then
				Me._Reference_Type = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSet_Name", DbType:="VarChar(255)")>  _
	Public Property TestSet_Name() As String
		Get
			Return Me._TestSet_Name
		End Get
		Set
			If (String.Equals(Me._TestSet_Name, value) = false) Then
				Me._TestSet_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Id", DbType:="UniqueIdentifier")>  _
	Public Property GroupSubject_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._GroupSubject_Id
		End Get
		Set
			If (Me._GroupSubject_Id.Equals(value) = false) Then
				Me._GroupSubject_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Name", DbType:="VarChar(255)")>  _
	Public Property GroupSubject_Name() As String
		Get
			Return Me._GroupSubject_Name
		End Get
		Set
			If (String.Equals(Me._GroupSubject_Name, value) = false) Then
				Me._GroupSubject_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20)")>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me._School_Code = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvw_TeacherCreateQuiz")>  _
Partial Public Class uvw_TeacherCreateQuiz
	
	Private _Teacher_id As System.Guid
	
	Private _Teacher_FirstName As String
	
	Private _Teacher_LastName As String
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _Quiz_Id As System.Guid
	
	Private _GroupSubject_Id As System.Guid
	
	Private _GroupSubject_Name As String
	
	Private _t360_SchoolCode As String
	
	Private _GroupSubject_ShortName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Teacher_id() As System.Guid
		Get
			Return Me._Teacher_id
		End Get
		Set
			If ((Me._Teacher_id = value)  _
						= false) Then
				Me._Teacher_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_FirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_FirstName() As String
		Get
			Return Me._Teacher_FirstName
		End Get
		Set
			If (String.Equals(Me._Teacher_FirstName, value) = false) Then
				Me._Teacher_FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_LastName() As String
		Get
			Return Me._Teacher_LastName
		End Get
		Set
			If (String.Equals(Me._Teacher_LastName, value) = false) Then
				Me._Teacher_LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me._Calendar_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quiz_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Quiz_Id() As System.Guid
		Get
			Return Me._Quiz_Id
		End Get
		Set
			If ((Me._Quiz_Id = value)  _
						= false) Then
				Me._Quiz_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupSubject_Id() As System.Guid
		Get
			Return Me._GroupSubject_Id
		End Get
		Set
			If ((Me._GroupSubject_Id = value)  _
						= false) Then
				Me._GroupSubject_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Name", DbType:="VarChar(255)")>  _
	Public Property GroupSubject_Name() As String
		Get
			Return Me._GroupSubject_Name
		End Get
		Set
			If (String.Equals(Me._GroupSubject_Name, value) = false) Then
				Me._GroupSubject_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_t360_SchoolCode", DbType:="VarChar(20)")>  _
	Public Property t360_SchoolCode() As String
		Get
			Return Me._t360_SchoolCode
		End Get
		Set
			If (String.Equals(Me._t360_SchoolCode, value) = false) Then
				Me._t360_SchoolCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_ShortName", DbType:="VarChar(255)")>  _
	Public Property GroupSubject_ShortName() As String
		Get
			Return Me._GroupSubject_ShortName
		End Get
		Set
			If (String.Equals(Me._GroupSubject_ShortName, value) = false) Then
				Me._GroupSubject_ShortName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.uvw_TeacherCreateSubject")>  _
Partial Public Class uvw_TeacherCreateSubject
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _GroupSubject_Id As System.Guid
	
	Private _GroupSubject_Name As String
	
	Private _t360_SchoolCode As String
	
	Private _IsPracticeMode As System.Nullable(Of Boolean)
	
	Private _IsHomeWorkMode As System.Nullable(Of Boolean)
	
	Private _IsQuizMode As System.Nullable(Of Boolean)
	
	Private _User_Id As System.Guid
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _Teacher_FirstName As String
	
	Private _Teacher_LastName As String
	
	Private _TestSet_Id As System.Guid
	
	Private _GroupSubject_ShortName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me._Calendar_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupSubject_Id() As System.Guid
		Get
			Return Me._GroupSubject_Id
		End Get
		Set
			If ((Me._GroupSubject_Id = value)  _
						= false) Then
				Me._GroupSubject_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Name", DbType:="VarChar(255)")>  _
	Public Property GroupSubject_Name() As String
		Get
			Return Me._GroupSubject_Name
		End Get
		Set
			If (String.Equals(Me._GroupSubject_Name, value) = false) Then
				Me._GroupSubject_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_t360_SchoolCode", DbType:="VarChar(20)")>  _
	Public Property t360_SchoolCode() As String
		Get
			Return Me._t360_SchoolCode
		End Get
		Set
			If (String.Equals(Me._t360_SchoolCode, value) = false) Then
				Me._t360_SchoolCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPracticeMode", DbType:="Bit")>  _
	Public Property IsPracticeMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPracticeMode
		End Get
		Set
			If (Me._IsPracticeMode.Equals(value) = false) Then
				Me._IsPracticeMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHomeWorkMode", DbType:="Bit")>  _
	Public Property IsHomeWorkMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsHomeWorkMode
		End Get
		Set
			If (Me._IsHomeWorkMode.Equals(value) = false) Then
				Me._IsHomeWorkMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsQuizMode", DbType:="Bit")>  _
	Public Property IsQuizMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsQuizMode
		End Get
		Set
			If (Me._IsQuizMode.Equals(value) = false) Then
				Me._IsQuizMode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property User_Id() As System.Guid
		Get
			Return Me._User_Id
		End Get
		Set
			If ((Me._User_Id = value)  _
						= false) Then
				Me._User_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me._StartTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_FirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_FirstName() As String
		Get
			Return Me._Teacher_FirstName
		End Get
		Set
			If (String.Equals(Me._Teacher_FirstName, value) = false) Then
				Me._Teacher_FirstName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Teacher_LastName() As String
		Get
			Return Me._Teacher_LastName
		End Get
		Set
			If (String.Equals(Me._Teacher_LastName, value) = false) Then
				Me._Teacher_LastName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSet_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property TestSet_Id() As System.Guid
		Get
			Return Me._TestSet_Id
		End Get
		Set
			If ((Me._TestSet_Id = value)  _
						= false) Then
				Me._TestSet_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_ShortName", DbType:="VarChar(255)")>  _
	Public Property GroupSubject_ShortName() As String
		Get
			Return Me._GroupSubject_ShortName
		End Get
		Set
			If (String.Equals(Me._GroupSubject_ShortName, value) = false) Then
				Me._GroupSubject_ShortName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMobileAccessPassword")>  _
Partial Public Class tblMobileAccessPassword
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Map_Id As System.Guid
	
	Private _SchoolCode As String
	
	Private _Map_Type As System.Nullable(Of Integer)
	
	Private _GeneratedPassword As String
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ClientId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMap_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnMap_IdChanged()
    End Sub
    Partial Private Sub OnSchoolCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchoolCodeChanged()
    End Sub
    Partial Private Sub OnMap_TypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMap_TypeChanged()
    End Sub
    Partial Private Sub OnGeneratedPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnGeneratedPasswordChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Map_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Map_Id() As System.Guid
		Get
			Return Me._Map_Id
		End Get
		Set
			If ((Me._Map_Id = value)  _
						= false) Then
				Me.OnMap_IdChanging(value)
				Me.SendPropertyChanging
				Me._Map_Id = value
				Me.SendPropertyChanged("Map_Id")
				Me.OnMap_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolCode", DbType:="VarChar(50)")>  _
	Public Property SchoolCode() As String
		Get
			Return Me._SchoolCode
		End Get
		Set
			If (String.Equals(Me._SchoolCode, value) = false) Then
				Me.OnSchoolCodeChanging(value)
				Me.SendPropertyChanging
				Me._SchoolCode = value
				Me.SendPropertyChanged("SchoolCode")
				Me.OnSchoolCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Map_Type", DbType:="Int")>  _
	Public Property Map_Type() As System.Nullable(Of Integer)
		Get
			Return Me._Map_Type
		End Get
		Set
			If (Me._Map_Type.Equals(value) = false) Then
				Me.OnMap_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Map_Type = value
				Me.SendPropertyChanged("Map_Type")
				Me.OnMap_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GeneratedPassword", DbType:="VarChar(6)")>  _
	Public Property GeneratedPassword() As String
		Get
			Return Me._GeneratedPassword
		End Get
		Set
			If (String.Equals(Me._GeneratedPassword, value) = false) Then
				Me.OnGeneratedPasswordChanging(value)
				Me.SendPropertyChanging
				Me._GeneratedPassword = value
				Me.SendPropertyChanged("GeneratedPassword")
				Me.OnGeneratedPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblMobileRegistration")>  _
Partial Public Class tblMobileRegistration
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Mr_Id As System.Guid
	
	Private _Map_Id As System.Nullable(Of System.Guid)
	
	Private _Device_Id As String
	
	Private _Register_Note As String
	
	Private _Register_Ip As String
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ClientId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMr_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnMr_IdChanged()
    End Sub
    Partial Private Sub OnMap_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnMap_IdChanged()
    End Sub
    Partial Private Sub OnDevice_IdChanging(value As String)
    End Sub
    Partial Private Sub OnDevice_IdChanged()
    End Sub
    Partial Private Sub OnRegister_NoteChanging(value As String)
    End Sub
    Partial Private Sub OnRegister_NoteChanged()
    End Sub
    Partial Private Sub OnRegister_IpChanging(value As String)
    End Sub
    Partial Private Sub OnRegister_IpChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mr_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Mr_Id() As System.Guid
		Get
			Return Me._Mr_Id
		End Get
		Set
			If ((Me._Mr_Id = value)  _
						= false) Then
				Me.OnMr_IdChanging(value)
				Me.SendPropertyChanging
				Me._Mr_Id = value
				Me.SendPropertyChanged("Mr_Id")
				Me.OnMr_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Map_Id", DbType:="UniqueIdentifier")>  _
	Public Property Map_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Map_Id
		End Get
		Set
			If (Me._Map_Id.Equals(value) = false) Then
				Me.OnMap_IdChanging(value)
				Me.SendPropertyChanging
				Me._Map_Id = value
				Me.SendPropertyChanged("Map_Id")
				Me.OnMap_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Device_Id", DbType:="VarChar(255)")>  _
	Public Property Device_Id() As String
		Get
			Return Me._Device_Id
		End Get
		Set
			If (String.Equals(Me._Device_Id, value) = false) Then
				Me.OnDevice_IdChanging(value)
				Me.SendPropertyChanging
				Me._Device_Id = value
				Me.SendPropertyChanged("Device_Id")
				Me.OnDevice_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Register_Note", DbType:="VarChar(255)")>  _
	Public Property Register_Note() As String
		Get
			Return Me._Register_Note
		End Get
		Set
			If (String.Equals(Me._Register_Note, value) = false) Then
				Me.OnRegister_NoteChanging(value)
				Me.SendPropertyChanging
				Me._Register_Note = value
				Me.SendPropertyChanged("Register_Note")
				Me.OnRegister_NoteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Register_Ip", DbType:="VarChar(255)")>  _
	Public Property Register_Ip() As String
		Get
			Return Me._Register_Ip
		End Get
		Set
			If (String.Equals(Me._Register_Ip, value) = false) Then
				Me.OnRegister_IpChanging(value)
				Me.SendPropertyChanging
				Me._Register_Ip = value
				Me.SendPropertyChanged("Register_Ip")
				Me.OnRegister_IpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblGroupSubject")>  _
Partial Public Class tblGroupSubject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GroupSubject_Id As System.Guid
	
	Private _GroupSubject_Name As String
	
	Private _GroupSubject_ShortName As String
	
	Private _IsActive As Boolean
	
	Private _tblSchoolSubjectClasses As EntitySet(Of tblSchoolSubjectClass)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGroupSubject_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupSubject_IdChanged()
    End Sub
    Partial Private Sub OnGroupSubject_NameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupSubject_NameChanged()
    End Sub
    Partial Private Sub OnGroupSubject_ShortNameChanging(value As String)
    End Sub
    Partial Private Sub OnGroupSubject_ShortNameChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblSchoolSubjectClasses = New EntitySet(Of tblSchoolSubjectClass)(AddressOf Me.attach_tblSchoolSubjectClasses, AddressOf Me.detach_tblSchoolSubjectClasses)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GroupSubject_Id() As System.Guid
		Get
			Return Me._GroupSubject_Id
		End Get
		Set
			If ((Me._GroupSubject_Id = value)  _
						= false) Then
				Me.OnGroupSubject_IdChanging(value)
				Me.SendPropertyChanging
				Me._GroupSubject_Id = value
				Me.SendPropertyChanged("GroupSubject_Id")
				Me.OnGroupSubject_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_Name", DbType:="VarChar(255)")>  _
	Public Property GroupSubject_Name() As String
		Get
			Return Me._GroupSubject_Name
		End Get
		Set
			If (String.Equals(Me._GroupSubject_Name, value) = false) Then
				Me.OnGroupSubject_NameChanging(value)
				Me.SendPropertyChanging
				Me._GroupSubject_Name = value
				Me.SendPropertyChanged("GroupSubject_Name")
				Me.OnGroupSubject_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubject_ShortName", DbType:="VarChar(255)")>  _
	Public Property GroupSubject_ShortName() As String
		Get
			Return Me._GroupSubject_ShortName
		End Get
		Set
			If (String.Equals(Me._GroupSubject_ShortName, value) = false) Then
				Me.OnGroupSubject_ShortNameChanging(value)
				Me.SendPropertyChanging
				Me._GroupSubject_ShortName = value
				Me.SendPropertyChanged("GroupSubject_ShortName")
				Me.OnGroupSubject_ShortNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblGroupSubject_tblSchoolSubjectClass", Storage:="_tblSchoolSubjectClasses", ThisKey:="GroupSubject_Id", OtherKey:="GroupSubjectId")>  _
	Public Property tblSchoolSubjectClasses() As EntitySet(Of tblSchoolSubjectClass)
		Get
			Return Me._tblSchoolSubjectClasses
		End Get
		Set
			Me._tblSchoolSubjectClasses.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblSchoolSubjectClasses(ByVal entity As tblSchoolSubjectClass)
		Me.SendPropertyChanging
		entity.tblGroupSubject = Me
	End Sub
	
	Private Sub detach_tblSchoolSubjectClasses(ByVal entity As tblSchoolSubjectClass)
		Me.SendPropertyChanging
		entity.tblGroupSubject = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSchool")>  _
Partial Public Class tblSchool
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SchoolId As Integer
	
	Private _SchoolName As String
	
	Private _ProvinceId As Integer
	
	Private _AmphurId As Integer
	
	Private _TambolId As Integer
	
	Private _AreaId As System.Nullable(Of Integer)
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As Date
	
	Private _ClientId As String
	
	Private _GUID As System.Guid
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchoolIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSchoolIdChanged()
    End Sub
    Partial Private Sub OnSchoolNameChanging(value As String)
    End Sub
    Partial Private Sub OnSchoolNameChanged()
    End Sub
    Partial Private Sub OnProvinceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvinceIdChanged()
    End Sub
    Partial Private Sub OnAmphurIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAmphurIdChanged()
    End Sub
    Partial Private Sub OnTambolIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTambolIdChanged()
    End Sub
    Partial Private Sub OnAreaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAreaIdChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SchoolId() As Integer
		Get
			Return Me._SchoolId
		End Get
		Set
			If ((Me._SchoolId = value)  _
						= false) Then
				Me.OnSchoolIdChanging(value)
				Me.SendPropertyChanging
				Me._SchoolId = value
				Me.SendPropertyChanged("SchoolId")
				Me.OnSchoolIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolName", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property SchoolName() As String
		Get
			Return Me._SchoolName
		End Get
		Set
			If (String.Equals(Me._SchoolName, value) = false) Then
				Me.OnSchoolNameChanging(value)
				Me.SendPropertyChanging
				Me._SchoolName = value
				Me.SendPropertyChanged("SchoolName")
				Me.OnSchoolNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvinceId", DbType:="Int NOT NULL")>  _
	Public Property ProvinceId() As Integer
		Get
			Return Me._ProvinceId
		End Get
		Set
			If ((Me._ProvinceId = value)  _
						= false) Then
				Me.OnProvinceIdChanging(value)
				Me.SendPropertyChanging
				Me._ProvinceId = value
				Me.SendPropertyChanged("ProvinceId")
				Me.OnProvinceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmphurId", DbType:="Int NOT NULL")>  _
	Public Property AmphurId() As Integer
		Get
			Return Me._AmphurId
		End Get
		Set
			If ((Me._AmphurId = value)  _
						= false) Then
				Me.OnAmphurIdChanging(value)
				Me.SendPropertyChanging
				Me._AmphurId = value
				Me.SendPropertyChanged("AmphurId")
				Me.OnAmphurIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TambolId", DbType:="Int NOT NULL")>  _
	Public Property TambolId() As Integer
		Get
			Return Me._TambolId
		End Get
		Set
			If ((Me._TambolId = value)  _
						= false) Then
				Me.OnTambolIdChanging(value)
				Me.SendPropertyChanging
				Me._TambolId = value
				Me.SendPropertyChanged("TambolId")
				Me.OnTambolIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AreaId", DbType:="Int")>  _
	Public Property AreaId() As System.Nullable(Of Integer)
		Get
			Return Me._AreaId
		End Get
		Set
			If (Me._AreaId.Equals(value) = false) Then
				Me.OnAreaIdChanging(value)
				Me.SendPropertyChanging
				Me._AreaId = value
				Me.SendPropertyChanged("AreaId")
				Me.OnAreaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GUID() As System.Guid
		Get
			Return Me._GUID
		End Get
		Set
			If ((Me._GUID = value)  _
						= false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmphur")>  _
Partial Public Class tblAmphur
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AmphurId As Integer
	
	Private _ProvinceId As Integer
	
	Private _AmphurName As String
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As Date
	
	Private _ClientId As String
	
	Private _GUID As System.Guid
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAmphurIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAmphurIdChanged()
    End Sub
    Partial Private Sub OnProvinceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvinceIdChanged()
    End Sub
    Partial Private Sub OnAmphurNameChanging(value As String)
    End Sub
    Partial Private Sub OnAmphurNameChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmphurId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property AmphurId() As Integer
		Get
			Return Me._AmphurId
		End Get
		Set
			If ((Me._AmphurId = value)  _
						= false) Then
				Me.OnAmphurIdChanging(value)
				Me.SendPropertyChanging
				Me._AmphurId = value
				Me.SendPropertyChanged("AmphurId")
				Me.OnAmphurIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvinceId", DbType:="Int NOT NULL")>  _
	Public Property ProvinceId() As Integer
		Get
			Return Me._ProvinceId
		End Get
		Set
			If ((Me._ProvinceId = value)  _
						= false) Then
				Me.OnProvinceIdChanging(value)
				Me.SendPropertyChanging
				Me._ProvinceId = value
				Me.SendPropertyChanged("ProvinceId")
				Me.OnProvinceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmphurName", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property AmphurName() As String
		Get
			Return Me._AmphurName
		End Get
		Set
			If (String.Equals(Me._AmphurName, value) = false) Then
				Me.OnAmphurNameChanging(value)
				Me.SendPropertyChanging
				Me._AmphurName = value
				Me.SendPropertyChanged("AmphurName")
				Me.OnAmphurNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GUID() As System.Guid
		Get
			Return Me._GUID
		End Get
		Set
			If ((Me._GUID = value)  _
						= false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblProvince")>  _
Partial Public Class tblProvince
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProvinceId As Integer
	
	Private _ProvinceName As String
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As Date
	
	Private _ClientId As String
	
	Private _GUID As System.Guid
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProvinceIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvinceIdChanged()
    End Sub
    Partial Private Sub OnProvinceNameChanging(value As String)
    End Sub
    Partial Private Sub OnProvinceNameChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvinceId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProvinceId() As Integer
		Get
			Return Me._ProvinceId
		End Get
		Set
			If ((Me._ProvinceId = value)  _
						= false) Then
				Me.OnProvinceIdChanging(value)
				Me.SendPropertyChanging
				Me._ProvinceId = value
				Me.SendPropertyChanged("ProvinceId")
				Me.OnProvinceIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvinceName", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ProvinceName() As String
		Get
			Return Me._ProvinceName
		End Get
		Set
			If (String.Equals(Me._ProvinceName, value) = false) Then
				Me.OnProvinceNameChanging(value)
				Me.SendPropertyChanging
				Me._ProvinceName = value
				Me.SendPropertyChanged("ProvinceName")
				Me.OnProvinceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GUID() As System.Guid
		Get
			Return Me._GUID
		End Get
		Set
			If ((Me._GUID = value)  _
						= false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTambol")>  _
Partial Public Class tblTambol
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TambolId As Integer
	
	Private _AmphurId As Integer
	
	Private _TambolName As String
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As Date
	
	Private _ClientId As String
	
	Private _GUID As System.Guid
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTambolIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnTambolIdChanged()
    End Sub
    Partial Private Sub OnAmphurIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnAmphurIdChanged()
    End Sub
    Partial Private Sub OnTambolNameChanging(value As String)
    End Sub
    Partial Private Sub OnTambolNameChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TambolId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TambolId() As Integer
		Get
			Return Me._TambolId
		End Get
		Set
			If ((Me._TambolId = value)  _
						= false) Then
				Me.OnTambolIdChanging(value)
				Me.SendPropertyChanging
				Me._TambolId = value
				Me.SendPropertyChanged("TambolId")
				Me.OnTambolIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmphurId", DbType:="Int NOT NULL")>  _
	Public Property AmphurId() As Integer
		Get
			Return Me._AmphurId
		End Get
		Set
			If ((Me._AmphurId = value)  _
						= false) Then
				Me.OnAmphurIdChanging(value)
				Me.SendPropertyChanging
				Me._AmphurId = value
				Me.SendPropertyChanged("AmphurId")
				Me.OnAmphurIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TambolName", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property TambolName() As String
		Get
			Return Me._TambolName
		End Get
		Set
			If (String.Equals(Me._TambolName, value) = false) Then
				Me.OnTambolNameChanging(value)
				Me.SendPropertyChanging
				Me._TambolName = value
				Me.SendPropertyChanged("TambolName")
				Me.OnTambolNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(32) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GUID() As System.Guid
		Get
			Return Me._GUID
		End Get
		Set
			If ((Me._GUID = value)  _
						= false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblModuleAssignment")>  _
Partial Public Class tblModuleAssignment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MA_Id As System.Guid
	
	Private _Module_Id As System.Guid
	
	Private _Start_Date As System.Nullable(Of Date)
	
	Private _End_Date As System.Nullable(Of Date)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _AssignTo As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMA_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnMA_IdChanged()
    End Sub
    Partial Private Sub OnModule_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnModule_IdChanged()
    End Sub
    Partial Private Sub OnStart_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStart_DateChanged()
    End Sub
    Partial Private Sub OnEnd_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEnd_DateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnCalendar_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCalendar_IdChanged()
    End Sub
    Partial Private Sub OnAssignToChanging(value As String)
    End Sub
    Partial Private Sub OnAssignToChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MA_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property MA_Id() As System.Guid
		Get
			Return Me._MA_Id
		End Get
		Set
			If ((Me._MA_Id = value)  _
						= false) Then
				Me.OnMA_IdChanging(value)
				Me.SendPropertyChanging
				Me._MA_Id = value
				Me.SendPropertyChanged("MA_Id")
				Me.OnMA_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Module_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Module_Id() As System.Guid
		Get
			Return Me._Module_Id
		End Get
		Set
			If ((Me._Module_Id = value)  _
						= false) Then
				Me.OnModule_IdChanging(value)
				Me.SendPropertyChanging
				Me._Module_Id = value
				Me.SendPropertyChanged("Module_Id")
				Me.OnModule_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Start_Date", DbType:="SmallDateTime")>  _
	Public Property Start_Date() As System.Nullable(Of Date)
		Get
			Return Me._Start_Date
		End Get
		Set
			If (Me._Start_Date.Equals(value) = false) Then
				Me.OnStart_DateChanging(value)
				Me.SendPropertyChanging
				Me._Start_Date = value
				Me.SendPropertyChanged("Start_Date")
				Me.OnStart_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_End_Date", DbType:="SmallDateTime")>  _
	Public Property End_Date() As System.Nullable(Of Date)
		Get
			Return Me._End_Date
		End Get
		Set
			If (Me._End_Date.Equals(value) = false) Then
				Me.OnEnd_DateChanging(value)
				Me.SendPropertyChanging
				Me._End_Date = value
				Me.SendPropertyChanged("End_Date")
				Me.OnEnd_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me.OnCalendar_IdChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Id = value
				Me.SendPropertyChanged("Calendar_Id")
				Me.OnCalendar_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssignTo", DbType:="VarChar(2500)")>  _
	Public Property AssignTo() As String
		Get
			Return Me._AssignTo
		End Get
		Set
			If (String.Equals(Me._AssignTo, value) = false) Then
				Me.OnAssignToChanging(value)
				Me.SendPropertyChanging
				Me._AssignTo = value
				Me.SendPropertyChanged("AssignTo")
				Me.OnAssignToChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblQuiz")>  _
Partial Public Class tblQuiz
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Quiz_Id As System.Guid
	
	Private _TestSet_Id As System.Guid
	
	Private _t360_ClassName As String
	
	Private _t360_RoomName As String
	
	Private _StudentAmount As Byte
	
	Private _StartTime As System.Nullable(Of Date)
	
	Private _EndTime As System.Nullable(Of Date)
	
	Private _NeedTimer As Boolean
	
	Private _IsPerQuestionMode As Boolean
	
	Private _TimePerQuestion As Short
	
	Private _TimePerTotal As Byte
	
	Private _NeedCorrectAnswer As Boolean
	
	Private _IsTimeShowCorrectAnswer As Boolean
	
	Private _TimePerCorrectAnswer As Byte
	
	Private _IsShowCorrectAfterComplete As Boolean
	
	Private _IsRushMode As Boolean
	
	Private _NeedRandomQuestion As Boolean
	
	Private _NeedRandomAnswer As Boolean
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As Date
	
	Private _User_IdOld As System.Nullable(Of Integer)
	
	Private _t360_SchoolCode As String
	
	Private _t360_TeacherId As System.Nullable(Of Integer)
	
	Private _IsQuizMode As System.Nullable(Of Boolean)
	
	Private _IsPracticeMode As System.Nullable(Of Boolean)
	
	Private _IsHomeWorkMode As System.Nullable(Of Boolean)
	
	Private _NeedShowScore As System.Nullable(Of Boolean)
	
	Private _NeedShowScoreAfterComplete As System.Nullable(Of Boolean)
	
	Private _IsDifferentQuestion As System.Nullable(Of Boolean)
	
	Private _IsDifferentAnswer As System.Nullable(Of Boolean)
	
	Private _Selfpace As System.Nullable(Of Boolean)
	
	Private _IsUseTablet As System.Nullable(Of Boolean)
	
	Private _TabletLab_Id As System.Nullable(Of System.Guid)
	
	Private _User_Id As System.Guid
	
	Private _EnabledTools As System.Nullable(Of Byte)
	
	Private _FullScore As System.Nullable(Of Decimal)
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _IsHalfWay As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnQuiz_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnQuiz_IdChanged()
    End Sub
    Partial Private Sub OnTestSet_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTestSet_IdChanged()
    End Sub
    Partial Private Sub Ont360_ClassNameChanging(value As String)
    End Sub
    Partial Private Sub Ont360_ClassNameChanged()
    End Sub
    Partial Private Sub Ont360_RoomNameChanging(value As String)
    End Sub
    Partial Private Sub Ont360_RoomNameChanged()
    End Sub
    Partial Private Sub OnStudentAmountChanging(value As Byte)
    End Sub
    Partial Private Sub OnStudentAmountChanged()
    End Sub
    Partial Private Sub OnStartTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartTimeChanged()
    End Sub
    Partial Private Sub OnEndTimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndTimeChanged()
    End Sub
    Partial Private Sub OnNeedTimerChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNeedTimerChanged()
    End Sub
    Partial Private Sub OnIsPerQuestionModeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsPerQuestionModeChanged()
    End Sub
    Partial Private Sub OnTimePerQuestionChanging(value As Short)
    End Sub
    Partial Private Sub OnTimePerQuestionChanged()
    End Sub
    Partial Private Sub OnTimePerTotalChanging(value As Byte)
    End Sub
    Partial Private Sub OnTimePerTotalChanged()
    End Sub
    Partial Private Sub OnNeedCorrectAnswerChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNeedCorrectAnswerChanged()
    End Sub
    Partial Private Sub OnIsTimeShowCorrectAnswerChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsTimeShowCorrectAnswerChanged()
    End Sub
    Partial Private Sub OnTimePerCorrectAnswerChanging(value As Byte)
    End Sub
    Partial Private Sub OnTimePerCorrectAnswerChanged()
    End Sub
    Partial Private Sub OnIsShowCorrectAfterCompleteChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsShowCorrectAfterCompleteChanged()
    End Sub
    Partial Private Sub OnIsRushModeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsRushModeChanged()
    End Sub
    Partial Private Sub OnNeedRandomQuestionChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNeedRandomQuestionChanged()
    End Sub
    Partial Private Sub OnNeedRandomAnswerChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNeedRandomAnswerChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnUser_IdOldChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnUser_IdOldChanged()
    End Sub
    Partial Private Sub Ont360_SchoolCodeChanging(value As String)
    End Sub
    Partial Private Sub Ont360_SchoolCodeChanged()
    End Sub
    Partial Private Sub Ont360_TeacherIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Ont360_TeacherIdChanged()
    End Sub
    Partial Private Sub OnIsQuizModeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsQuizModeChanged()
    End Sub
    Partial Private Sub OnIsPracticeModeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsPracticeModeChanged()
    End Sub
    Partial Private Sub OnIsHomeWorkModeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsHomeWorkModeChanged()
    End Sub
    Partial Private Sub OnNeedShowScoreChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNeedShowScoreChanged()
    End Sub
    Partial Private Sub OnNeedShowScoreAfterCompleteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNeedShowScoreAfterCompleteChanged()
    End Sub
    Partial Private Sub OnIsDifferentQuestionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDifferentQuestionChanged()
    End Sub
    Partial Private Sub OnIsDifferentAnswerChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDifferentAnswerChanged()
    End Sub
    Partial Private Sub OnSelfpaceChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSelfpaceChanged()
    End Sub
    Partial Private Sub OnIsUseTabletChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsUseTabletChanged()
    End Sub
    Partial Private Sub OnTabletLab_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnTabletLab_IdChanged()
    End Sub
    Partial Private Sub OnUser_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUser_IdChanged()
    End Sub
    Partial Private Sub OnEnabledToolsChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnEnabledToolsChanged()
    End Sub
    Partial Private Sub OnFullScoreChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFullScoreChanged()
    End Sub
    Partial Private Sub OnCalendar_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCalendar_IdChanged()
    End Sub
    Partial Private Sub OnIsHalfWayChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsHalfWayChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quiz_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Quiz_Id() As System.Guid
		Get
			Return Me._Quiz_Id
		End Get
		Set
			If ((Me._Quiz_Id = value)  _
						= false) Then
				Me.OnQuiz_IdChanging(value)
				Me.SendPropertyChanging
				Me._Quiz_Id = value
				Me.SendPropertyChanged("Quiz_Id")
				Me.OnQuiz_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestSet_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property TestSet_Id() As System.Guid
		Get
			Return Me._TestSet_Id
		End Get
		Set
			If ((Me._TestSet_Id = value)  _
						= false) Then
				Me.OnTestSet_IdChanging(value)
				Me.SendPropertyChanging
				Me._TestSet_Id = value
				Me.SendPropertyChanged("TestSet_Id")
				Me.OnTestSet_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_t360_ClassName", DbType:="VarChar(50)")>  _
	Public Property t360_ClassName() As String
		Get
			Return Me._t360_ClassName
		End Get
		Set
			If (String.Equals(Me._t360_ClassName, value) = false) Then
				Me.Ont360_ClassNameChanging(value)
				Me.SendPropertyChanging
				Me._t360_ClassName = value
				Me.SendPropertyChanged("t360_ClassName")
				Me.Ont360_ClassNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_t360_RoomName", DbType:="VarChar(50)")>  _
	Public Property t360_RoomName() As String
		Get
			Return Me._t360_RoomName
		End Get
		Set
			If (String.Equals(Me._t360_RoomName, value) = false) Then
				Me.Ont360_RoomNameChanging(value)
				Me.SendPropertyChanging
				Me._t360_RoomName = value
				Me.SendPropertyChanged("t360_RoomName")
				Me.Ont360_RoomNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentAmount", DbType:="TinyInt NOT NULL")>  _
	Public Property StudentAmount() As Byte
		Get
			Return Me._StudentAmount
		End Get
		Set
			If ((Me._StudentAmount = value)  _
						= false) Then
				Me.OnStudentAmountChanging(value)
				Me.SendPropertyChanging
				Me._StudentAmount = value
				Me.SendPropertyChanged("StudentAmount")
				Me.OnStudentAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartTime", DbType:="DateTime")>  _
	Public Property StartTime() As System.Nullable(Of Date)
		Get
			Return Me._StartTime
		End Get
		Set
			If (Me._StartTime.Equals(value) = false) Then
				Me.OnStartTimeChanging(value)
				Me.SendPropertyChanging
				Me._StartTime = value
				Me.SendPropertyChanged("StartTime")
				Me.OnStartTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndTime", DbType:="DateTime")>  _
	Public Property EndTime() As System.Nullable(Of Date)
		Get
			Return Me._EndTime
		End Get
		Set
			If (Me._EndTime.Equals(value) = false) Then
				Me.OnEndTimeChanging(value)
				Me.SendPropertyChanging
				Me._EndTime = value
				Me.SendPropertyChanged("EndTime")
				Me.OnEndTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NeedTimer", DbType:="Bit NOT NULL")>  _
	Public Property NeedTimer() As Boolean
		Get
			Return Me._NeedTimer
		End Get
		Set
			If ((Me._NeedTimer = value)  _
						= false) Then
				Me.OnNeedTimerChanging(value)
				Me.SendPropertyChanging
				Me._NeedTimer = value
				Me.SendPropertyChanged("NeedTimer")
				Me.OnNeedTimerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPerQuestionMode", DbType:="Bit NOT NULL")>  _
	Public Property IsPerQuestionMode() As Boolean
		Get
			Return Me._IsPerQuestionMode
		End Get
		Set
			If ((Me._IsPerQuestionMode = value)  _
						= false) Then
				Me.OnIsPerQuestionModeChanging(value)
				Me.SendPropertyChanging
				Me._IsPerQuestionMode = value
				Me.SendPropertyChanged("IsPerQuestionMode")
				Me.OnIsPerQuestionModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimePerQuestion", DbType:="SmallInt NOT NULL")>  _
	Public Property TimePerQuestion() As Short
		Get
			Return Me._TimePerQuestion
		End Get
		Set
			If ((Me._TimePerQuestion = value)  _
						= false) Then
				Me.OnTimePerQuestionChanging(value)
				Me.SendPropertyChanging
				Me._TimePerQuestion = value
				Me.SendPropertyChanged("TimePerQuestion")
				Me.OnTimePerQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimePerTotal", DbType:="TinyInt NOT NULL")>  _
	Public Property TimePerTotal() As Byte
		Get
			Return Me._TimePerTotal
		End Get
		Set
			If ((Me._TimePerTotal = value)  _
						= false) Then
				Me.OnTimePerTotalChanging(value)
				Me.SendPropertyChanging
				Me._TimePerTotal = value
				Me.SendPropertyChanged("TimePerTotal")
				Me.OnTimePerTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NeedCorrectAnswer", DbType:="Bit NOT NULL")>  _
	Public Property NeedCorrectAnswer() As Boolean
		Get
			Return Me._NeedCorrectAnswer
		End Get
		Set
			If ((Me._NeedCorrectAnswer = value)  _
						= false) Then
				Me.OnNeedCorrectAnswerChanging(value)
				Me.SendPropertyChanging
				Me._NeedCorrectAnswer = value
				Me.SendPropertyChanged("NeedCorrectAnswer")
				Me.OnNeedCorrectAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsTimeShowCorrectAnswer", DbType:="Bit NOT NULL")>  _
	Public Property IsTimeShowCorrectAnswer() As Boolean
		Get
			Return Me._IsTimeShowCorrectAnswer
		End Get
		Set
			If ((Me._IsTimeShowCorrectAnswer = value)  _
						= false) Then
				Me.OnIsTimeShowCorrectAnswerChanging(value)
				Me.SendPropertyChanging
				Me._IsTimeShowCorrectAnswer = value
				Me.SendPropertyChanged("IsTimeShowCorrectAnswer")
				Me.OnIsTimeShowCorrectAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimePerCorrectAnswer", DbType:="TinyInt NOT NULL")>  _
	Public Property TimePerCorrectAnswer() As Byte
		Get
			Return Me._TimePerCorrectAnswer
		End Get
		Set
			If ((Me._TimePerCorrectAnswer = value)  _
						= false) Then
				Me.OnTimePerCorrectAnswerChanging(value)
				Me.SendPropertyChanging
				Me._TimePerCorrectAnswer = value
				Me.SendPropertyChanged("TimePerCorrectAnswer")
				Me.OnTimePerCorrectAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsShowCorrectAfterComplete", DbType:="Bit NOT NULL")>  _
	Public Property IsShowCorrectAfterComplete() As Boolean
		Get
			Return Me._IsShowCorrectAfterComplete
		End Get
		Set
			If ((Me._IsShowCorrectAfterComplete = value)  _
						= false) Then
				Me.OnIsShowCorrectAfterCompleteChanging(value)
				Me.SendPropertyChanging
				Me._IsShowCorrectAfterComplete = value
				Me.SendPropertyChanged("IsShowCorrectAfterComplete")
				Me.OnIsShowCorrectAfterCompleteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRushMode", DbType:="Bit NOT NULL")>  _
	Public Property IsRushMode() As Boolean
		Get
			Return Me._IsRushMode
		End Get
		Set
			If ((Me._IsRushMode = value)  _
						= false) Then
				Me.OnIsRushModeChanging(value)
				Me.SendPropertyChanging
				Me._IsRushMode = value
				Me.SendPropertyChanged("IsRushMode")
				Me.OnIsRushModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NeedRandomQuestion", DbType:="Bit NOT NULL")>  _
	Public Property NeedRandomQuestion() As Boolean
		Get
			Return Me._NeedRandomQuestion
		End Get
		Set
			If ((Me._NeedRandomQuestion = value)  _
						= false) Then
				Me.OnNeedRandomQuestionChanging(value)
				Me.SendPropertyChanging
				Me._NeedRandomQuestion = value
				Me.SendPropertyChanged("NeedRandomQuestion")
				Me.OnNeedRandomQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NeedRandomAnswer", DbType:="Bit NOT NULL")>  _
	Public Property NeedRandomAnswer() As Boolean
		Get
			Return Me._NeedRandomAnswer
		End Get
		Set
			If ((Me._NeedRandomAnswer = value)  _
						= false) Then
				Me.OnNeedRandomAnswerChanging(value)
				Me.SendPropertyChanging
				Me._NeedRandomAnswer = value
				Me.SendPropertyChanged("NeedRandomAnswer")
				Me.OnNeedRandomAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_IdOld", DbType:="Int")>  _
	Public Property User_IdOld() As System.Nullable(Of Integer)
		Get
			Return Me._User_IdOld
		End Get
		Set
			If (Me._User_IdOld.Equals(value) = false) Then
				Me.OnUser_IdOldChanging(value)
				Me.SendPropertyChanging
				Me._User_IdOld = value
				Me.SendPropertyChanged("User_IdOld")
				Me.OnUser_IdOldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_t360_SchoolCode", DbType:="VarChar(20)")>  _
	Public Property t360_SchoolCode() As String
		Get
			Return Me._t360_SchoolCode
		End Get
		Set
			If (String.Equals(Me._t360_SchoolCode, value) = false) Then
				Me.Ont360_SchoolCodeChanging(value)
				Me.SendPropertyChanging
				Me._t360_SchoolCode = value
				Me.SendPropertyChanged("t360_SchoolCode")
				Me.Ont360_SchoolCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_t360_TeacherId", DbType:="Int")>  _
	Public Property t360_TeacherId() As System.Nullable(Of Integer)
		Get
			Return Me._t360_TeacherId
		End Get
		Set
			If (Me._t360_TeacherId.Equals(value) = false) Then
				Me.Ont360_TeacherIdChanging(value)
				Me.SendPropertyChanging
				Me._t360_TeacherId = value
				Me.SendPropertyChanged("t360_TeacherId")
				Me.Ont360_TeacherIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsQuizMode", DbType:="Bit")>  _
	Public Property IsQuizMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsQuizMode
		End Get
		Set
			If (Me._IsQuizMode.Equals(value) = false) Then
				Me.OnIsQuizModeChanging(value)
				Me.SendPropertyChanging
				Me._IsQuizMode = value
				Me.SendPropertyChanged("IsQuizMode")
				Me.OnIsQuizModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPracticeMode", DbType:="Bit")>  _
	Public Property IsPracticeMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPracticeMode
		End Get
		Set
			If (Me._IsPracticeMode.Equals(value) = false) Then
				Me.OnIsPracticeModeChanging(value)
				Me.SendPropertyChanging
				Me._IsPracticeMode = value
				Me.SendPropertyChanged("IsPracticeMode")
				Me.OnIsPracticeModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHomeWorkMode", DbType:="Bit")>  _
	Public Property IsHomeWorkMode() As System.Nullable(Of Boolean)
		Get
			Return Me._IsHomeWorkMode
		End Get
		Set
			If (Me._IsHomeWorkMode.Equals(value) = false) Then
				Me.OnIsHomeWorkModeChanging(value)
				Me.SendPropertyChanging
				Me._IsHomeWorkMode = value
				Me.SendPropertyChanged("IsHomeWorkMode")
				Me.OnIsHomeWorkModeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NeedShowScore", DbType:="Bit")>  _
	Public Property NeedShowScore() As System.Nullable(Of Boolean)
		Get
			Return Me._NeedShowScore
		End Get
		Set
			If (Me._NeedShowScore.Equals(value) = false) Then
				Me.OnNeedShowScoreChanging(value)
				Me.SendPropertyChanging
				Me._NeedShowScore = value
				Me.SendPropertyChanged("NeedShowScore")
				Me.OnNeedShowScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NeedShowScoreAfterComplete", DbType:="Bit")>  _
	Public Property NeedShowScoreAfterComplete() As System.Nullable(Of Boolean)
		Get
			Return Me._NeedShowScoreAfterComplete
		End Get
		Set
			If (Me._NeedShowScoreAfterComplete.Equals(value) = false) Then
				Me.OnNeedShowScoreAfterCompleteChanging(value)
				Me.SendPropertyChanging
				Me._NeedShowScoreAfterComplete = value
				Me.SendPropertyChanged("NeedShowScoreAfterComplete")
				Me.OnNeedShowScoreAfterCompleteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDifferentQuestion", DbType:="Bit")>  _
	Public Property IsDifferentQuestion() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDifferentQuestion
		End Get
		Set
			If (Me._IsDifferentQuestion.Equals(value) = false) Then
				Me.OnIsDifferentQuestionChanging(value)
				Me.SendPropertyChanging
				Me._IsDifferentQuestion = value
				Me.SendPropertyChanged("IsDifferentQuestion")
				Me.OnIsDifferentQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDifferentAnswer", DbType:="Bit")>  _
	Public Property IsDifferentAnswer() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDifferentAnswer
		End Get
		Set
			If (Me._IsDifferentAnswer.Equals(value) = false) Then
				Me.OnIsDifferentAnswerChanging(value)
				Me.SendPropertyChanging
				Me._IsDifferentAnswer = value
				Me.SendPropertyChanged("IsDifferentAnswer")
				Me.OnIsDifferentAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Selfpace", DbType:="Bit")>  _
	Public Property Selfpace() As System.Nullable(Of Boolean)
		Get
			Return Me._Selfpace
		End Get
		Set
			If (Me._Selfpace.Equals(value) = false) Then
				Me.OnSelfpaceChanging(value)
				Me.SendPropertyChanging
				Me._Selfpace = value
				Me.SendPropertyChanged("Selfpace")
				Me.OnSelfpaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsUseTablet", DbType:="Bit")>  _
	Public Property IsUseTablet() As System.Nullable(Of Boolean)
		Get
			Return Me._IsUseTablet
		End Get
		Set
			If (Me._IsUseTablet.Equals(value) = false) Then
				Me.OnIsUseTabletChanging(value)
				Me.SendPropertyChanging
				Me._IsUseTablet = value
				Me.SendPropertyChanged("IsUseTablet")
				Me.OnIsUseTabletChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabletLab_Id", DbType:="UniqueIdentifier")>  _
	Public Property TabletLab_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._TabletLab_Id
		End Get
		Set
			If (Me._TabletLab_Id.Equals(value) = false) Then
				Me.OnTabletLab_IdChanging(value)
				Me.SendPropertyChanging
				Me._TabletLab_Id = value
				Me.SendPropertyChanged("TabletLab_Id")
				Me.OnTabletLab_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property User_Id() As System.Guid
		Get
			Return Me._User_Id
		End Get
		Set
			If ((Me._User_Id = value)  _
						= false) Then
				Me.OnUser_IdChanging(value)
				Me.SendPropertyChanging
				Me._User_Id = value
				Me.SendPropertyChanged("User_Id")
				Me.OnUser_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnabledTools", DbType:="TinyInt")>  _
	Public Property EnabledTools() As System.Nullable(Of Byte)
		Get
			Return Me._EnabledTools
		End Get
		Set
			If (Me._EnabledTools.Equals(value) = false) Then
				Me.OnEnabledToolsChanging(value)
				Me.SendPropertyChanging
				Me._EnabledTools = value
				Me.SendPropertyChanged("EnabledTools")
				Me.OnEnabledToolsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullScore", DbType:="Decimal(18,2)")>  _
	Public Property FullScore() As System.Nullable(Of Decimal)
		Get
			Return Me._FullScore
		End Get
		Set
			If (Me._FullScore.Equals(value) = false) Then
				Me.OnFullScoreChanging(value)
				Me.SendPropertyChanging
				Me._FullScore = value
				Me.SendPropertyChanged("FullScore")
				Me.OnFullScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me.OnCalendar_IdChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Id = value
				Me.SendPropertyChanged("Calendar_Id")
				Me.OnCalendar_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsHalfWay", DbType:="Bit")>  _
	Public Property IsHalfWay() As System.Nullable(Of Boolean)
		Get
			Return Me._IsHalfWay
		End Get
		Set
			If (Me._IsHalfWay.Equals(value) = false) Then
				Me.OnIsHalfWayChanging(value)
				Me.SendPropertyChanging
				Me._IsHalfWay = value
				Me.SendPropertyChanged("IsHalfWay")
				Me.OnIsHalfWayChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblUplevelConfirm")>  _
Partial Public Class t360_tblUplevelConfirm
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Ulv_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Room_Id As System.Guid
	
	Private _Calendar_Year As String
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUlv_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUlv_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnRoom_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoom_IdChanged()
    End Sub
    Partial Private Sub OnCalendar_YearChanging(value As String)
    End Sub
    Partial Private Sub OnCalendar_YearChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ulv_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Ulv_Id() As System.Guid
		Get
			Return Me._Ulv_Id
		End Get
		Set
			If ((Me._Ulv_Id = value)  _
						= false) Then
				Me.OnUlv_IdChanging(value)
				Me.SendPropertyChanging
				Me._Ulv_Id = value
				Me.SendPropertyChanged("Ulv_Id")
				Me.OnUlv_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Room_Id() As System.Guid
		Get
			Return Me._Room_Id
		End Get
		Set
			If ((Me._Room_Id = value)  _
						= false) Then
				Me.OnRoom_IdChanging(value)
				Me.SendPropertyChanging
				Me._Room_Id = value
				Me.SendPropertyChanged("Room_Id")
				Me.OnRoom_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Year", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property Calendar_Year() As String
		Get
			Return Me._Calendar_Year
		End Get
		Set
			If (String.Equals(Me._Calendar_Year, value) = false) Then
				Me.OnCalendar_YearChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Year = value
				Me.SendPropertyChanged("Calendar_Year")
				Me.OnCalendar_YearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblSetTypeRunStudentNumber")>  _
Partial Public Class t360_tblSetTypeRunStudentNumber
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Syr_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Syr_Type As Byte
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _IsActive As Boolean
	
	Private _ClientId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSyr_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSyr_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnSyr_TypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnSyr_TypeChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Syr_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Syr_Id() As System.Guid
		Get
			Return Me._Syr_Id
		End Get
		Set
			If ((Me._Syr_Id = value)  _
						= false) Then
				Me.OnSyr_IdChanging(value)
				Me.SendPropertyChanging
				Me._Syr_Id = value
				Me.SendPropertyChanged("Syr_Id")
				Me.OnSyr_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Syr_Type", DbType:="TinyInt NOT NULL")>  _
	Public Property Syr_Type() As Byte
		Get
			Return Me._Syr_Type
		End Get
		Set
			If ((Me._Syr_Type = value)  _
						= false) Then
				Me.OnSyr_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Syr_Type = value
				Me.SendPropertyChanged("Syr_Type")
				Me.OnSyr_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblUser")>  _
Partial Public Class t360_tblUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _User_Id As System.Guid
	
	Private _User_Name As String
	
	Private _User_Password As String
	
	Private _User_Salt As String
	
	Private _User_FirstName As String
	
	Private _User_LastName As String
	
	Private _User_Phone As String
	
	Private _User_Email As String
	
	Private _User_IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _t360_tblUserMenuItems As EntitySet(Of t360_tblUserMenuItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnUser_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUser_IdChanged()
    End Sub
    Partial Private Sub OnUser_NameChanging(value As String)
    End Sub
    Partial Private Sub OnUser_NameChanged()
    End Sub
    Partial Private Sub OnUser_PasswordChanging(value As String)
    End Sub
    Partial Private Sub OnUser_PasswordChanged()
    End Sub
    Partial Private Sub OnUser_SaltChanging(value As String)
    End Sub
    Partial Private Sub OnUser_SaltChanged()
    End Sub
    Partial Private Sub OnUser_FirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnUser_FirstNameChanged()
    End Sub
    Partial Private Sub OnUser_LastNameChanging(value As String)
    End Sub
    Partial Private Sub OnUser_LastNameChanged()
    End Sub
    Partial Private Sub OnUser_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnUser_PhoneChanged()
    End Sub
    Partial Private Sub OnUser_EmailChanging(value As String)
    End Sub
    Partial Private Sub OnUser_EmailChanged()
    End Sub
    Partial Private Sub OnUser_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnUser_IsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblUserMenuItems = New EntitySet(Of t360_tblUserMenuItem)(AddressOf Me.attach_t360_tblUserMenuItems, AddressOf Me.detach_t360_tblUserMenuItems)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property User_Id() As System.Guid
		Get
			Return Me._User_Id
		End Get
		Set
			If ((Me._User_Id = value)  _
						= false) Then
				Me.OnUser_IdChanging(value)
				Me.SendPropertyChanging
				Me._User_Id = value
				Me.SendPropertyChanged("User_Id")
				Me.OnUser_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property User_Name() As String
		Get
			Return Me._User_Name
		End Get
		Set
			If (String.Equals(Me._User_Name, value) = false) Then
				Me.OnUser_NameChanging(value)
				Me.SendPropertyChanging
				Me._User_Name = value
				Me.SendPropertyChanged("User_Name")
				Me.OnUser_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Password", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property User_Password() As String
		Get
			Return Me._User_Password
		End Get
		Set
			If (String.Equals(Me._User_Password, value) = false) Then
				Me.OnUser_PasswordChanging(value)
				Me.SendPropertyChanging
				Me._User_Password = value
				Me.SendPropertyChanged("User_Password")
				Me.OnUser_PasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Salt", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property User_Salt() As String
		Get
			Return Me._User_Salt
		End Get
		Set
			If (String.Equals(Me._User_Salt, value) = false) Then
				Me.OnUser_SaltChanging(value)
				Me.SendPropertyChanging
				Me._User_Salt = value
				Me.SendPropertyChanged("User_Salt")
				Me.OnUser_SaltChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_FirstName", DbType:="VarChar(50)")>  _
	Public Property User_FirstName() As String
		Get
			Return Me._User_FirstName
		End Get
		Set
			If (String.Equals(Me._User_FirstName, value) = false) Then
				Me.OnUser_FirstNameChanging(value)
				Me.SendPropertyChanging
				Me._User_FirstName = value
				Me.SendPropertyChanged("User_FirstName")
				Me.OnUser_FirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_LastName", DbType:="VarChar(50)")>  _
	Public Property User_LastName() As String
		Get
			Return Me._User_LastName
		End Get
		Set
			If (String.Equals(Me._User_LastName, value) = false) Then
				Me.OnUser_LastNameChanging(value)
				Me.SendPropertyChanging
				Me._User_LastName = value
				Me.SendPropertyChanged("User_LastName")
				Me.OnUser_LastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Phone", DbType:="VarChar(50)")>  _
	Public Property User_Phone() As String
		Get
			Return Me._User_Phone
		End Get
		Set
			If (String.Equals(Me._User_Phone, value) = false) Then
				Me.OnUser_PhoneChanging(value)
				Me.SendPropertyChanging
				Me._User_Phone = value
				Me.SendPropertyChanged("User_Phone")
				Me.OnUser_PhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Email", DbType:="VarChar(50)")>  _
	Public Property User_Email() As String
		Get
			Return Me._User_Email
		End Get
		Set
			If (String.Equals(Me._User_Email, value) = false) Then
				Me.OnUser_EmailChanging(value)
				Me.SendPropertyChanging
				Me._User_Email = value
				Me.SendPropertyChanged("User_Email")
				Me.OnUser_EmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property User_IsActive() As Boolean
		Get
			Return Me._User_IsActive
		End Get
		Set
			If ((Me._User_IsActive = value)  _
						= false) Then
				Me.OnUser_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._User_IsActive = value
				Me.SendPropertyChanged("User_IsActive")
				Me.OnUser_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblUser_t360_tblUserMenuItem", Storage:="_t360_tblUserMenuItems", ThisKey:="User_Id", OtherKey:="User_Id")>  _
	Public Property t360_tblUserMenuItems() As EntitySet(Of t360_tblUserMenuItem)
		Get
			Return Me._t360_tblUserMenuItems
		End Get
		Set
			Me._t360_tblUserMenuItems.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblUserMenuItems(ByVal entity As t360_tblUserMenuItem)
		Me.SendPropertyChanging
		entity.t360_tblUser = Me
	End Sub
	
	Private Sub detach_t360_tblUserMenuItems(ByVal entity As t360_tblUserMenuItem)
		Me.SendPropertyChanging
		entity.t360_tblUser = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblStudentFinish")>  _
Partial Public Class t360_tblStudentFinish
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Student_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Class_Name As String
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _IsActive As Boolean
	
	Private _t360_tblStudent As EntityRef(Of t360_tblStudent)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnClass_NameChanging(value As String)
    End Sub
    Partial Private Sub OnClass_NameChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblStudent = CType(Nothing, EntityRef(Of t360_tblStudent))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Student_Id() As System.Guid
		Get
			Return Me._Student_Id
		End Get
		Set
			If ((Me._Student_Id = value)  _
						= false) Then
				If Me._t360_tblStudent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				Me.OnClass_NameChanging(value)
				Me.SendPropertyChanging
				Me._Class_Name = value
				Me.SendPropertyChanged("Class_Name")
				Me.OnClass_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblStudent_t360_tblStudentFinish", Storage:="_t360_tblStudent", ThisKey:="Student_Id", OtherKey:="Student_Id", IsForeignKey:=true)>  _
	Public Property t360_tblStudent() As t360_tblStudent
		Get
			Return Me._t360_tblStudent.Entity
		End Get
		Set
			Dim previousValue As t360_tblStudent = Me._t360_tblStudent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblStudent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblStudent.Entity = Nothing
					previousValue.t360_tblStudentFinishes.Remove(Me)
				End If
				Me._t360_tblStudent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblStudentFinishes.Add(Me)
					Me._Student_Id = value.Student_Id
				Else
					Me._Student_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblStudent")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblNewsRoom")>  _
Partial Public Class t360_tblNewsRoom
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _News_Id As System.Guid
	
	Private _Class_Name As String
	
	Private _Room_Name As String
	
	Private _LastUpdate As Date
	
	Private _IsActive As Boolean
	
	Private _NR_Id As System.Guid
	
	Private _ClientId As String
	
	Private _t360_tblNewsDetailCompletions As EntitySet(Of t360_tblNewsDetailCompletion)
	
	Private _t360_tblNew As EntityRef(Of t360_tblNew)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnNews_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNews_IdChanged()
    End Sub
    Partial Private Sub OnClass_NameChanging(value As String)
    End Sub
    Partial Private Sub OnClass_NameChanged()
    End Sub
    Partial Private Sub OnRoom_NameChanging(value As String)
    End Sub
    Partial Private Sub OnRoom_NameChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnNR_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNR_IdChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblNewsDetailCompletions = New EntitySet(Of t360_tblNewsDetailCompletion)(AddressOf Me.attach_t360_tblNewsDetailCompletions, AddressOf Me.detach_t360_tblNewsDetailCompletions)
		Me._t360_tblNew = CType(Nothing, EntityRef(Of t360_tblNew))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_News_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property News_Id() As System.Guid
		Get
			Return Me._News_Id
		End Get
		Set
			If ((Me._News_Id = value)  _
						= false) Then
				If Me._t360_tblNew.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNews_IdChanging(value)
				Me.SendPropertyChanging
				Me._News_Id = value
				Me.SendPropertyChanged("News_Id")
				Me.OnNews_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				Me.OnClass_NameChanging(value)
				Me.SendPropertyChanging
				Me._Class_Name = value
				Me.SendPropertyChanged("Class_Name")
				Me.OnClass_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Room_Name() As String
		Get
			Return Me._Room_Name
		End Get
		Set
			If (String.Equals(Me._Room_Name, value) = false) Then
				Me.OnRoom_NameChanging(value)
				Me.SendPropertyChanging
				Me._Room_Name = value
				Me.SendPropertyChanged("Room_Name")
				Me.OnRoom_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NR_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property NR_Id() As System.Guid
		Get
			Return Me._NR_Id
		End Get
		Set
			If ((Me._NR_Id = value)  _
						= false) Then
				Me.OnNR_IdChanging(value)
				Me.SendPropertyChanging
				Me._NR_Id = value
				Me.SendPropertyChanged("NR_Id")
				Me.OnNR_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblNewsRoom_t360_tblNewsDetailCompletion", Storage:="_t360_tblNewsDetailCompletions", ThisKey:="NR_Id", OtherKey:="NR_Id")>  _
	Public Property t360_tblNewsDetailCompletions() As EntitySet(Of t360_tblNewsDetailCompletion)
		Get
			Return Me._t360_tblNewsDetailCompletions
		End Get
		Set
			Me._t360_tblNewsDetailCompletions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblNew_t360_tblNewsRoom", Storage:="_t360_tblNew", ThisKey:="News_Id", OtherKey:="News_Id", IsForeignKey:=true)>  _
	Public Property t360_tblNew() As t360_tblNew
		Get
			Return Me._t360_tblNew.Entity
		End Get
		Set
			Dim previousValue As t360_tblNew = Me._t360_tblNew.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblNew.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblNew.Entity = Nothing
					previousValue.t360_tblNewsRooms.Remove(Me)
				End If
				Me._t360_tblNew.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblNewsRooms.Add(Me)
					Me._News_Id = value.News_Id
				Else
					Me._News_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblNew")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblNewsDetailCompletions(ByVal entity As t360_tblNewsDetailCompletion)
		Me.SendPropertyChanging
		entity.t360_tblNewsRoom = Me
	End Sub
	
	Private Sub detach_t360_tblNewsDetailCompletions(ByVal entity As t360_tblNewsDetailCompletion)
		Me.SendPropertyChanging
		entity.t360_tblNewsRoom = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblUserMenuItem")>  _
Partial Public Class t360_tblUserMenuItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _MenuItem_Code As Short
	
	Private _User_Id As System.Guid
	
	Private _LastUpdate As Date
	
	Private _IsActive As Boolean
	
	Private _UMI_Id As System.Guid
	
	Private _ClientId As String
	
	Private _t360_tblMenuItem As EntityRef(Of t360_tblMenuItem)
	
	Private _t360_tblUser As EntityRef(Of t360_tblUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnMenuItem_CodeChanging(value As Short)
    End Sub
    Partial Private Sub OnMenuItem_CodeChanged()
    End Sub
    Partial Private Sub OnUser_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUser_IdChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnUMI_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUMI_IdChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblMenuItem = CType(Nothing, EntityRef(Of t360_tblMenuItem))
		Me._t360_tblUser = CType(Nothing, EntityRef(Of t360_tblUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuItem_Code", DbType:="SmallInt NOT NULL")>  _
	Public Property MenuItem_Code() As Short
		Get
			Return Me._MenuItem_Code
		End Get
		Set
			If ((Me._MenuItem_Code = value)  _
						= false) Then
				If Me._t360_tblMenuItem.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMenuItem_CodeChanging(value)
				Me.SendPropertyChanging
				Me._MenuItem_Code = value
				Me.SendPropertyChanged("MenuItem_Code")
				Me.OnMenuItem_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property User_Id() As System.Guid
		Get
			Return Me._User_Id
		End Get
		Set
			If ((Me._User_Id = value)  _
						= false) Then
				If Me._t360_tblUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUser_IdChanging(value)
				Me.SendPropertyChanging
				Me._User_Id = value
				Me.SendPropertyChanged("User_Id")
				Me.OnUser_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UMI_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UMI_Id() As System.Guid
		Get
			Return Me._UMI_Id
		End Get
		Set
			If ((Me._UMI_Id = value)  _
						= false) Then
				Me.OnUMI_IdChanging(value)
				Me.SendPropertyChanging
				Me._UMI_Id = value
				Me.SendPropertyChanged("UMI_Id")
				Me.OnUMI_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblMenuItem_t360_tblUserMenuItem", Storage:="_t360_tblMenuItem", ThisKey:="MenuItem_Code", OtherKey:="MenuItem_Code", IsForeignKey:=true)>  _
	Public Property t360_tblMenuItem() As t360_tblMenuItem
		Get
			Return Me._t360_tblMenuItem.Entity
		End Get
		Set
			Dim previousValue As t360_tblMenuItem = Me._t360_tblMenuItem.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblMenuItem.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblMenuItem.Entity = Nothing
					previousValue.t360_tblUserMenuItems.Remove(Me)
				End If
				Me._t360_tblMenuItem.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblUserMenuItems.Add(Me)
					Me._MenuItem_Code = value.MenuItem_Code
				Else
					Me._MenuItem_Code = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("t360_tblMenuItem")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblUser_t360_tblUserMenuItem", Storage:="_t360_tblUser", ThisKey:="User_Id", OtherKey:="User_Id", IsForeignKey:=true)>  _
	Public Property t360_tblUser() As t360_tblUser
		Get
			Return Me._t360_tblUser.Entity
		End Get
		Set
			Dim previousValue As t360_tblUser = Me._t360_tblUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblUser.Entity = Nothing
					previousValue.t360_tblUserMenuItems.Remove(Me)
				End If
				Me._t360_tblUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblUserMenuItems.Add(Me)
					Me._User_Id = value.User_Id
				Else
					Me._User_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblSchool")>  _
Partial Public Class t360_tblSchool
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _School_Name As String
	
	Private _School_Number As String
	
	Private _School_Soi As String
	
	Private _School_Street As String
	
	Private _SubDistrict_Id As Integer
	
	Private _District_Id As Integer
	
	Private _Province_Id As Integer
	
	Private _School_DirectorName As String
	
	Private _School_Director_Phone1 As String
	
	Private _School_Director_Phone2 As String
	
	Private _School_Phone1 As String
	
	Private _School_Phone2 As String
	
	Private _School_Fax As String
	
	Private _School_Email As String
	
	Private _School_Website As String
	
	Private _School_IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _GUID As System.Guid
	
	Private _StartSync As System.Nullable(Of System.TimeSpan)
	
	Private _EndSync As System.Nullable(Of System.TimeSpan)
	
	Private _OnSync As System.Nullable(Of Boolean)
	
	Private _Report_Email As String
	
	Private _ClientId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnSchool_NameChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_NameChanged()
    End Sub
    Partial Private Sub OnSchool_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_NumberChanged()
    End Sub
    Partial Private Sub OnSchool_SoiChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_SoiChanged()
    End Sub
    Partial Private Sub OnSchool_StreetChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_StreetChanged()
    End Sub
    Partial Private Sub OnSubDistrict_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubDistrict_IdChanged()
    End Sub
    Partial Private Sub OnDistrict_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDistrict_IdChanged()
    End Sub
    Partial Private Sub OnProvince_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvince_IdChanged()
    End Sub
    Partial Private Sub OnSchool_DirectorNameChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_DirectorNameChanged()
    End Sub
    Partial Private Sub OnSchool_Director_Phone1Changing(value As String)
    End Sub
    Partial Private Sub OnSchool_Director_Phone1Changed()
    End Sub
    Partial Private Sub OnSchool_Director_Phone2Changing(value As String)
    End Sub
    Partial Private Sub OnSchool_Director_Phone2Changed()
    End Sub
    Partial Private Sub OnSchool_Phone1Changing(value As String)
    End Sub
    Partial Private Sub OnSchool_Phone1Changed()
    End Sub
    Partial Private Sub OnSchool_Phone2Changing(value As String)
    End Sub
    Partial Private Sub OnSchool_Phone2Changed()
    End Sub
    Partial Private Sub OnSchool_FaxChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_FaxChanged()
    End Sub
    Partial Private Sub OnSchool_EmailChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_EmailChanged()
    End Sub
    Partial Private Sub OnSchool_WebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_WebsiteChanged()
    End Sub
    Partial Private Sub OnSchool_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSchool_IsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnStartSyncChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnStartSyncChanged()
    End Sub
    Partial Private Sub OnEndSyncChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnEndSyncChanged()
    End Sub
    Partial Private Sub OnOnSyncChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOnSyncChanged()
    End Sub
    Partial Private Sub OnReport_EmailChanging(value As String)
    End Sub
    Partial Private Sub OnReport_EmailChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Name() As String
		Get
			Return Me._School_Name
		End Get
		Set
			If (String.Equals(Me._School_Name, value) = false) Then
				Me.OnSchool_NameChanging(value)
				Me.SendPropertyChanging
				Me._School_Name = value
				Me.SendPropertyChanged("School_Name")
				Me.OnSchool_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Number", DbType:="VarChar(25)")>  _
	Public Property School_Number() As String
		Get
			Return Me._School_Number
		End Get
		Set
			If (String.Equals(Me._School_Number, value) = false) Then
				Me.OnSchool_NumberChanging(value)
				Me.SendPropertyChanging
				Me._School_Number = value
				Me.SendPropertyChanged("School_Number")
				Me.OnSchool_NumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Soi", DbType:="VarChar(100)")>  _
	Public Property School_Soi() As String
		Get
			Return Me._School_Soi
		End Get
		Set
			If (String.Equals(Me._School_Soi, value) = false) Then
				Me.OnSchool_SoiChanging(value)
				Me.SendPropertyChanging
				Me._School_Soi = value
				Me.SendPropertyChanged("School_Soi")
				Me.OnSchool_SoiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Street", DbType:="VarChar(100)")>  _
	Public Property School_Street() As String
		Get
			Return Me._School_Street
		End Get
		Set
			If (String.Equals(Me._School_Street, value) = false) Then
				Me.OnSchool_StreetChanging(value)
				Me.SendPropertyChanging
				Me._School_Street = value
				Me.SendPropertyChanged("School_Street")
				Me.OnSchool_StreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubDistrict_Id", DbType:="Int NOT NULL")>  _
	Public Property SubDistrict_Id() As Integer
		Get
			Return Me._SubDistrict_Id
		End Get
		Set
			If ((Me._SubDistrict_Id = value)  _
						= false) Then
				Me.OnSubDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._SubDistrict_Id = value
				Me.SendPropertyChanged("SubDistrict_Id")
				Me.OnSubDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District_Id", DbType:="Int NOT NULL")>  _
	Public Property District_Id() As Integer
		Get
			Return Me._District_Id
		End Get
		Set
			If ((Me._District_Id = value)  _
						= false) Then
				Me.OnDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._District_Id = value
				Me.SendPropertyChanged("District_Id")
				Me.OnDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province_Id", DbType:="Int NOT NULL")>  _
	Public Property Province_Id() As Integer
		Get
			Return Me._Province_Id
		End Get
		Set
			If ((Me._Province_Id = value)  _
						= false) Then
				Me.OnProvince_IdChanging(value)
				Me.SendPropertyChanging
				Me._Province_Id = value
				Me.SendPropertyChanged("Province_Id")
				Me.OnProvince_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_DirectorName", DbType:="VarChar(100)")>  _
	Public Property School_DirectorName() As String
		Get
			Return Me._School_DirectorName
		End Get
		Set
			If (String.Equals(Me._School_DirectorName, value) = false) Then
				Me.OnSchool_DirectorNameChanging(value)
				Me.SendPropertyChanging
				Me._School_DirectorName = value
				Me.SendPropertyChanged("School_DirectorName")
				Me.OnSchool_DirectorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Director_Phone1", DbType:="VarChar(50)")>  _
	Public Property School_Director_Phone1() As String
		Get
			Return Me._School_Director_Phone1
		End Get
		Set
			If (String.Equals(Me._School_Director_Phone1, value) = false) Then
				Me.OnSchool_Director_Phone1Changing(value)
				Me.SendPropertyChanging
				Me._School_Director_Phone1 = value
				Me.SendPropertyChanged("School_Director_Phone1")
				Me.OnSchool_Director_Phone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Director_Phone2", DbType:="VarChar(50)")>  _
	Public Property School_Director_Phone2() As String
		Get
			Return Me._School_Director_Phone2
		End Get
		Set
			If (String.Equals(Me._School_Director_Phone2, value) = false) Then
				Me.OnSchool_Director_Phone2Changing(value)
				Me.SendPropertyChanging
				Me._School_Director_Phone2 = value
				Me.SendPropertyChanged("School_Director_Phone2")
				Me.OnSchool_Director_Phone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Phone1", DbType:="VarChar(50)")>  _
	Public Property School_Phone1() As String
		Get
			Return Me._School_Phone1
		End Get
		Set
			If (String.Equals(Me._School_Phone1, value) = false) Then
				Me.OnSchool_Phone1Changing(value)
				Me.SendPropertyChanging
				Me._School_Phone1 = value
				Me.SendPropertyChanged("School_Phone1")
				Me.OnSchool_Phone1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Phone2", DbType:="VarChar(50)")>  _
	Public Property School_Phone2() As String
		Get
			Return Me._School_Phone2
		End Get
		Set
			If (String.Equals(Me._School_Phone2, value) = false) Then
				Me.OnSchool_Phone2Changing(value)
				Me.SendPropertyChanging
				Me._School_Phone2 = value
				Me.SendPropertyChanged("School_Phone2")
				Me.OnSchool_Phone2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Fax", DbType:="VarChar(50)")>  _
	Public Property School_Fax() As String
		Get
			Return Me._School_Fax
		End Get
		Set
			If (String.Equals(Me._School_Fax, value) = false) Then
				Me.OnSchool_FaxChanging(value)
				Me.SendPropertyChanging
				Me._School_Fax = value
				Me.SendPropertyChanged("School_Fax")
				Me.OnSchool_FaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Email", DbType:="VarChar(50)")>  _
	Public Property School_Email() As String
		Get
			Return Me._School_Email
		End Get
		Set
			If (String.Equals(Me._School_Email, value) = false) Then
				Me.OnSchool_EmailChanging(value)
				Me.SendPropertyChanging
				Me._School_Email = value
				Me.SendPropertyChanged("School_Email")
				Me.OnSchool_EmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Website", DbType:="VarChar(255)")>  _
	Public Property School_Website() As String
		Get
			Return Me._School_Website
		End Get
		Set
			If (String.Equals(Me._School_Website, value) = false) Then
				Me.OnSchool_WebsiteChanging(value)
				Me.SendPropertyChanging
				Me._School_Website = value
				Me.SendPropertyChanged("School_Website")
				Me.OnSchool_WebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property School_IsActive() As Boolean
		Get
			Return Me._School_IsActive
		End Get
		Set
			If ((Me._School_IsActive = value)  _
						= false) Then
				Me.OnSchool_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._School_IsActive = value
				Me.SendPropertyChanged("School_IsActive")
				Me.OnSchool_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GUID() As System.Guid
		Get
			Return Me._GUID
		End Get
		Set
			If ((Me._GUID = value)  _
						= false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartSync", DbType:="Time")>  _
	Public Property StartSync() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._StartSync
		End Get
		Set
			If (Me._StartSync.Equals(value) = false) Then
				Me.OnStartSyncChanging(value)
				Me.SendPropertyChanging
				Me._StartSync = value
				Me.SendPropertyChanged("StartSync")
				Me.OnStartSyncChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndSync", DbType:="Time")>  _
	Public Property EndSync() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._EndSync
		End Get
		Set
			If (Me._EndSync.Equals(value) = false) Then
				Me.OnEndSyncChanging(value)
				Me.SendPropertyChanging
				Me._EndSync = value
				Me.SendPropertyChanged("EndSync")
				Me.OnEndSyncChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OnSync", DbType:="Bit")>  _
	Public Property OnSync() As System.Nullable(Of Boolean)
		Get
			Return Me._OnSync
		End Get
		Set
			If (Me._OnSync.Equals(value) = false) Then
				Me.OnOnSyncChanging(value)
				Me.SendPropertyChanging
				Me._OnSync = value
				Me.SendPropertyChanged("OnSync")
				Me.OnOnSyncChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Report_Email", DbType:="VarChar(1000)")>  _
	Public Property Report_Email() As String
		Get
			Return Me._Report_Email
		End Get
		Set
			If (String.Equals(Me._Report_Email, value) = false) Then
				Me.OnReport_EmailChanging(value)
				Me.SendPropertyChanging
				Me._Report_Email = value
				Me.SendPropertyChanged("Report_Email")
				Me.OnReport_EmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAssistant")>  _
Partial Public Class tblAssistant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Ass_Id As System.Guid
	
	Private _Teacher_id As System.Guid
	
	Private _Assistant_id As System.Guid
	
	Private _LastUpdate As Date
	
	Private _IsActive As Boolean
	
	Private _ClientId As String
	
	Private _t360_tblTeacher As EntityRef(Of t360_tblTeacher)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAss_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAss_IdChanged()
    End Sub
    Partial Private Sub OnTeacher_idChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTeacher_idChanged()
    End Sub
    Partial Private Sub OnAssistant_idChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnAssistant_idChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblTeacher = CType(Nothing, EntityRef(Of t360_tblTeacher))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ass_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Ass_Id() As System.Guid
		Get
			Return Me._Ass_Id
		End Get
		Set
			If ((Me._Ass_Id = value)  _
						= false) Then
				Me.OnAss_IdChanging(value)
				Me.SendPropertyChanging
				Me._Ass_Id = value
				Me.SendPropertyChanged("Ass_Id")
				Me.OnAss_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Teacher_id() As System.Guid
		Get
			Return Me._Teacher_id
		End Get
		Set
			If ((Me._Teacher_id = value)  _
						= false) Then
				Me.OnTeacher_idChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_id = value
				Me.SendPropertyChanged("Teacher_id")
				Me.OnTeacher_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Assistant_id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Assistant_id() As System.Guid
		Get
			Return Me._Assistant_id
		End Get
		Set
			If ((Me._Assistant_id = value)  _
						= false) Then
				If Me._t360_tblTeacher.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAssistant_idChanging(value)
				Me.SendPropertyChanging
				Me._Assistant_id = value
				Me.SendPropertyChanged("Assistant_id")
				Me.OnAssistant_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTeacher_tblAssistant", Storage:="_t360_tblTeacher", ThisKey:="Assistant_id", OtherKey:="Teacher_id", IsForeignKey:=true)>  _
	Public Property t360_tblTeacher() As t360_tblTeacher
		Get
			Return Me._t360_tblTeacher.Entity
		End Get
		Set
			Dim previousValue As t360_tblTeacher = Me._t360_tblTeacher.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTeacher.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTeacher.Entity = Nothing
					previousValue.tblAssistants.Remove(Me)
				End If
				Me._t360_tblTeacher.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblAssistants.Add(Me)
					Me._Assistant_id = value.Teacher_id
				Else
					Me._Assistant_id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblTeacher")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblLog")>  _
Partial Public Class t360_tblLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Log_Id As System.Guid
	
	Private _Log_Type As Byte
	
	Private _School_Code As String
	
	Private _User_Id As System.Guid
	
	Private _Log_Description As String
	
	Private _Log_Page As String
	
	Private _LastUpdate As Date
	
	Private _Log_IsActive As Boolean
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _ClientId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLog_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLog_IdChanged()
    End Sub
    Partial Private Sub OnLog_TypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnLog_TypeChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnUser_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUser_IdChanged()
    End Sub
    Partial Private Sub OnLog_DescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnLog_DescriptionChanged()
    End Sub
    Partial Private Sub OnLog_PageChanging(value As String)
    End Sub
    Partial Private Sub OnLog_PageChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnLog_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLog_IsActiveChanged()
    End Sub
    Partial Private Sub OnCalendar_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCalendar_IdChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Log_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Log_Id() As System.Guid
		Get
			Return Me._Log_Id
		End Get
		Set
			If ((Me._Log_Id = value)  _
						= false) Then
				Me.OnLog_IdChanging(value)
				Me.SendPropertyChanging
				Me._Log_Id = value
				Me.SendPropertyChanged("Log_Id")
				Me.OnLog_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Log_Type", DbType:="TinyInt NOT NULL")>  _
	Public Property Log_Type() As Byte
		Get
			Return Me._Log_Type
		End Get
		Set
			If ((Me._Log_Type = value)  _
						= false) Then
				Me.OnLog_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Log_Type = value
				Me.SendPropertyChanged("Log_Type")
				Me.OnLog_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property User_Id() As System.Guid
		Get
			Return Me._User_Id
		End Get
		Set
			If ((Me._User_Id = value)  _
						= false) Then
				Me.OnUser_IdChanging(value)
				Me.SendPropertyChanging
				Me._User_Id = value
				Me.SendPropertyChanged("User_Id")
				Me.OnUser_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Log_Description", DbType:="VarChar(5000)")>  _
	Public Property Log_Description() As String
		Get
			Return Me._Log_Description
		End Get
		Set
			If (String.Equals(Me._Log_Description, value) = false) Then
				Me.OnLog_DescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Log_Description = value
				Me.SendPropertyChanged("Log_Description")
				Me.OnLog_DescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Log_Page", DbType:="VarChar(255)")>  _
	Public Property Log_Page() As String
		Get
			Return Me._Log_Page
		End Get
		Set
			If (String.Equals(Me._Log_Page, value) = false) Then
				Me.OnLog_PageChanging(value)
				Me.SendPropertyChanging
				Me._Log_Page = value
				Me.SendPropertyChanged("Log_Page")
				Me.OnLog_PageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Log_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Log_IsActive() As Boolean
		Get
			Return Me._Log_IsActive
		End Get
		Set
			If ((Me._Log_IsActive = value)  _
						= false) Then
				Me.OnLog_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Log_IsActive = value
				Me.SendPropertyChanged("Log_IsActive")
				Me.OnLog_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me.OnCalendar_IdChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Id = value
				Me.SendPropertyChanged("Calendar_Id")
				Me.OnCalendar_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSetEmail")>  _
Partial Public Class tblSetEmail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SE_Id As System.Guid
	
	Private _SchoolId As String
	
	Private _IP As String
	
	Private _Mask As String
	
	Private _GW As String
	
	Private _DNS1 As String
	
	Private _DNS2 As String
	
	Private _ProxyIP As String
	
	Private _ProxyPort As System.Nullable(Of Integer)
	
	Private _ProxyUser As String
	
	Private _ProxyPassword As String
	
	Private _SMTPServerIP As String
	
	Private _SMTPServerPort As System.Nullable(Of Integer)
	
	Private _SMTPServerUser As String
	
	Private _SMTPServerPassword As String
	
	Private _AskQuestionRecipient As String
	
	Private _RptConsultantRecipient As String
	
	Private _ParentServerAddress As String
	
	Private _ActivationDate As System.Nullable(Of Date)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSE_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSE_IdChanged()
    End Sub
    Partial Private Sub OnSchoolIdChanging(value As String)
    End Sub
    Partial Private Sub OnSchoolIdChanged()
    End Sub
    Partial Private Sub OnIPChanging(value As String)
    End Sub
    Partial Private Sub OnIPChanged()
    End Sub
    Partial Private Sub OnMaskChanging(value As String)
    End Sub
    Partial Private Sub OnMaskChanged()
    End Sub
    Partial Private Sub OnGWChanging(value As String)
    End Sub
    Partial Private Sub OnGWChanged()
    End Sub
    Partial Private Sub OnDNS1Changing(value As String)
    End Sub
    Partial Private Sub OnDNS1Changed()
    End Sub
    Partial Private Sub OnDNS2Changing(value As String)
    End Sub
    Partial Private Sub OnDNS2Changed()
    End Sub
    Partial Private Sub OnProxyIPChanging(value As String)
    End Sub
    Partial Private Sub OnProxyIPChanged()
    End Sub
    Partial Private Sub OnProxyPortChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProxyPortChanged()
    End Sub
    Partial Private Sub OnProxyUserChanging(value As String)
    End Sub
    Partial Private Sub OnProxyUserChanged()
    End Sub
    Partial Private Sub OnProxyPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnProxyPasswordChanged()
    End Sub
    Partial Private Sub OnSMTPServerIPChanging(value As String)
    End Sub
    Partial Private Sub OnSMTPServerIPChanged()
    End Sub
    Partial Private Sub OnSMTPServerPortChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSMTPServerPortChanged()
    End Sub
    Partial Private Sub OnSMTPServerUserChanging(value As String)
    End Sub
    Partial Private Sub OnSMTPServerUserChanged()
    End Sub
    Partial Private Sub OnSMTPServerPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnSMTPServerPasswordChanged()
    End Sub
    Partial Private Sub OnAskQuestionRecipientChanging(value As String)
    End Sub
    Partial Private Sub OnAskQuestionRecipientChanged()
    End Sub
    Partial Private Sub OnRptConsultantRecipientChanging(value As String)
    End Sub
    Partial Private Sub OnRptConsultantRecipientChanged()
    End Sub
    Partial Private Sub OnParentServerAddressChanging(value As String)
    End Sub
    Partial Private Sub OnParentServerAddressChanged()
    End Sub
    Partial Private Sub OnActivationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActivationDateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SE_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SE_Id() As System.Guid
		Get
			Return Me._SE_Id
		End Get
		Set
			If ((Me._SE_Id = value)  _
						= false) Then
				Me.OnSE_IdChanging(value)
				Me.SendPropertyChanging
				Me._SE_Id = value
				Me.SendPropertyChanged("SE_Id")
				Me.OnSE_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SchoolId() As String
		Get
			Return Me._SchoolId
		End Get
		Set
			If (String.Equals(Me._SchoolId, value) = false) Then
				Me.OnSchoolIdChanging(value)
				Me.SendPropertyChanging
				Me._SchoolId = value
				Me.SendPropertyChanged("SchoolId")
				Me.OnSchoolIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IP", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property IP() As String
		Get
			Return Me._IP
		End Get
		Set
			If (String.Equals(Me._IP, value) = false) Then
				Me.OnIPChanging(value)
				Me.SendPropertyChanging
				Me._IP = value
				Me.SendPropertyChanged("IP")
				Me.OnIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mask", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Mask() As String
		Get
			Return Me._Mask
		End Get
		Set
			If (String.Equals(Me._Mask, value) = false) Then
				Me.OnMaskChanging(value)
				Me.SendPropertyChanging
				Me._Mask = value
				Me.SendPropertyChanged("Mask")
				Me.OnMaskChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GW", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property GW() As String
		Get
			Return Me._GW
		End Get
		Set
			If (String.Equals(Me._GW, value) = false) Then
				Me.OnGWChanging(value)
				Me.SendPropertyChanging
				Me._GW = value
				Me.SendPropertyChanged("GW")
				Me.OnGWChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNS1", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property DNS1() As String
		Get
			Return Me._DNS1
		End Get
		Set
			If (String.Equals(Me._DNS1, value) = false) Then
				Me.OnDNS1Changing(value)
				Me.SendPropertyChanging
				Me._DNS1 = value
				Me.SendPropertyChanged("DNS1")
				Me.OnDNS1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNS2", DbType:="VarChar(15)")>  _
	Public Property DNS2() As String
		Get
			Return Me._DNS2
		End Get
		Set
			If (String.Equals(Me._DNS2, value) = false) Then
				Me.OnDNS2Changing(value)
				Me.SendPropertyChanging
				Me._DNS2 = value
				Me.SendPropertyChanged("DNS2")
				Me.OnDNS2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProxyIP", DbType:="VarChar(15)")>  _
	Public Property ProxyIP() As String
		Get
			Return Me._ProxyIP
		End Get
		Set
			If (String.Equals(Me._ProxyIP, value) = false) Then
				Me.OnProxyIPChanging(value)
				Me.SendPropertyChanging
				Me._ProxyIP = value
				Me.SendPropertyChanged("ProxyIP")
				Me.OnProxyIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProxyPort", DbType:="Int")>  _
	Public Property ProxyPort() As System.Nullable(Of Integer)
		Get
			Return Me._ProxyPort
		End Get
		Set
			If (Me._ProxyPort.Equals(value) = false) Then
				Me.OnProxyPortChanging(value)
				Me.SendPropertyChanging
				Me._ProxyPort = value
				Me.SendPropertyChanged("ProxyPort")
				Me.OnProxyPortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProxyUser", DbType:="VarChar(50)")>  _
	Public Property ProxyUser() As String
		Get
			Return Me._ProxyUser
		End Get
		Set
			If (String.Equals(Me._ProxyUser, value) = false) Then
				Me.OnProxyUserChanging(value)
				Me.SendPropertyChanging
				Me._ProxyUser = value
				Me.SendPropertyChanged("ProxyUser")
				Me.OnProxyUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProxyPassword", DbType:="VarChar(50)")>  _
	Public Property ProxyPassword() As String
		Get
			Return Me._ProxyPassword
		End Get
		Set
			If (String.Equals(Me._ProxyPassword, value) = false) Then
				Me.OnProxyPasswordChanging(value)
				Me.SendPropertyChanging
				Me._ProxyPassword = value
				Me.SendPropertyChanged("ProxyPassword")
				Me.OnProxyPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SMTPServerIP", DbType:="VarChar(15)")>  _
	Public Property SMTPServerIP() As String
		Get
			Return Me._SMTPServerIP
		End Get
		Set
			If (String.Equals(Me._SMTPServerIP, value) = false) Then
				Me.OnSMTPServerIPChanging(value)
				Me.SendPropertyChanging
				Me._SMTPServerIP = value
				Me.SendPropertyChanged("SMTPServerIP")
				Me.OnSMTPServerIPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SMTPServerPort", DbType:="Int")>  _
	Public Property SMTPServerPort() As System.Nullable(Of Integer)
		Get
			Return Me._SMTPServerPort
		End Get
		Set
			If (Me._SMTPServerPort.Equals(value) = false) Then
				Me.OnSMTPServerPortChanging(value)
				Me.SendPropertyChanging
				Me._SMTPServerPort = value
				Me.SendPropertyChanged("SMTPServerPort")
				Me.OnSMTPServerPortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SMTPServerUser", DbType:="VarChar(50)")>  _
	Public Property SMTPServerUser() As String
		Get
			Return Me._SMTPServerUser
		End Get
		Set
			If (String.Equals(Me._SMTPServerUser, value) = false) Then
				Me.OnSMTPServerUserChanging(value)
				Me.SendPropertyChanging
				Me._SMTPServerUser = value
				Me.SendPropertyChanged("SMTPServerUser")
				Me.OnSMTPServerUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SMTPServerPassword", DbType:="VarChar(50)")>  _
	Public Property SMTPServerPassword() As String
		Get
			Return Me._SMTPServerPassword
		End Get
		Set
			If (String.Equals(Me._SMTPServerPassword, value) = false) Then
				Me.OnSMTPServerPasswordChanging(value)
				Me.SendPropertyChanging
				Me._SMTPServerPassword = value
				Me.SendPropertyChanged("SMTPServerPassword")
				Me.OnSMTPServerPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AskQuestionRecipient", DbType:="VarChar(500)")>  _
	Public Property AskQuestionRecipient() As String
		Get
			Return Me._AskQuestionRecipient
		End Get
		Set
			If (String.Equals(Me._AskQuestionRecipient, value) = false) Then
				Me.OnAskQuestionRecipientChanging(value)
				Me.SendPropertyChanging
				Me._AskQuestionRecipient = value
				Me.SendPropertyChanged("AskQuestionRecipient")
				Me.OnAskQuestionRecipientChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RptConsultantRecipient", DbType:="VarChar(500)")>  _
	Public Property RptConsultantRecipient() As String
		Get
			Return Me._RptConsultantRecipient
		End Get
		Set
			If (String.Equals(Me._RptConsultantRecipient, value) = false) Then
				Me.OnRptConsultantRecipientChanging(value)
				Me.SendPropertyChanging
				Me._RptConsultantRecipient = value
				Me.SendPropertyChanged("RptConsultantRecipient")
				Me.OnRptConsultantRecipientChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentServerAddress", DbType:="VarChar(255)")>  _
	Public Property ParentServerAddress() As String
		Get
			Return Me._ParentServerAddress
		End Get
		Set
			If (String.Equals(Me._ParentServerAddress, value) = false) Then
				Me.OnParentServerAddressChanging(value)
				Me.SendPropertyChanging
				Me._ParentServerAddress = value
				Me.SendPropertyChanged("ParentServerAddress")
				Me.OnParentServerAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationDate", DbType:="SmallDateTime")>  _
	Public Property ActivationDate() As System.Nullable(Of Date)
		Get
			Return Me._ActivationDate
		End Get
		Set
			If (Me._ActivationDate.Equals(value) = false) Then
				Me.OnActivationDateChanging(value)
				Me.SendPropertyChanging
				Me._ActivationDate = value
				Me.SendPropertyChanged("ActivationDate")
				Me.OnActivationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblNews")>  _
Partial Public Class t360_tblNew
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _News_Id As System.Guid
	
	Private _News_Information As String
	
	Private _News_Announcer As String
	
	Private _News_StartDate As Date
	
	Private _News_EndDate As Date
	
	Private _News_ToStudent As System.Nullable(Of Boolean)
	
	Private _News_ToTeacher As System.Nullable(Of Boolean)
	
	Private _News_ToTeacherNoRoom As System.Nullable(Of Boolean)
	
	Private _News_IsActive As Boolean
	
	Private _LastUpdate As Date
	
	Private _ClientId As String
	
	Private _t360_tblNewsRooms As EntitySet(Of t360_tblNewsRoom)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnNews_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNews_IdChanged()
    End Sub
    Partial Private Sub OnNews_InformationChanging(value As String)
    End Sub
    Partial Private Sub OnNews_InformationChanged()
    End Sub
    Partial Private Sub OnNews_AnnouncerChanging(value As String)
    End Sub
    Partial Private Sub OnNews_AnnouncerChanged()
    End Sub
    Partial Private Sub OnNews_StartDateChanging(value As Date)
    End Sub
    Partial Private Sub OnNews_StartDateChanged()
    End Sub
    Partial Private Sub OnNews_EndDateChanging(value As Date)
    End Sub
    Partial Private Sub OnNews_EndDateChanged()
    End Sub
    Partial Private Sub OnNews_ToStudentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNews_ToStudentChanged()
    End Sub
    Partial Private Sub OnNews_ToTeacherChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNews_ToTeacherChanged()
    End Sub
    Partial Private Sub OnNews_ToTeacherNoRoomChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNews_ToTeacherNoRoomChanged()
    End Sub
    Partial Private Sub OnNews_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnNews_IsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblNewsRooms = New EntitySet(Of t360_tblNewsRoom)(AddressOf Me.attach_t360_tblNewsRooms, AddressOf Me.detach_t360_tblNewsRooms)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_News_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property News_Id() As System.Guid
		Get
			Return Me._News_Id
		End Get
		Set
			If ((Me._News_Id = value)  _
						= false) Then
				Me.OnNews_IdChanging(value)
				Me.SendPropertyChanging
				Me._News_Id = value
				Me.SendPropertyChanged("News_Id")
				Me.OnNews_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_News_Information", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property News_Information() As String
		Get
			Return Me._News_Information
		End Get
		Set
			If (String.Equals(Me._News_Information, value) = false) Then
				Me.OnNews_InformationChanging(value)
				Me.SendPropertyChanging
				Me._News_Information = value
				Me.SendPropertyChanged("News_Information")
				Me.OnNews_InformationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_News_Announcer", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property News_Announcer() As String
		Get
			Return Me._News_Announcer
		End Get
		Set
			If (String.Equals(Me._News_Announcer, value) = false) Then
				Me.OnNews_AnnouncerChanging(value)
				Me.SendPropertyChanging
				Me._News_Announcer = value
				Me.SendPropertyChanged("News_Announcer")
				Me.OnNews_AnnouncerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_News_StartDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property News_StartDate() As Date
		Get
			Return Me._News_StartDate
		End Get
		Set
			If ((Me._News_StartDate = value)  _
						= false) Then
				Me.OnNews_StartDateChanging(value)
				Me.SendPropertyChanging
				Me._News_StartDate = value
				Me.SendPropertyChanged("News_StartDate")
				Me.OnNews_StartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_News_EndDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property News_EndDate() As Date
		Get
			Return Me._News_EndDate
		End Get
		Set
			If ((Me._News_EndDate = value)  _
						= false) Then
				Me.OnNews_EndDateChanging(value)
				Me.SendPropertyChanging
				Me._News_EndDate = value
				Me.SendPropertyChanged("News_EndDate")
				Me.OnNews_EndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_News_ToStudent", DbType:="Bit")>  _
	Public Property News_ToStudent() As System.Nullable(Of Boolean)
		Get
			Return Me._News_ToStudent
		End Get
		Set
			If (Me._News_ToStudent.Equals(value) = false) Then
				Me.OnNews_ToStudentChanging(value)
				Me.SendPropertyChanging
				Me._News_ToStudent = value
				Me.SendPropertyChanged("News_ToStudent")
				Me.OnNews_ToStudentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_News_ToTeacher", DbType:="Bit")>  _
	Public Property News_ToTeacher() As System.Nullable(Of Boolean)
		Get
			Return Me._News_ToTeacher
		End Get
		Set
			If (Me._News_ToTeacher.Equals(value) = false) Then
				Me.OnNews_ToTeacherChanging(value)
				Me.SendPropertyChanging
				Me._News_ToTeacher = value
				Me.SendPropertyChanged("News_ToTeacher")
				Me.OnNews_ToTeacherChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_News_ToTeacherNoRoom", DbType:="Bit")>  _
	Public Property News_ToTeacherNoRoom() As System.Nullable(Of Boolean)
		Get
			Return Me._News_ToTeacherNoRoom
		End Get
		Set
			If (Me._News_ToTeacherNoRoom.Equals(value) = false) Then
				Me.OnNews_ToTeacherNoRoomChanging(value)
				Me.SendPropertyChanging
				Me._News_ToTeacherNoRoom = value
				Me.SendPropertyChanged("News_ToTeacherNoRoom")
				Me.OnNews_ToTeacherNoRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_News_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property News_IsActive() As Boolean
		Get
			Return Me._News_IsActive
		End Get
		Set
			If ((Me._News_IsActive = value)  _
						= false) Then
				Me.OnNews_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._News_IsActive = value
				Me.SendPropertyChanged("News_IsActive")
				Me.OnNews_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblNew_t360_tblNewsRoom", Storage:="_t360_tblNewsRooms", ThisKey:="News_Id", OtherKey:="News_Id")>  _
	Public Property t360_tblNewsRooms() As EntitySet(Of t360_tblNewsRoom)
		Get
			Return Me._t360_tblNewsRooms
		End Get
		Set
			Me._t360_tblNewsRooms.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblNewsRooms(ByVal entity As t360_tblNewsRoom)
		Me.SendPropertyChanging
		entity.t360_tblNew = Me
	End Sub
	
	Private Sub detach_t360_tblNewsRooms(ByVal entity As t360_tblNewsRoom)
		Me.SendPropertyChanging
		entity.t360_tblNew = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblSchoolClass")>  _
Partial Public Class t360_tblSchoolClass
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Sc_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Class_Name As String
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _IsActive As Boolean
	
	Private _ClientId As String
	
	Private _t360_tblClass As EntityRef(Of t360_tblClass)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSc_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSc_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnClass_NameChanging(value As String)
    End Sub
    Partial Private Sub OnClass_NameChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblClass = CType(Nothing, EntityRef(Of t360_tblClass))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sc_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Sc_Id() As System.Guid
		Get
			Return Me._Sc_Id
		End Get
		Set
			If ((Me._Sc_Id = value)  _
						= false) Then
				Me.OnSc_IdChanging(value)
				Me.SendPropertyChanging
				Me._Sc_Id = value
				Me.SendPropertyChanged("Sc_Id")
				Me.OnSc_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				If Me._t360_tblClass.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnClass_NameChanging(value)
				Me.SendPropertyChanging
				Me._Class_Name = value
				Me.SendPropertyChanged("Class_Name")
				Me.OnClass_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblClass_t360_tblSchoolClass", Storage:="_t360_tblClass", ThisKey:="Class_Name", OtherKey:="Class_Name", IsForeignKey:=true)>  _
	Public Property t360_tblClass() As t360_tblClass
		Get
			Return Me._t360_tblClass.Entity
		End Get
		Set
			Dim previousValue As t360_tblClass = Me._t360_tblClass.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblClass.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblClass.Entity = Nothing
					previousValue.t360_tblSchoolClasses.Remove(Me)
				End If
				Me._t360_tblClass.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblSchoolClasses.Add(Me)
					Me._Class_Name = value.Class_Name
				Else
					Me._Class_Name = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("t360_tblClass")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblModuleDetailCompletion")>  _
Partial Public Class tblModuleDetailCompletion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MDC_Id As System.Guid
	
	Private _ModuleDetail_Id As System.Nullable(Of System.Guid)
	
	Private _MA_Id As System.Nullable(Of System.Guid)
	
	Private _Student_Id As System.Nullable(Of System.Guid)
	
	Private _Quiz_Id As System.Nullable(Of System.Guid)
	
	Private _Module_Status As System.Nullable(Of Byte)
	
	Private _TimeExitedByUser As System.Nullable(Of Date)
	
	Private _DateChecked As System.Nullable(Of Date)
	
	Private _School_Code As String
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMDC_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnMDC_IdChanged()
    End Sub
    Partial Private Sub OnModuleDetail_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnModuleDetail_IdChanged()
    End Sub
    Partial Private Sub OnMA_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnMA_IdChanged()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnQuiz_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnQuiz_IdChanged()
    End Sub
    Partial Private Sub OnModule_StatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnModule_StatusChanged()
    End Sub
    Partial Private Sub OnTimeExitedByUserChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTimeExitedByUserChanged()
    End Sub
    Partial Private Sub OnDateCheckedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCheckedChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MDC_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property MDC_Id() As System.Guid
		Get
			Return Me._MDC_Id
		End Get
		Set
			If ((Me._MDC_Id = value)  _
						= false) Then
				Me.OnMDC_IdChanging(value)
				Me.SendPropertyChanging
				Me._MDC_Id = value
				Me.SendPropertyChanged("MDC_Id")
				Me.OnMDC_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModuleDetail_Id", DbType:="UniqueIdentifier")>  _
	Public Property ModuleDetail_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._ModuleDetail_Id
		End Get
		Set
			If (Me._ModuleDetail_Id.Equals(value) = false) Then
				Me.OnModuleDetail_IdChanging(value)
				Me.SendPropertyChanging
				Me._ModuleDetail_Id = value
				Me.SendPropertyChanged("ModuleDetail_Id")
				Me.OnModuleDetail_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MA_Id", DbType:="UniqueIdentifier")>  _
	Public Property MA_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._MA_Id
		End Get
		Set
			If (Me._MA_Id.Equals(value) = false) Then
				Me.OnMA_IdChanging(value)
				Me.SendPropertyChanging
				Me._MA_Id = value
				Me.SendPropertyChanged("MA_Id")
				Me.OnMA_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier")>  _
	Public Property Student_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Student_Id
		End Get
		Set
			If (Me._Student_Id.Equals(value) = false) Then
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quiz_Id", DbType:="UniqueIdentifier")>  _
	Public Property Quiz_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Quiz_Id
		End Get
		Set
			If (Me._Quiz_Id.Equals(value) = false) Then
				Me.OnQuiz_IdChanging(value)
				Me.SendPropertyChanging
				Me._Quiz_Id = value
				Me.SendPropertyChanged("Quiz_Id")
				Me.OnQuiz_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Module_Status", DbType:="TinyInt")>  _
	Public Property Module_Status() As System.Nullable(Of Byte)
		Get
			Return Me._Module_Status
		End Get
		Set
			If (Me._Module_Status.Equals(value) = false) Then
				Me.OnModule_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Module_Status = value
				Me.SendPropertyChanged("Module_Status")
				Me.OnModule_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TimeExitedByUser", DbType:="SmallDateTime")>  _
	Public Property TimeExitedByUser() As System.Nullable(Of Date)
		Get
			Return Me._TimeExitedByUser
		End Get
		Set
			If (Me._TimeExitedByUser.Equals(value) = false) Then
				Me.OnTimeExitedByUserChanging(value)
				Me.SendPropertyChanging
				Me._TimeExitedByUser = value
				Me.SendPropertyChanged("TimeExitedByUser")
				Me.OnTimeExitedByUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateChecked", DbType:="SmallDateTime")>  _
	Public Property DateChecked() As System.Nullable(Of Date)
		Get
			Return Me._DateChecked
		End Get
		Set
			If (Me._DateChecked.Equals(value) = false) Then
				Me.OnDateCheckedChanging(value)
				Me.SendPropertyChanging
				Me._DateChecked = value
				Me.SendPropertyChanged("DateChecked")
				Me.OnDateCheckedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20)")>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSyncLog")>  _
Partial Public Class tblSyncLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LogId As System.Guid
	
	Private _LogType As System.Nullable(Of Byte)
	
	Private _File_Id As String
	
	Private _SourceFrom_ClientId As String
	
	Private _School_Code As String
	
	Private _ClientId As String
	
	Private _Description As String
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _LastSync As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLogIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLogIdChanged()
    End Sub
    Partial Private Sub OnLogTypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnLogTypeChanged()
    End Sub
    Partial Private Sub OnFile_IdChanging(value As String)
    End Sub
    Partial Private Sub OnFile_IdChanged()
    End Sub
    Partial Private Sub OnSourceFrom_ClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnSourceFrom_ClientIdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnLastSyncChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastSyncChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LogId() As System.Guid
		Get
			Return Me._LogId
		End Get
		Set
			If ((Me._LogId = value)  _
						= false) Then
				Me.OnLogIdChanging(value)
				Me.SendPropertyChanging
				Me._LogId = value
				Me.SendPropertyChanged("LogId")
				Me.OnLogIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogType", DbType:="TinyInt")>  _
	Public Property LogType() As System.Nullable(Of Byte)
		Get
			Return Me._LogType
		End Get
		Set
			If (Me._LogType.Equals(value) = false) Then
				Me.OnLogTypeChanging(value)
				Me.SendPropertyChanging
				Me._LogType = value
				Me.SendPropertyChanged("LogType")
				Me.OnLogTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_File_Id", DbType:="VarChar(255)")>  _
	Public Property File_Id() As String
		Get
			Return Me._File_Id
		End Get
		Set
			If (String.Equals(Me._File_Id, value) = false) Then
				Me.OnFile_IdChanging(value)
				Me.SendPropertyChanging
				Me._File_Id = value
				Me.SendPropertyChanged("File_Id")
				Me.OnFile_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SourceFrom_ClientId", DbType:="VarChar(50)")>  _
	Public Property SourceFrom_ClientId() As String
		Get
			Return Me._SourceFrom_ClientId
		End Get
		Set
			If (String.Equals(Me._SourceFrom_ClientId, value) = false) Then
				Me.OnSourceFrom_ClientIdChanging(value)
				Me.SendPropertyChanging
				Me._SourceFrom_ClientId = value
				Me.SendPropertyChanged("SourceFrom_ClientId")
				Me.OnSourceFrom_ClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20)")>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastSync", DbType:="DateTime")>  _
	Public Property LastSync() As System.Nullable(Of Date)
		Get
			Return Me._LastSync
		End Get
		Set
			If (Me._LastSync.Equals(value) = false) Then
				Me.OnLastSyncChanging(value)
				Me.SendPropertyChanging
				Me._LastSync = value
				Me.SendPropertyChanged("LastSync")
				Me.OnLastSyncChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblCalendar")>  _
Partial Public Class t360_tblCalendar
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Calendar_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Calendar_Year As String
	
	Private _Calendar_Name As String
	
	Private _Calendar_FromDate As Date
	
	Private _Calendar_ToDate As System.Nullable(Of Date)
	
	Private _Calendar_Type As Byte
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _IsActive As Boolean
	
	Private _ClientId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCalendar_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnCalendar_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnCalendar_YearChanging(value As String)
    End Sub
    Partial Private Sub OnCalendar_YearChanged()
    End Sub
    Partial Private Sub OnCalendar_NameChanging(value As String)
    End Sub
    Partial Private Sub OnCalendar_NameChanged()
    End Sub
    Partial Private Sub OnCalendar_FromDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCalendar_FromDateChanged()
    End Sub
    Partial Private Sub OnCalendar_ToDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCalendar_ToDateChanged()
    End Sub
    Partial Private Sub OnCalendar_TypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnCalendar_TypeChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Calendar_Id() As System.Guid
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If ((Me._Calendar_Id = value)  _
						= false) Then
				Me.OnCalendar_IdChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Id = value
				Me.SendPropertyChanged("Calendar_Id")
				Me.OnCalendar_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Year", DbType:="VarChar(4) NOT NULL", CanBeNull:=false)>  _
	Public Property Calendar_Year() As String
		Get
			Return Me._Calendar_Year
		End Get
		Set
			If (String.Equals(Me._Calendar_Year, value) = false) Then
				Me.OnCalendar_YearChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Year = value
				Me.SendPropertyChanged("Calendar_Year")
				Me.OnCalendar_YearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Calendar_Name() As String
		Get
			Return Me._Calendar_Name
		End Get
		Set
			If (String.Equals(Me._Calendar_Name, value) = false) Then
				Me.OnCalendar_NameChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Name = value
				Me.SendPropertyChanged("Calendar_Name")
				Me.OnCalendar_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_FromDate", DbType:="DateTime NOT NULL")>  _
	Public Property Calendar_FromDate() As Date
		Get
			Return Me._Calendar_FromDate
		End Get
		Set
			If ((Me._Calendar_FromDate = value)  _
						= false) Then
				Me.OnCalendar_FromDateChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_FromDate = value
				Me.SendPropertyChanged("Calendar_FromDate")
				Me.OnCalendar_FromDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_ToDate", DbType:="DateTime")>  _
	Public Property Calendar_ToDate() As System.Nullable(Of Date)
		Get
			Return Me._Calendar_ToDate
		End Get
		Set
			If (Me._Calendar_ToDate.Equals(value) = false) Then
				Me.OnCalendar_ToDateChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_ToDate = value
				Me.SendPropertyChanged("Calendar_ToDate")
				Me.OnCalendar_ToDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Type", DbType:="TinyInt NOT NULL")>  _
	Public Property Calendar_Type() As Byte
		Get
			Return Me._Calendar_Type
		End Get
		Set
			If ((Me._Calendar_Type = value)  _
						= false) Then
				Me.OnCalendar_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Type = value
				Me.SendPropertyChanged("Calendar_Type")
				Me.OnCalendar_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblLevel")>  _
Partial Public Class tblLevel
	
	Private _Level_Id As System.Nullable(Of System.Guid)
	
	Private _Level_Name As String
	
	Private _IsActive As Boolean
	
	Private _Level As System.Nullable(Of Integer)
	
	Private _Level_ShortName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Level_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Level_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Level_Id
		End Get
		Set
			If (Me._Level_Id.Equals(value) = false) Then
				Me._Level_Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Level_Name", DbType:="VarChar(255)")>  _
	Public Property Level_Name() As String
		Get
			Return Me._Level_Name
		End Get
		Set
			If (String.Equals(Me._Level_Name, value) = false) Then
				Me._Level_Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me._IsActive = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Level]", Storage:="_Level", DbType:="Int")>  _
	Public Property Level() As System.Nullable(Of Integer)
		Get
			Return Me._Level
		End Get
		Set
			If (Me._Level.Equals(value) = false) Then
				Me._Level = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Level_ShortName", DbType:="VarChar(50)")>  _
	Public Property Level_ShortName() As String
		Get
			Return Me._Level_ShortName
		End Get
		Set
			If (String.Equals(Me._Level_ShortName, value) = false) Then
				Me._Level_ShortName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUser")>  _
Partial Public Class tblUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As Integer
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _UserName As String
	
	Private _Password As String
	
	Private _SchoolId As Integer
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _GUID As System.Guid
	
	Private _IsAllowMenuManageUserSchool As Boolean
	
	Private _IsAllowMenuManageUserAdmin As Boolean
	
	Private _IsAllowMenuAdminLog As Boolean
	
	Private _IsAllowMenuContact As Boolean
	
	Private _IsAllowMenuSetEmail As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnSchoolIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSchoolIdChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnIsAllowMenuManageUserSchoolChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAllowMenuManageUserSchoolChanged()
    End Sub
    Partial Private Sub OnIsAllowMenuManageUserAdminChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAllowMenuManageUserAdminChanged()
    End Sub
    Partial Private Sub OnIsAllowMenuAdminLogChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAllowMenuAdminLogChanged()
    End Sub
    Partial Private Sub OnIsAllowMenuContactChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAllowMenuContactChanged()
    End Sub
    Partial Private Sub OnIsAllowMenuSetEmailChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAllowMenuSetEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As Integer
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolId", DbType:="Int NOT NULL")>  _
	Public Property SchoolId() As Integer
		Get
			Return Me._SchoolId
		End Get
		Set
			If ((Me._SchoolId = value)  _
						= false) Then
				Me.OnSchoolIdChanging(value)
				Me.SendPropertyChanging
				Me._SchoolId = value
				Me.SendPropertyChanged("SchoolId")
				Me.OnSchoolIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GUID() As System.Guid
		Get
			Return Me._GUID
		End Get
		Set
			If ((Me._GUID = value)  _
						= false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAllowMenuManageUserSchool", DbType:="Bit NOT NULL")>  _
	Public Property IsAllowMenuManageUserSchool() As Boolean
		Get
			Return Me._IsAllowMenuManageUserSchool
		End Get
		Set
			If ((Me._IsAllowMenuManageUserSchool = value)  _
						= false) Then
				Me.OnIsAllowMenuManageUserSchoolChanging(value)
				Me.SendPropertyChanging
				Me._IsAllowMenuManageUserSchool = value
				Me.SendPropertyChanged("IsAllowMenuManageUserSchool")
				Me.OnIsAllowMenuManageUserSchoolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAllowMenuManageUserAdmin", DbType:="Bit NOT NULL")>  _
	Public Property IsAllowMenuManageUserAdmin() As Boolean
		Get
			Return Me._IsAllowMenuManageUserAdmin
		End Get
		Set
			If ((Me._IsAllowMenuManageUserAdmin = value)  _
						= false) Then
				Me.OnIsAllowMenuManageUserAdminChanging(value)
				Me.SendPropertyChanging
				Me._IsAllowMenuManageUserAdmin = value
				Me.SendPropertyChanged("IsAllowMenuManageUserAdmin")
				Me.OnIsAllowMenuManageUserAdminChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAllowMenuAdminLog", DbType:="Bit NOT NULL")>  _
	Public Property IsAllowMenuAdminLog() As Boolean
		Get
			Return Me._IsAllowMenuAdminLog
		End Get
		Set
			If ((Me._IsAllowMenuAdminLog = value)  _
						= false) Then
				Me.OnIsAllowMenuAdminLogChanging(value)
				Me.SendPropertyChanging
				Me._IsAllowMenuAdminLog = value
				Me.SendPropertyChanged("IsAllowMenuAdminLog")
				Me.OnIsAllowMenuAdminLogChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAllowMenuContact", DbType:="Bit NOT NULL")>  _
	Public Property IsAllowMenuContact() As Boolean
		Get
			Return Me._IsAllowMenuContact
		End Get
		Set
			If ((Me._IsAllowMenuContact = value)  _
						= false) Then
				Me.OnIsAllowMenuContactChanging(value)
				Me.SendPropertyChanging
				Me._IsAllowMenuContact = value
				Me.SendPropertyChanged("IsAllowMenuContact")
				Me.OnIsAllowMenuContactChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAllowMenuSetEmail", DbType:="Bit NOT NULL")>  _
	Public Property IsAllowMenuSetEmail() As Boolean
		Get
			Return Me._IsAllowMenuSetEmail
		End Get
		Set
			If ((Me._IsAllowMenuSetEmail = value)  _
						= false) Then
				Me.OnIsAllowMenuSetEmailChanging(value)
				Me.SendPropertyChanging
				Me._IsAllowMenuSetEmail = value
				Me.SendPropertyChanged("IsAllowMenuSetEmail")
				Me.OnIsAllowMenuSetEmailChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUserSubjectClass")>  _
Partial Public Class tblUserSubjectClass
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _USCId As Integer
	
	Private _UserIdOld As Integer
	
	Private _Detailid As Integer
	
	Private _SubjectId As Integer
	
	Private _ClassId As String
	
	Private _GroupSubjectId As System.Guid
	
	Private _LevelId As System.Nullable(Of System.Guid)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _GUID As System.Guid
	
	Private _UserId As System.Guid
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUSCIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnUSCIdChanged()
    End Sub
    Partial Private Sub OnUserIdOldChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdOldChanged()
    End Sub
    Partial Private Sub OnDetailidChanging(value As Integer)
    End Sub
    Partial Private Sub OnDetailidChanged()
    End Sub
    Partial Private Sub OnSubjectIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSubjectIdChanged()
    End Sub
    Partial Private Sub OnClassIdChanging(value As String)
    End Sub
    Partial Private Sub OnClassIdChanged()
    End Sub
    Partial Private Sub OnGroupSubjectIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupSubjectIdChanged()
    End Sub
    Partial Private Sub OnLevelIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnLevelIdChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USCId", DbType:="Int NOT NULL")>  _
	Public Property USCId() As Integer
		Get
			Return Me._USCId
		End Get
		Set
			If ((Me._USCId = value)  _
						= false) Then
				Me.OnUSCIdChanging(value)
				Me.SendPropertyChanging
				Me._USCId = value
				Me.SendPropertyChanged("USCId")
				Me.OnUSCIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserIdOld", DbType:="Int NOT NULL")>  _
	Public Property UserIdOld() As Integer
		Get
			Return Me._UserIdOld
		End Get
		Set
			If ((Me._UserIdOld = value)  _
						= false) Then
				Me.OnUserIdOldChanging(value)
				Me.SendPropertyChanging
				Me._UserIdOld = value
				Me.SendPropertyChanged("UserIdOld")
				Me.OnUserIdOldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Detailid", DbType:="Int NOT NULL")>  _
	Public Property Detailid() As Integer
		Get
			Return Me._Detailid
		End Get
		Set
			If ((Me._Detailid = value)  _
						= false) Then
				Me.OnDetailidChanging(value)
				Me.SendPropertyChanging
				Me._Detailid = value
				Me.SendPropertyChanged("Detailid")
				Me.OnDetailidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubjectId", DbType:="Int NOT NULL")>  _
	Public Property SubjectId() As Integer
		Get
			Return Me._SubjectId
		End Get
		Set
			If ((Me._SubjectId = value)  _
						= false) Then
				Me.OnSubjectIdChanging(value)
				Me.SendPropertyChanging
				Me._SubjectId = value
				Me.SendPropertyChanged("SubjectId")
				Me.OnSubjectIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassId", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property ClassId() As String
		Get
			Return Me._ClassId
		End Get
		Set
			If (String.Equals(Me._ClassId, value) = false) Then
				Me.OnClassIdChanging(value)
				Me.SendPropertyChanging
				Me._ClassId = value
				Me.SendPropertyChanged("ClassId")
				Me.OnClassIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubjectId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupSubjectId() As System.Guid
		Get
			Return Me._GroupSubjectId
		End Get
		Set
			If ((Me._GroupSubjectId = value)  _
						= false) Then
				Me.OnGroupSubjectIdChanging(value)
				Me.SendPropertyChanging
				Me._GroupSubjectId = value
				Me.SendPropertyChanged("GroupSubjectId")
				Me.OnGroupSubjectIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LevelId", DbType:="UniqueIdentifier")>  _
	Public Property LevelId() As System.Nullable(Of System.Guid)
		Get
			Return Me._LevelId
		End Get
		Set
			If (Me._LevelId.Equals(value) = false) Then
				Me.OnLevelIdChanging(value)
				Me.SendPropertyChanging
				Me._LevelId = value
				Me.SendPropertyChanged("LevelId")
				Me.OnLevelIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property GUID() As System.Guid
		Get
			Return Me._GUID
		End Get
		Set
			If ((Me._GUID = value)  _
						= false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTabletRepair")>  _
Partial Public Class t360_tblTabletRepair
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _School_Code As String
	
	Private _TON_Id As System.Guid
	
	Private _TLR_RepairDate As Date
	
	Private _TLR_ReturnDate As System.Nullable(Of Date)
	
	Private _TLR_Location As String
	
	Private _TLR_DocNumber As String
	
	Private _LastUpdate As Date
	
	Private _IsActive As Boolean
	
	Private _ClientId As String
	
	Private _t360_tblTabletOwner As EntityRef(Of t360_tblTabletOwner)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnTON_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTON_IdChanged()
    End Sub
    Partial Private Sub OnTLR_RepairDateChanging(value As Date)
    End Sub
    Partial Private Sub OnTLR_RepairDateChanged()
    End Sub
    Partial Private Sub OnTLR_ReturnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTLR_ReturnDateChanged()
    End Sub
    Partial Private Sub OnTLR_LocationChanging(value As String)
    End Sub
    Partial Private Sub OnTLR_LocationChanged()
    End Sub
    Partial Private Sub OnTLR_DocNumberChanging(value As String)
    End Sub
    Partial Private Sub OnTLR_DocNumberChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblTabletOwner = CType(Nothing, EntityRef(Of t360_tblTabletOwner))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TON_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TON_Id() As System.Guid
		Get
			Return Me._TON_Id
		End Get
		Set
			If ((Me._TON_Id = value)  _
						= false) Then
				If Me._t360_tblTabletOwner.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTON_IdChanging(value)
				Me.SendPropertyChanging
				Me._TON_Id = value
				Me.SendPropertyChanged("TON_Id")
				Me.OnTON_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLR_RepairDate", DbType:="SmallDateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TLR_RepairDate() As Date
		Get
			Return Me._TLR_RepairDate
		End Get
		Set
			If ((Me._TLR_RepairDate = value)  _
						= false) Then
				Me.OnTLR_RepairDateChanging(value)
				Me.SendPropertyChanging
				Me._TLR_RepairDate = value
				Me.SendPropertyChanged("TLR_RepairDate")
				Me.OnTLR_RepairDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLR_ReturnDate", DbType:="SmallDateTime")>  _
	Public Property TLR_ReturnDate() As System.Nullable(Of Date)
		Get
			Return Me._TLR_ReturnDate
		End Get
		Set
			If (Me._TLR_ReturnDate.Equals(value) = false) Then
				Me.OnTLR_ReturnDateChanging(value)
				Me.SendPropertyChanging
				Me._TLR_ReturnDate = value
				Me.SendPropertyChanged("TLR_ReturnDate")
				Me.OnTLR_ReturnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLR_Location", DbType:="VarChar(255)")>  _
	Public Property TLR_Location() As String
		Get
			Return Me._TLR_Location
		End Get
		Set
			If (String.Equals(Me._TLR_Location, value) = false) Then
				Me.OnTLR_LocationChanging(value)
				Me.SendPropertyChanging
				Me._TLR_Location = value
				Me.SendPropertyChanged("TLR_Location")
				Me.OnTLR_LocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLR_DocNumber", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TLR_DocNumber() As String
		Get
			Return Me._TLR_DocNumber
		End Get
		Set
			If (String.Equals(Me._TLR_DocNumber, value) = false) Then
				Me.OnTLR_DocNumberChanging(value)
				Me.SendPropertyChanging
				Me._TLR_DocNumber = value
				Me.SendPropertyChanged("TLR_DocNumber")
				Me.OnTLR_DocNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTabletOwner_t360_tblTabletRepair", Storage:="_t360_tblTabletOwner", ThisKey:="TON_Id", OtherKey:="TON_Id", IsForeignKey:=true)>  _
	Public Property t360_tblTabletOwner() As t360_tblTabletOwner
		Get
			Return Me._t360_tblTabletOwner.Entity
		End Get
		Set
			Dim previousValue As t360_tblTabletOwner = Me._t360_tblTabletOwner.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTabletOwner.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTabletOwner.Entity = Nothing
					previousValue.t360_tblTabletRepairs.Remove(Me)
				End If
				Me._t360_tblTabletOwner.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblTabletRepairs.Add(Me)
					Me._TON_Id = value.TON_Id
				Else
					Me._TON_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblTabletOwner")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblUpLevelDetail")>  _
Partial Public Class t360_tblUpLevelDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ULD_Id As System.Guid
	
	Private _UpLevel_Id As System.Nullable(Of System.Guid)
	
	Private _School_Code As String
	
	Private _Student_Id As System.Nullable(Of System.Guid)
	
	Private _Class_Name As String
	
	Private _Room_Id As System.Nullable(Of System.Guid)
	
	Private _Student_CurrentRoomId As System.Nullable(Of System.Guid)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _IsConfirm As System.Nullable(Of Boolean)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _Student_Status As System.Nullable(Of Byte)
	
	Private _Student_CurrentNoInRoomOld As System.Nullable(Of Byte)
	
	Private _Student_CurrentNoInRoom As System.Nullable(Of Byte)
	
	Private _Student_Code As String
	
	Private _Student_PrefixName As String
	
	Private _Student_FirstName As String
	
	Private _Student_LastName As String
	
	Private _Student_NickName As String
	
	Private _Student_FatherName As String
	
	Private _Student_FatherPhone As String
	
	Private _Student_MotherName As String
	
	Private _Student_MotherPhone As String
	
	Private _Student_Phone As String
	
	Private _Student_Soi As String
	
	Private _Student_Street As String
	
	Private _Student_Number As String
	
	Private _SubDistrict_Id As System.Nullable(Of Integer)
	
	Private _District_Id As System.Nullable(Of Integer)
	
	Private _Province_Id As System.Nullable(Of Integer)
	
	Private _sex As System.Nullable(Of Byte)
	
	Private _ClientId As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnULD_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnULD_IdChanged()
    End Sub
    Partial Private Sub OnUpLevel_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUpLevel_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnStudent_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnStudent_IdChanged()
    End Sub
    Partial Private Sub OnClass_NameChanging(value As String)
    End Sub
    Partial Private Sub OnClass_NameChanged()
    End Sub
    Partial Private Sub OnRoom_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRoom_IdChanged()
    End Sub
    Partial Private Sub OnStudent_CurrentRoomIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnStudent_CurrentRoomIdChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnIsConfirmChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsConfirmChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnStudent_StatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnStudent_StatusChanged()
    End Sub
    Partial Private Sub OnStudent_CurrentNoInRoomOldChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnStudent_CurrentNoInRoomOldChanged()
    End Sub
    Partial Private Sub OnStudent_CurrentNoInRoomChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnStudent_CurrentNoInRoomChanged()
    End Sub
    Partial Private Sub OnStudent_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_CodeChanged()
    End Sub
    Partial Private Sub OnStudent_PrefixNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_PrefixNameChanged()
    End Sub
    Partial Private Sub OnStudent_FirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_FirstNameChanged()
    End Sub
    Partial Private Sub OnStudent_LastNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_LastNameChanged()
    End Sub
    Partial Private Sub OnStudent_NickNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_NickNameChanged()
    End Sub
    Partial Private Sub OnStudent_FatherNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_FatherNameChanged()
    End Sub
    Partial Private Sub OnStudent_FatherPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_FatherPhoneChanged()
    End Sub
    Partial Private Sub OnStudent_MotherNameChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_MotherNameChanged()
    End Sub
    Partial Private Sub OnStudent_MotherPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_MotherPhoneChanged()
    End Sub
    Partial Private Sub OnStudent_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_PhoneChanged()
    End Sub
    Partial Private Sub OnStudent_SoiChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_SoiChanged()
    End Sub
    Partial Private Sub OnStudent_StreetChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_StreetChanged()
    End Sub
    Partial Private Sub OnStudent_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnStudent_NumberChanged()
    End Sub
    Partial Private Sub OnSubDistrict_IdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubDistrict_IdChanged()
    End Sub
    Partial Private Sub OnDistrict_IdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDistrict_IdChanged()
    End Sub
    Partial Private Sub OnProvince_IdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProvince_IdChanged()
    End Sub
    Partial Private Sub OnsexChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnsexChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ULD_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ULD_Id() As System.Guid
		Get
			Return Me._ULD_Id
		End Get
		Set
			If ((Me._ULD_Id = value)  _
						= false) Then
				Me.OnULD_IdChanging(value)
				Me.SendPropertyChanging
				Me._ULD_Id = value
				Me.SendPropertyChanged("ULD_Id")
				Me.OnULD_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpLevel_Id", DbType:="UniqueIdentifier")>  _
	Public Property UpLevel_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._UpLevel_Id
		End Get
		Set
			If (Me._UpLevel_Id.Equals(value) = false) Then
				Me.OnUpLevel_IdChanging(value)
				Me.SendPropertyChanging
				Me._UpLevel_Id = value
				Me.SendPropertyChanged("UpLevel_Id")
				Me.OnUpLevel_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20)")>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Id", DbType:="UniqueIdentifier")>  _
	Public Property Student_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Student_Id
		End Get
		Set
			If (Me._Student_Id.Equals(value) = false) Then
				Me.OnStudent_IdChanging(value)
				Me.SendPropertyChanging
				Me._Student_Id = value
				Me.SendPropertyChanged("Student_Id")
				Me.OnStudent_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class_Name", DbType:="VarChar(50)")>  _
	Public Property Class_Name() As String
		Get
			Return Me._Class_Name
		End Get
		Set
			If (String.Equals(Me._Class_Name, value) = false) Then
				Me.OnClass_NameChanging(value)
				Me.SendPropertyChanging
				Me._Class_Name = value
				Me.SendPropertyChanged("Class_Name")
				Me.OnClass_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room_Id", DbType:="UniqueIdentifier")>  _
	Public Property Room_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Room_Id
		End Get
		Set
			If (Me._Room_Id.Equals(value) = false) Then
				Me.OnRoom_IdChanging(value)
				Me.SendPropertyChanging
				Me._Room_Id = value
				Me.SendPropertyChanged("Room_Id")
				Me.OnRoom_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentRoomId", DbType:="UniqueIdentifier")>  _
	Public Property Student_CurrentRoomId() As System.Nullable(Of System.Guid)
		Get
			Return Me._Student_CurrentRoomId
		End Get
		Set
			If (Me._Student_CurrentRoomId.Equals(value) = false) Then
				Me.OnStudent_CurrentRoomIdChanging(value)
				Me.SendPropertyChanging
				Me._Student_CurrentRoomId = value
				Me.SendPropertyChanged("Student_CurrentRoomId")
				Me.OnStudent_CurrentRoomIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsConfirm", DbType:="Bit")>  _
	Public Property IsConfirm() As System.Nullable(Of Boolean)
		Get
			Return Me._IsConfirm
		End Get
		Set
			If (Me._IsConfirm.Equals(value) = false) Then
				Me.OnIsConfirmChanging(value)
				Me.SendPropertyChanging
				Me._IsConfirm = value
				Me.SendPropertyChanged("IsConfirm")
				Me.OnIsConfirmChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Status", DbType:="TinyInt")>  _
	Public Property Student_Status() As System.Nullable(Of Byte)
		Get
			Return Me._Student_Status
		End Get
		Set
			If (Me._Student_Status.Equals(value) = false) Then
				Me.OnStudent_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Student_Status = value
				Me.SendPropertyChanged("Student_Status")
				Me.OnStudent_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentNoInRoomOld", DbType:="TinyInt")>  _
	Public Property Student_CurrentNoInRoomOld() As System.Nullable(Of Byte)
		Get
			Return Me._Student_CurrentNoInRoomOld
		End Get
		Set
			If (Me._Student_CurrentNoInRoomOld.Equals(value) = false) Then
				Me.OnStudent_CurrentNoInRoomOldChanging(value)
				Me.SendPropertyChanging
				Me._Student_CurrentNoInRoomOld = value
				Me.SendPropertyChanged("Student_CurrentNoInRoomOld")
				Me.OnStudent_CurrentNoInRoomOldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_CurrentNoInRoom", DbType:="TinyInt")>  _
	Public Property Student_CurrentNoInRoom() As System.Nullable(Of Byte)
		Get
			Return Me._Student_CurrentNoInRoom
		End Get
		Set
			If (Me._Student_CurrentNoInRoom.Equals(value) = false) Then
				Me.OnStudent_CurrentNoInRoomChanging(value)
				Me.SendPropertyChanging
				Me._Student_CurrentNoInRoom = value
				Me.SendPropertyChanged("Student_CurrentNoInRoom")
				Me.OnStudent_CurrentNoInRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Code", DbType:="VarChar(50)")>  _
	Public Property Student_Code() As String
		Get
			Return Me._Student_Code
		End Get
		Set
			If (String.Equals(Me._Student_Code, value) = false) Then
				Me.OnStudent_CodeChanging(value)
				Me.SendPropertyChanging
				Me._Student_Code = value
				Me.SendPropertyChanged("Student_Code")
				Me.OnStudent_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_PrefixName", DbType:="VarChar(50)")>  _
	Public Property Student_PrefixName() As String
		Get
			Return Me._Student_PrefixName
		End Get
		Set
			If (String.Equals(Me._Student_PrefixName, value) = false) Then
				Me.OnStudent_PrefixNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_PrefixName = value
				Me.SendPropertyChanged("Student_PrefixName")
				Me.OnStudent_PrefixNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_FirstName", DbType:="VarChar(50)")>  _
	Public Property Student_FirstName() As String
		Get
			Return Me._Student_FirstName
		End Get
		Set
			If (String.Equals(Me._Student_FirstName, value) = false) Then
				Me.OnStudent_FirstNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_FirstName = value
				Me.SendPropertyChanged("Student_FirstName")
				Me.OnStudent_FirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_LastName", DbType:="VarChar(50)")>  _
	Public Property Student_LastName() As String
		Get
			Return Me._Student_LastName
		End Get
		Set
			If (String.Equals(Me._Student_LastName, value) = false) Then
				Me.OnStudent_LastNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_LastName = value
				Me.SendPropertyChanged("Student_LastName")
				Me.OnStudent_LastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_NickName", DbType:="VarChar(20)")>  _
	Public Property Student_NickName() As String
		Get
			Return Me._Student_NickName
		End Get
		Set
			If (String.Equals(Me._Student_NickName, value) = false) Then
				Me.OnStudent_NickNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_NickName = value
				Me.SendPropertyChanged("Student_NickName")
				Me.OnStudent_NickNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_FatherName", DbType:="VarChar(100)")>  _
	Public Property Student_FatherName() As String
		Get
			Return Me._Student_FatherName
		End Get
		Set
			If (String.Equals(Me._Student_FatherName, value) = false) Then
				Me.OnStudent_FatherNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_FatherName = value
				Me.SendPropertyChanged("Student_FatherName")
				Me.OnStudent_FatherNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_FatherPhone", DbType:="VarChar(50)")>  _
	Public Property Student_FatherPhone() As String
		Get
			Return Me._Student_FatherPhone
		End Get
		Set
			If (String.Equals(Me._Student_FatherPhone, value) = false) Then
				Me.OnStudent_FatherPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Student_FatherPhone = value
				Me.SendPropertyChanged("Student_FatherPhone")
				Me.OnStudent_FatherPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_MotherName", DbType:="VarChar(100)")>  _
	Public Property Student_MotherName() As String
		Get
			Return Me._Student_MotherName
		End Get
		Set
			If (String.Equals(Me._Student_MotherName, value) = false) Then
				Me.OnStudent_MotherNameChanging(value)
				Me.SendPropertyChanging
				Me._Student_MotherName = value
				Me.SendPropertyChanged("Student_MotherName")
				Me.OnStudent_MotherNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_MotherPhone", DbType:="VarChar(50)")>  _
	Public Property Student_MotherPhone() As String
		Get
			Return Me._Student_MotherPhone
		End Get
		Set
			If (String.Equals(Me._Student_MotherPhone, value) = false) Then
				Me.OnStudent_MotherPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Student_MotherPhone = value
				Me.SendPropertyChanged("Student_MotherPhone")
				Me.OnStudent_MotherPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Phone", DbType:="VarChar(50)")>  _
	Public Property Student_Phone() As String
		Get
			Return Me._Student_Phone
		End Get
		Set
			If (String.Equals(Me._Student_Phone, value) = false) Then
				Me.OnStudent_PhoneChanging(value)
				Me.SendPropertyChanging
				Me._Student_Phone = value
				Me.SendPropertyChanged("Student_Phone")
				Me.OnStudent_PhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Soi", DbType:="VarChar(100)")>  _
	Public Property Student_Soi() As String
		Get
			Return Me._Student_Soi
		End Get
		Set
			If (String.Equals(Me._Student_Soi, value) = false) Then
				Me.OnStudent_SoiChanging(value)
				Me.SendPropertyChanging
				Me._Student_Soi = value
				Me.SendPropertyChanged("Student_Soi")
				Me.OnStudent_SoiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Street", DbType:="VarChar(100)")>  _
	Public Property Student_Street() As String
		Get
			Return Me._Student_Street
		End Get
		Set
			If (String.Equals(Me._Student_Street, value) = false) Then
				Me.OnStudent_StreetChanging(value)
				Me.SendPropertyChanging
				Me._Student_Street = value
				Me.SendPropertyChanged("Student_Street")
				Me.OnStudent_StreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Student_Number", DbType:="VarChar(100)")>  _
	Public Property Student_Number() As String
		Get
			Return Me._Student_Number
		End Get
		Set
			If (String.Equals(Me._Student_Number, value) = false) Then
				Me.OnStudent_NumberChanging(value)
				Me.SendPropertyChanging
				Me._Student_Number = value
				Me.SendPropertyChanged("Student_Number")
				Me.OnStudent_NumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubDistrict_Id", DbType:="Int")>  _
	Public Property SubDistrict_Id() As System.Nullable(Of Integer)
		Get
			Return Me._SubDistrict_Id
		End Get
		Set
			If (Me._SubDistrict_Id.Equals(value) = false) Then
				Me.OnSubDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._SubDistrict_Id = value
				Me.SendPropertyChanged("SubDistrict_Id")
				Me.OnSubDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District_Id", DbType:="Int")>  _
	Public Property District_Id() As System.Nullable(Of Integer)
		Get
			Return Me._District_Id
		End Get
		Set
			If (Me._District_Id.Equals(value) = false) Then
				Me.OnDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._District_Id = value
				Me.SendPropertyChanged("District_Id")
				Me.OnDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province_Id", DbType:="Int")>  _
	Public Property Province_Id() As System.Nullable(Of Integer)
		Get
			Return Me._Province_Id
		End Get
		Set
			If (Me._Province_Id.Equals(value) = false) Then
				Me.OnProvince_IdChanging(value)
				Me.SendPropertyChanging
				Me._Province_Id = value
				Me.SendPropertyChanged("Province_Id")
				Me.OnProvince_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sex", DbType:="TinyInt")>  _
	Public Property sex() As System.Nullable(Of Byte)
		Get
			Return Me._sex
		End Get
		Set
			If (Me._sex.Equals(value) = false) Then
				Me.OnsexChanging(value)
				Me.SendPropertyChanging
				Me._sex = value
				Me.SendPropertyChanged("sex")
				Me.OnsexChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblLog")>  _
Partial Public Class tblLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Log_Id As System.Guid
	
	Private _ClientId As String
	
	Private _LogType As Byte
	
	Private _Description As String
	
	Private _IsManualAction As System.Nullable(Of Boolean)
	
	Private _UserIdOld As Integer
	
	Private _IsActive As System.Nullable(Of Integer)
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _LinkID As System.Nullable(Of Integer)
	
	Private _UserId As System.Guid
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
	Private _School_Code As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLog_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLog_IdChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnLogTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnLogTypeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIsManualActionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsManualActionChanged()
    End Sub
    Partial Private Sub OnUserIdOldChanging(value As Integer)
    End Sub
    Partial Private Sub OnUserIdOldChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnLinkIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLinkIDChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnCalendar_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCalendar_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Log_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Log_Id() As System.Guid
		Get
			Return Me._Log_Id
		End Get
		Set
			If ((Me._Log_Id = value)  _
						= false) Then
				Me.OnLog_IdChanging(value)
				Me.SendPropertyChanging
				Me._Log_Id = value
				Me.SendPropertyChanged("Log_Id")
				Me.OnLog_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogType", DbType:="TinyInt NOT NULL")>  _
	Public Property LogType() As Byte
		Get
			Return Me._LogType
		End Get
		Set
			If ((Me._LogType = value)  _
						= false) Then
				Me.OnLogTypeChanging(value)
				Me.SendPropertyChanging
				Me._LogType = value
				Me.SendPropertyChanged("LogType")
				Me.OnLogTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsManualAction", DbType:="Bit")>  _
	Public Property IsManualAction() As System.Nullable(Of Boolean)
		Get
			Return Me._IsManualAction
		End Get
		Set
			If (Me._IsManualAction.Equals(value) = false) Then
				Me.OnIsManualActionChanging(value)
				Me.SendPropertyChanging
				Me._IsManualAction = value
				Me.SendPropertyChanged("IsManualAction")
				Me.OnIsManualActionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserIdOld", DbType:="Int NOT NULL")>  _
	Public Property UserIdOld() As Integer
		Get
			Return Me._UserIdOld
		End Get
		Set
			If ((Me._UserIdOld = value)  _
						= false) Then
				Me.OnUserIdOldChanging(value)
				Me.SendPropertyChanging
				Me._UserIdOld = value
				Me.SendPropertyChanged("UserIdOld")
				Me.OnUserIdOldChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Int")>  _
	Public Property IsActive() As System.Nullable(Of Integer)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LinkID", DbType:="Int")>  _
	Public Property LinkID() As System.Nullable(Of Integer)
		Get
			Return Me._LinkID
		End Get
		Set
			If (Me._LinkID.Equals(value) = false) Then
				Me.OnLinkIDChanging(value)
				Me.SendPropertyChanging
				Me._LinkID = value
				Me.SendPropertyChanged("LinkID")
				Me.OnLinkIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me.OnCalendar_IdChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Id = value
				Me.SendPropertyChanged("Calendar_Id")
				Me.OnCalendar_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20)")>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTempTeacher")>  _
Partial Public Class t360_tblTempTeacher
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Is_Check As System.Nullable(Of Boolean)
	
	Private _Record_Status As System.Nullable(Of Byte)
	
	Private _Validate_Status As System.Nullable(Of Byte)
	
	Private _Validate_StatusMessage As String
	
	Private _Validate_Message As String
	
	Private _Teacher_Information As String
	
	Private _School_Code As String
	
	Private _Teacher_Id As System.Nullable(Of System.Guid)
	
	Private _Teacher_Code As String
	
	Private _Teacher_PrefixName As String
	
	Private _Teacher_FirstName As String
	
	Private _Teacher_LastName As String
	
	Private _Teacher_Phone As String
	
	Private _Teacher_Status As System.Nullable(Of Byte)
	
	Private _Teacher_CurrentClass As String
	
	Private _Teacher_CurrentRoom As String
	
	Private _Teacher_Number As String
	
	Private _Teacher_Soi As String
	
	Private _Teacher_Street As String
	
	Private _SubDistrict_Id As System.Nullable(Of Integer)
	
	Private _District_Id As System.Nullable(Of Integer)
	
	Private _Province_Id As System.Nullable(Of Integer)
	
	Private _Teacher_IsActive As System.Nullable(Of Boolean)
	
	Private _UserName As String
	
	Private _Password As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIs_CheckChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIs_CheckChanged()
    End Sub
    Partial Private Sub OnRecord_StatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnRecord_StatusChanged()
    End Sub
    Partial Private Sub OnValidate_StatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnValidate_StatusChanged()
    End Sub
    Partial Private Sub OnValidate_StatusMessageChanging(value As String)
    End Sub
    Partial Private Sub OnValidate_StatusMessageChanged()
    End Sub
    Partial Private Sub OnValidate_MessageChanging(value As String)
    End Sub
    Partial Private Sub OnValidate_MessageChanged()
    End Sub
    Partial Private Sub OnTeacher_InformationChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_InformationChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnTeacher_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnTeacher_IdChanged()
    End Sub
    Partial Private Sub OnTeacher_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_CodeChanged()
    End Sub
    Partial Private Sub OnTeacher_PrefixNameChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_PrefixNameChanged()
    End Sub
    Partial Private Sub OnTeacher_FirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_FirstNameChanged()
    End Sub
    Partial Private Sub OnTeacher_LastNameChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_LastNameChanged()
    End Sub
    Partial Private Sub OnTeacher_PhoneChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_PhoneChanged()
    End Sub
    Partial Private Sub OnTeacher_StatusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnTeacher_StatusChanged()
    End Sub
    Partial Private Sub OnTeacher_CurrentClassChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_CurrentClassChanged()
    End Sub
    Partial Private Sub OnTeacher_CurrentRoomChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_CurrentRoomChanged()
    End Sub
    Partial Private Sub OnTeacher_NumberChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_NumberChanged()
    End Sub
    Partial Private Sub OnTeacher_SoiChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_SoiChanged()
    End Sub
    Partial Private Sub OnTeacher_StreetChanging(value As String)
    End Sub
    Partial Private Sub OnTeacher_StreetChanged()
    End Sub
    Partial Private Sub OnSubDistrict_IdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSubDistrict_IdChanged()
    End Sub
    Partial Private Sub OnDistrict_IdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDistrict_IdChanged()
    End Sub
    Partial Private Sub OnProvince_IdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProvince_IdChanged()
    End Sub
    Partial Private Sub OnTeacher_IsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTeacher_IsActiveChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Is_Check", DbType:="Bit")>  _
	Public Property Is_Check() As System.Nullable(Of Boolean)
		Get
			Return Me._Is_Check
		End Get
		Set
			If (Me._Is_Check.Equals(value) = false) Then
				Me.OnIs_CheckChanging(value)
				Me.SendPropertyChanging
				Me._Is_Check = value
				Me.SendPropertyChanged("Is_Check")
				Me.OnIs_CheckChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Record_Status", DbType:="TinyInt")>  _
	Public Property Record_Status() As System.Nullable(Of Byte)
		Get
			Return Me._Record_Status
		End Get
		Set
			If (Me._Record_Status.Equals(value) = false) Then
				Me.OnRecord_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Record_Status = value
				Me.SendPropertyChanged("Record_Status")
				Me.OnRecord_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validate_Status", DbType:="TinyInt")>  _
	Public Property Validate_Status() As System.Nullable(Of Byte)
		Get
			Return Me._Validate_Status
		End Get
		Set
			If (Me._Validate_Status.Equals(value) = false) Then
				Me.OnValidate_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Validate_Status = value
				Me.SendPropertyChanged("Validate_Status")
				Me.OnValidate_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validate_StatusMessage", DbType:="VarChar(50)")>  _
	Public Property Validate_StatusMessage() As String
		Get
			Return Me._Validate_StatusMessage
		End Get
		Set
			If (String.Equals(Me._Validate_StatusMessage, value) = false) Then
				Me.OnValidate_StatusMessageChanging(value)
				Me.SendPropertyChanging
				Me._Validate_StatusMessage = value
				Me.SendPropertyChanged("Validate_StatusMessage")
				Me.OnValidate_StatusMessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Validate_Message", DbType:="VarChar(2000)")>  _
	Public Property Validate_Message() As String
		Get
			Return Me._Validate_Message
		End Get
		Set
			If (String.Equals(Me._Validate_Message, value) = false) Then
				Me.OnValidate_MessageChanging(value)
				Me.SendPropertyChanging
				Me._Validate_Message = value
				Me.SendPropertyChanged("Validate_Message")
				Me.OnValidate_MessageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Information", DbType:="VarChar(2000)")>  _
	Public Property Teacher_Information() As String
		Get
			Return Me._Teacher_Information
		End Get
		Set
			If (String.Equals(Me._Teacher_Information, value) = false) Then
				Me.OnTeacher_InformationChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Information = value
				Me.SendPropertyChanged("Teacher_Information")
				Me.OnTeacher_InformationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20)")>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Id", DbType:="UniqueIdentifier")>  _
	Public Property Teacher_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Teacher_Id
		End Get
		Set
			If (Me._Teacher_Id.Equals(value) = false) Then
				Me.OnTeacher_IdChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Id = value
				Me.SendPropertyChanged("Teacher_Id")
				Me.OnTeacher_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Teacher_Code() As String
		Get
			Return Me._Teacher_Code
		End Get
		Set
			If (String.Equals(Me._Teacher_Code, value) = false) Then
				Me.OnTeacher_CodeChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Code = value
				Me.SendPropertyChanged("Teacher_Code")
				Me.OnTeacher_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_PrefixName", DbType:="VarChar(50)")>  _
	Public Property Teacher_PrefixName() As String
		Get
			Return Me._Teacher_PrefixName
		End Get
		Set
			If (String.Equals(Me._Teacher_PrefixName, value) = false) Then
				Me.OnTeacher_PrefixNameChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_PrefixName = value
				Me.SendPropertyChanged("Teacher_PrefixName")
				Me.OnTeacher_PrefixNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_FirstName", DbType:="VarChar(50)")>  _
	Public Property Teacher_FirstName() As String
		Get
			Return Me._Teacher_FirstName
		End Get
		Set
			If (String.Equals(Me._Teacher_FirstName, value) = false) Then
				Me.OnTeacher_FirstNameChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_FirstName = value
				Me.SendPropertyChanged("Teacher_FirstName")
				Me.OnTeacher_FirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_LastName", DbType:="VarChar(50)")>  _
	Public Property Teacher_LastName() As String
		Get
			Return Me._Teacher_LastName
		End Get
		Set
			If (String.Equals(Me._Teacher_LastName, value) = false) Then
				Me.OnTeacher_LastNameChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_LastName = value
				Me.SendPropertyChanged("Teacher_LastName")
				Me.OnTeacher_LastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Phone", DbType:="VarChar(50)")>  _
	Public Property Teacher_Phone() As String
		Get
			Return Me._Teacher_Phone
		End Get
		Set
			If (String.Equals(Me._Teacher_Phone, value) = false) Then
				Me.OnTeacher_PhoneChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Phone = value
				Me.SendPropertyChanged("Teacher_Phone")
				Me.OnTeacher_PhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Status", DbType:="TinyInt")>  _
	Public Property Teacher_Status() As System.Nullable(Of Byte)
		Get
			Return Me._Teacher_Status
		End Get
		Set
			If (Me._Teacher_Status.Equals(value) = false) Then
				Me.OnTeacher_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Status = value
				Me.SendPropertyChanged("Teacher_Status")
				Me.OnTeacher_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_CurrentClass", DbType:="VarChar(50)")>  _
	Public Property Teacher_CurrentClass() As String
		Get
			Return Me._Teacher_CurrentClass
		End Get
		Set
			If (String.Equals(Me._Teacher_CurrentClass, value) = false) Then
				Me.OnTeacher_CurrentClassChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_CurrentClass = value
				Me.SendPropertyChanged("Teacher_CurrentClass")
				Me.OnTeacher_CurrentClassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_CurrentRoom", DbType:="VarChar(50)")>  _
	Public Property Teacher_CurrentRoom() As String
		Get
			Return Me._Teacher_CurrentRoom
		End Get
		Set
			If (String.Equals(Me._Teacher_CurrentRoom, value) = false) Then
				Me.OnTeacher_CurrentRoomChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_CurrentRoom = value
				Me.SendPropertyChanged("Teacher_CurrentRoom")
				Me.OnTeacher_CurrentRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Number", DbType:="VarChar(50)")>  _
	Public Property Teacher_Number() As String
		Get
			Return Me._Teacher_Number
		End Get
		Set
			If (String.Equals(Me._Teacher_Number, value) = false) Then
				Me.OnTeacher_NumberChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Number = value
				Me.SendPropertyChanged("Teacher_Number")
				Me.OnTeacher_NumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Soi", DbType:="VarChar(100)")>  _
	Public Property Teacher_Soi() As String
		Get
			Return Me._Teacher_Soi
		End Get
		Set
			If (String.Equals(Me._Teacher_Soi, value) = false) Then
				Me.OnTeacher_SoiChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Soi = value
				Me.SendPropertyChanged("Teacher_Soi")
				Me.OnTeacher_SoiChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_Street", DbType:="VarChar(100)")>  _
	Public Property Teacher_Street() As String
		Get
			Return Me._Teacher_Street
		End Get
		Set
			If (String.Equals(Me._Teacher_Street, value) = false) Then
				Me.OnTeacher_StreetChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_Street = value
				Me.SendPropertyChanged("Teacher_Street")
				Me.OnTeacher_StreetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubDistrict_Id", DbType:="Int")>  _
	Public Property SubDistrict_Id() As System.Nullable(Of Integer)
		Get
			Return Me._SubDistrict_Id
		End Get
		Set
			If (Me._SubDistrict_Id.Equals(value) = false) Then
				Me.OnSubDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._SubDistrict_Id = value
				Me.SendPropertyChanged("SubDistrict_Id")
				Me.OnSubDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_District_Id", DbType:="Int")>  _
	Public Property District_Id() As System.Nullable(Of Integer)
		Get
			Return Me._District_Id
		End Get
		Set
			If (Me._District_Id.Equals(value) = false) Then
				Me.OnDistrict_IdChanging(value)
				Me.SendPropertyChanging
				Me._District_Id = value
				Me.SendPropertyChanged("District_Id")
				Me.OnDistrict_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province_Id", DbType:="Int")>  _
	Public Property Province_Id() As System.Nullable(Of Integer)
		Get
			Return Me._Province_Id
		End Get
		Set
			If (Me._Province_Id.Equals(value) = false) Then
				Me.OnProvince_IdChanging(value)
				Me.SendPropertyChanging
				Me._Province_Id = value
				Me.SendPropertyChanged("Province_Id")
				Me.OnProvince_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Teacher_IsActive", DbType:="Bit")>  _
	Public Property Teacher_IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._Teacher_IsActive
		End Get
		Set
			If (Me._Teacher_IsActive.Equals(value) = false) Then
				Me.OnTeacher_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Teacher_IsActive = value
				Me.SendPropertyChanged("Teacher_IsActive")
				Me.OnTeacher_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="VarChar(50)")>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50)")>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTabletLab")>  _
Partial Public Class tblTabletLab
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TabletLab_Id As System.Guid
	
	Private _TabletLab_Name As String
	
	Private _School_Code As String
	
	Private _Description As String
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _tblTabletLabDesks As EntitySet(Of tblTabletLabDesk)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTabletLab_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTabletLab_IdChanged()
    End Sub
    Partial Private Sub OnTabletLab_NameChanging(value As String)
    End Sub
    Partial Private Sub OnTabletLab_NameChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblTabletLabDesks = New EntitySet(Of tblTabletLabDesk)(AddressOf Me.attach_tblTabletLabDesks, AddressOf Me.detach_tblTabletLabDesks)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabletLab_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TabletLab_Id() As System.Guid
		Get
			Return Me._TabletLab_Id
		End Get
		Set
			If ((Me._TabletLab_Id = value)  _
						= false) Then
				Me.OnTabletLab_IdChanging(value)
				Me.SendPropertyChanging
				Me._TabletLab_Id = value
				Me.SendPropertyChanged("TabletLab_Id")
				Me.OnTabletLab_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabletLab_Name", DbType:="VarChar(MAX)")>  _
	Public Property TabletLab_Name() As String
		Get
			Return Me._TabletLab_Name
		End Get
		Set
			If (String.Equals(Me._TabletLab_Name, value) = false) Then
				Me.OnTabletLab_NameChanging(value)
				Me.SendPropertyChanging
				Me._TabletLab_Name = value
				Me.SendPropertyChanged("TabletLab_Name")
				Me.OnTabletLab_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblTabletLab_tblTabletLabDesk", Storage:="_tblTabletLabDesks", ThisKey:="TabletLab_Id", OtherKey:="TabletLab_Id")>  _
	Public Property tblTabletLabDesks() As EntitySet(Of tblTabletLabDesk)
		Get
			Return Me._tblTabletLabDesks
		End Get
		Set
			Me._tblTabletLabDesks.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblTabletLabDesks(ByVal entity As tblTabletLabDesk)
		Me.SendPropertyChanging
		entity.tblTabletLab = Me
	End Sub
	
	Private Sub detach_tblTabletLabDesks(ByVal entity As tblTabletLabDesk)
		Me.SendPropertyChanging
		entity.tblTabletLab = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTabletLabDesk")>  _
Partial Public Class tblTabletLabDesk
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TLD_Id As System.Guid
	
	Private _TabletLab_Id As System.Guid
	
	Private _Tablet_Id As System.Guid
	
	Private _DeskName As Byte
	
	Private _Player_Type As Byte
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _tblTabletLab As EntityRef(Of tblTabletLab)
	
	Private _t360_tblTablet As EntityRef(Of t360_tblTablet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTLD_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTLD_IdChanged()
    End Sub
    Partial Private Sub OnTabletLab_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTabletLab_IdChanged()
    End Sub
    Partial Private Sub OnTablet_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTablet_IdChanged()
    End Sub
    Partial Private Sub OnDeskNameChanging(value As Byte)
    End Sub
    Partial Private Sub OnDeskNameChanged()
    End Sub
    Partial Private Sub OnPlayer_TypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnPlayer_TypeChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblTabletLab = CType(Nothing, EntityRef(Of tblTabletLab))
		Me._t360_tblTablet = CType(Nothing, EntityRef(Of t360_tblTablet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TLD_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TLD_Id() As System.Guid
		Get
			Return Me._TLD_Id
		End Get
		Set
			If ((Me._TLD_Id = value)  _
						= false) Then
				Me.OnTLD_IdChanging(value)
				Me.SendPropertyChanging
				Me._TLD_Id = value
				Me.SendPropertyChanged("TLD_Id")
				Me.OnTLD_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TabletLab_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property TabletLab_Id() As System.Guid
		Get
			Return Me._TabletLab_Id
		End Get
		Set
			If ((Me._TabletLab_Id = value)  _
						= false) Then
				If Me._tblTabletLab.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTabletLab_IdChanging(value)
				Me.SendPropertyChanging
				Me._TabletLab_Id = value
				Me.SendPropertyChanged("TabletLab_Id")
				Me.OnTabletLab_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Tablet_Id() As System.Guid
		Get
			Return Me._Tablet_Id
		End Get
		Set
			If ((Me._Tablet_Id = value)  _
						= false) Then
				If Me._t360_tblTablet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTablet_IdChanging(value)
				Me.SendPropertyChanging
				Me._Tablet_Id = value
				Me.SendPropertyChanged("Tablet_Id")
				Me.OnTablet_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeskName", DbType:="TinyInt NOT NULL")>  _
	Public Property DeskName() As Byte
		Get
			Return Me._DeskName
		End Get
		Set
			If ((Me._DeskName = value)  _
						= false) Then
				Me.OnDeskNameChanging(value)
				Me.SendPropertyChanging
				Me._DeskName = value
				Me.SendPropertyChanged("DeskName")
				Me.OnDeskNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Player_Type", DbType:="TinyInt NOT NULL")>  _
	Public Property Player_Type() As Byte
		Get
			Return Me._Player_Type
		End Get
		Set
			If ((Me._Player_Type = value)  _
						= false) Then
				Me.OnPlayer_TypeChanging(value)
				Me.SendPropertyChanging
				Me._Player_Type = value
				Me.SendPropertyChanged("Player_Type")
				Me.OnPlayer_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblTabletLab_tblTabletLabDesk", Storage:="_tblTabletLab", ThisKey:="TabletLab_Id", OtherKey:="TabletLab_Id", IsForeignKey:=true)>  _
	Public Property tblTabletLab() As tblTabletLab
		Get
			Return Me._tblTabletLab.Entity
		End Get
		Set
			Dim previousValue As tblTabletLab = Me._tblTabletLab.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblTabletLab.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblTabletLab.Entity = Nothing
					previousValue.tblTabletLabDesks.Remove(Me)
				End If
				Me._tblTabletLab.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblTabletLabDesks.Add(Me)
					Me._TabletLab_Id = value.TabletLab_Id
				Else
					Me._TabletLab_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("tblTabletLab")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTablet_tblTabletLabDesk", Storage:="_t360_tblTablet", ThisKey:="Tablet_Id", OtherKey:="Tablet_Id", IsForeignKey:=true)>  _
	Public Property t360_tblTablet() As t360_tblTablet
		Get
			Return Me._t360_tblTablet.Entity
		End Get
		Set
			Dim previousValue As t360_tblTablet = Me._t360_tblTablet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTablet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTablet.Entity = Nothing
					previousValue.tblTabletLabDesks.Remove(Me)
				End If
				Me._t360_tblTablet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblTabletLabDesks.Add(Me)
					Me._Tablet_Id = value.Tablet_Id
				Else
					Me._Tablet_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblTablet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblUpLevel")>  _
Partial Public Class t360_tblUpLevel
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UpLevel_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Rundate As System.Nullable(Of Date)
	
	Private _UpLevel_Type As System.Nullable(Of Byte)
	
	Private _ScheduleDate As System.Nullable(Of Date)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _Calendar_Year As String
	
	Private _LastUpdate As Date
	
	Private _ClientId As String
	
	Private _Calendar_Id As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUpLevel_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUpLevel_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnRundateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRundateChanged()
    End Sub
    Partial Private Sub OnUpLevel_TypeChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnUpLevel_TypeChanged()
    End Sub
    Partial Private Sub OnScheduleDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnScheduleDateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnCalendar_YearChanging(value As String)
    End Sub
    Partial Private Sub OnCalendar_YearChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnCalendar_IdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnCalendar_IdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpLevel_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UpLevel_Id() As System.Guid
		Get
			Return Me._UpLevel_Id
		End Get
		Set
			If ((Me._UpLevel_Id = value)  _
						= false) Then
				Me.OnUpLevel_IdChanging(value)
				Me.SendPropertyChanging
				Me._UpLevel_Id = value
				Me.SendPropertyChanged("UpLevel_Id")
				Me.OnUpLevel_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rundate", DbType:="DateTime")>  _
	Public Property Rundate() As System.Nullable(Of Date)
		Get
			Return Me._Rundate
		End Get
		Set
			If (Me._Rundate.Equals(value) = false) Then
				Me.OnRundateChanging(value)
				Me.SendPropertyChanging
				Me._Rundate = value
				Me.SendPropertyChanged("Rundate")
				Me.OnRundateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpLevel_Type", DbType:="TinyInt")>  _
	Public Property UpLevel_Type() As System.Nullable(Of Byte)
		Get
			Return Me._UpLevel_Type
		End Get
		Set
			If (Me._UpLevel_Type.Equals(value) = false) Then
				Me.OnUpLevel_TypeChanging(value)
				Me.SendPropertyChanging
				Me._UpLevel_Type = value
				Me.SendPropertyChanged("UpLevel_Type")
				Me.OnUpLevel_TypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ScheduleDate", DbType:="SmallDateTime")>  _
	Public Property ScheduleDate() As System.Nullable(Of Date)
		Get
			Return Me._ScheduleDate
		End Get
		Set
			If (Me._ScheduleDate.Equals(value) = false) Then
				Me.OnScheduleDateChanging(value)
				Me.SendPropertyChanging
				Me._ScheduleDate = value
				Me.SendPropertyChanged("ScheduleDate")
				Me.OnScheduleDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Year", DbType:="VarChar(4)")>  _
	Public Property Calendar_Year() As String
		Get
			Return Me._Calendar_Year
		End Get
		Set
			If (String.Equals(Me._Calendar_Year, value) = false) Then
				Me.OnCalendar_YearChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Year = value
				Me.SendPropertyChanged("Calendar_Year")
				Me.OnCalendar_YearChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calendar_Id", DbType:="UniqueIdentifier")>  _
	Public Property Calendar_Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Calendar_Id
		End Get
		Set
			If (Me._Calendar_Id.Equals(value) = false) Then
				Me.OnCalendar_IdChanging(value)
				Me.SendPropertyChanging
				Me._Calendar_Id = value
				Me.SendPropertyChanged("Calendar_Id")
				Me.OnCalendar_IdChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="")>  _
Partial Public Class t360_tblNewsDetailCompletion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NDC_Id As System.Guid
	
	Private _NR_Id As System.Guid
	
	Private _SchoolCode As String
	
	Private _User_Id As System.Guid
	
	Private _StudentIsSeen As Boolean
	
	Private _TeacherIsSeen As Boolean
	
	Private _ParentIsSeen As Boolean
	
	Private _IsActive As Boolean
	
	Private _Lastupdate As Date
	
	Private _ClientId As String
	
	Private _t360_tblNewsRoom As EntityRef(Of t360_tblNewsRoom)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNDC_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNDC_IdChanged()
    End Sub
    Partial Private Sub OnNR_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNR_IdChanged()
    End Sub
    Partial Private Sub OnSchoolCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchoolCodeChanged()
    End Sub
    Partial Private Sub OnUser_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUser_IdChanged()
    End Sub
    Partial Private Sub OnStudentIsSeenChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStudentIsSeenChanged()
    End Sub
    Partial Private Sub OnTeacherIsSeenChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTeacherIsSeenChanged()
    End Sub
    Partial Private Sub OnParentIsSeenChanging(value As Boolean)
    End Sub
    Partial Private Sub OnParentIsSeenChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastupdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastupdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblNewsRoom = CType(Nothing, EntityRef(Of t360_tblNewsRoom))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NDC_Id", AutoSync:=AutoSync.OnInsert, DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property NDC_Id() As System.Guid
		Get
			Return Me._NDC_Id
		End Get
		Set
			If ((Me._NDC_Id = value)  _
						= false) Then
				Me.OnNDC_IdChanging(value)
				Me.SendPropertyChanging
				Me._NDC_Id = value
				Me.SendPropertyChanged("NDC_Id")
				Me.OnNDC_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NR_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property NR_Id() As System.Guid
		Get
			Return Me._NR_Id
		End Get
		Set
			If ((Me._NR_Id = value)  _
						= false) Then
				If Me._t360_tblNewsRoom.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNR_IdChanging(value)
				Me.SendPropertyChanging
				Me._NR_Id = value
				Me.SendPropertyChanged("NR_Id")
				Me.OnNR_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolCode", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property SchoolCode() As String
		Get
			Return Me._SchoolCode
		End Get
		Set
			If (String.Equals(Me._SchoolCode, value) = false) Then
				Me.OnSchoolCodeChanging(value)
				Me.SendPropertyChanging
				Me._SchoolCode = value
				Me.SendPropertyChanged("SchoolCode")
				Me.OnSchoolCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property User_Id() As System.Guid
		Get
			Return Me._User_Id
		End Get
		Set
			If ((Me._User_Id = value)  _
						= false) Then
				Me.OnUser_IdChanging(value)
				Me.SendPropertyChanging
				Me._User_Id = value
				Me.SendPropertyChanged("User_Id")
				Me.OnUser_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentIsSeen", DbType:="Bit NOT NULL")>  _
	Public Property StudentIsSeen() As Boolean
		Get
			Return Me._StudentIsSeen
		End Get
		Set
			If ((Me._StudentIsSeen = value)  _
						= false) Then
				Me.OnStudentIsSeenChanging(value)
				Me.SendPropertyChanging
				Me._StudentIsSeen = value
				Me.SendPropertyChanged("StudentIsSeen")
				Me.OnStudentIsSeenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeacherIsSeen", DbType:="Bit NOT NULL")>  _
	Public Property TeacherIsSeen() As Boolean
		Get
			Return Me._TeacherIsSeen
		End Get
		Set
			If ((Me._TeacherIsSeen = value)  _
						= false) Then
				Me.OnTeacherIsSeenChanging(value)
				Me.SendPropertyChanging
				Me._TeacherIsSeen = value
				Me.SendPropertyChanged("TeacherIsSeen")
				Me.OnTeacherIsSeenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentIsSeen", DbType:="Bit NOT NULL")>  _
	Public Property ParentIsSeen() As Boolean
		Get
			Return Me._ParentIsSeen
		End Get
		Set
			If ((Me._ParentIsSeen = value)  _
						= false) Then
				Me.OnParentIsSeenChanging(value)
				Me.SendPropertyChanging
				Me._ParentIsSeen = value
				Me.SendPropertyChanged("ParentIsSeen")
				Me.OnParentIsSeenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lastupdate", DbType:="DateTime")>  _
	Public Property Lastupdate() As Date
		Get
			Return Me._Lastupdate
		End Get
		Set
			If ((Me._Lastupdate = value)  _
						= false) Then
				Me.OnLastupdateChanging(value)
				Me.SendPropertyChanging
				Me._Lastupdate = value
				Me.SendPropertyChanged("Lastupdate")
				Me.OnLastupdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblNewsRoom_t360_tblNewsDetailCompletion", Storage:="_t360_tblNewsRoom", ThisKey:="NR_Id", OtherKey:="NR_Id", IsForeignKey:=true)>  _
	Public Property t360_tblNewsRoom() As t360_tblNewsRoom
		Get
			Return Me._t360_tblNewsRoom.Entity
		End Get
		Set
			Dim previousValue As t360_tblNewsRoom = Me._t360_tblNewsRoom.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblNewsRoom.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblNewsRoom.Entity = Nothing
					previousValue.t360_tblNewsDetailCompletions.Remove(Me)
				End If
				Me._t360_tblNewsRoom.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblNewsDetailCompletions.Add(Me)
					Me._NR_Id = value.NR_Id
				Else
					Me._NR_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblNewsRoom")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTabletStatusDetail")>  _
Partial Public Class t360_tblTabletStatusDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TSD_Id As System.Guid
	
	Private _Tablet_Id As System.Guid
	
	Private _TSD_TabletType As Byte
	
	Private _TSD_Status As Byte
	
	Private _TSD_SendToFixorLostDate As System.Nullable(Of Date)
	
	Private _TSD_FollowUp As System.Nullable(Of Byte)
	
	Private _TSD_FolliowUpDate As System.Nullable(Of Date)
	
	Private _TSD_SendToFixorLostReportAt As String
	
	Private _TSD_SendToFixorLostReportDocNo As String
	
	Private _TSD_SendToFixTel As String
	
	Private _TSD_Remark As String
	
	Private _School_Code As String
	
	Private _LastUpdate As Date
	
	Private _IsActive As Boolean
	
	Private _ClientId As String
	
	Private _t360_tblTablet As EntityRef(Of t360_tblTablet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTSD_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTSD_IdChanged()
    End Sub
    Partial Private Sub OnTablet_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTablet_IdChanged()
    End Sub
    Partial Private Sub OnTSD_TabletTypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnTSD_TabletTypeChanged()
    End Sub
    Partial Private Sub OnTSD_StatusChanging(value As Byte)
    End Sub
    Partial Private Sub OnTSD_StatusChanged()
    End Sub
    Partial Private Sub OnTSD_SendToFixorLostDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTSD_SendToFixorLostDateChanged()
    End Sub
    Partial Private Sub OnTSD_FollowUpChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnTSD_FollowUpChanged()
    End Sub
    Partial Private Sub OnTSD_FolliowUpDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTSD_FolliowUpDateChanged()
    End Sub
    Partial Private Sub OnTSD_SendToFixorLostReportAtChanging(value As String)
    End Sub
    Partial Private Sub OnTSD_SendToFixorLostReportAtChanged()
    End Sub
    Partial Private Sub OnTSD_SendToFixorLostReportDocNoChanging(value As String)
    End Sub
    Partial Private Sub OnTSD_SendToFixorLostReportDocNoChanged()
    End Sub
    Partial Private Sub OnTSD_SendToFixTelChanging(value As String)
    End Sub
    Partial Private Sub OnTSD_SendToFixTelChanged()
    End Sub
    Partial Private Sub OnTSD_RemarkChanging(value As String)
    End Sub
    Partial Private Sub OnTSD_RemarkChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblTablet = CType(Nothing, EntityRef(Of t360_tblTablet))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TSD_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TSD_Id() As System.Guid
		Get
			Return Me._TSD_Id
		End Get
		Set
			If ((Me._TSD_Id = value)  _
						= false) Then
				Me.OnTSD_IdChanging(value)
				Me.SendPropertyChanging
				Me._TSD_Id = value
				Me.SendPropertyChanged("TSD_Id")
				Me.OnTSD_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Tablet_Id() As System.Guid
		Get
			Return Me._Tablet_Id
		End Get
		Set
			If ((Me._Tablet_Id = value)  _
						= false) Then
				If Me._t360_tblTablet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTablet_IdChanging(value)
				Me.SendPropertyChanging
				Me._Tablet_Id = value
				Me.SendPropertyChanged("Tablet_Id")
				Me.OnTablet_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TSD_TabletType", DbType:="TinyInt NOT NULL")>  _
	Public Property TSD_TabletType() As Byte
		Get
			Return Me._TSD_TabletType
		End Get
		Set
			If ((Me._TSD_TabletType = value)  _
						= false) Then
				Me.OnTSD_TabletTypeChanging(value)
				Me.SendPropertyChanging
				Me._TSD_TabletType = value
				Me.SendPropertyChanged("TSD_TabletType")
				Me.OnTSD_TabletTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TSD_Status", DbType:="TinyInt NOT NULL")>  _
	Public Property TSD_Status() As Byte
		Get
			Return Me._TSD_Status
		End Get
		Set
			If ((Me._TSD_Status = value)  _
						= false) Then
				Me.OnTSD_StatusChanging(value)
				Me.SendPropertyChanging
				Me._TSD_Status = value
				Me.SendPropertyChanged("TSD_Status")
				Me.OnTSD_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TSD_SendToFixorLostDate", DbType:="SmallDateTime")>  _
	Public Property TSD_SendToFixorLostDate() As System.Nullable(Of Date)
		Get
			Return Me._TSD_SendToFixorLostDate
		End Get
		Set
			If (Me._TSD_SendToFixorLostDate.Equals(value) = false) Then
				Me.OnTSD_SendToFixorLostDateChanging(value)
				Me.SendPropertyChanging
				Me._TSD_SendToFixorLostDate = value
				Me.SendPropertyChanged("TSD_SendToFixorLostDate")
				Me.OnTSD_SendToFixorLostDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TSD_FollowUp", DbType:="TinyInt")>  _
	Public Property TSD_FollowUp() As System.Nullable(Of Byte)
		Get
			Return Me._TSD_FollowUp
		End Get
		Set
			If (Me._TSD_FollowUp.Equals(value) = false) Then
				Me.OnTSD_FollowUpChanging(value)
				Me.SendPropertyChanging
				Me._TSD_FollowUp = value
				Me.SendPropertyChanged("TSD_FollowUp")
				Me.OnTSD_FollowUpChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TSD_FolliowUpDate", DbType:="SmallDateTime")>  _
	Public Property TSD_FolliowUpDate() As System.Nullable(Of Date)
		Get
			Return Me._TSD_FolliowUpDate
		End Get
		Set
			If (Me._TSD_FolliowUpDate.Equals(value) = false) Then
				Me.OnTSD_FolliowUpDateChanging(value)
				Me.SendPropertyChanging
				Me._TSD_FolliowUpDate = value
				Me.SendPropertyChanged("TSD_FolliowUpDate")
				Me.OnTSD_FolliowUpDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TSD_SendToFixorLostReportAt", DbType:="VarChar(250)")>  _
	Public Property TSD_SendToFixorLostReportAt() As String
		Get
			Return Me._TSD_SendToFixorLostReportAt
		End Get
		Set
			If (String.Equals(Me._TSD_SendToFixorLostReportAt, value) = false) Then
				Me.OnTSD_SendToFixorLostReportAtChanging(value)
				Me.SendPropertyChanging
				Me._TSD_SendToFixorLostReportAt = value
				Me.SendPropertyChanged("TSD_SendToFixorLostReportAt")
				Me.OnTSD_SendToFixorLostReportAtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TSD_SendToFixorLostReportDocNo", DbType:="VarChar(20)")>  _
	Public Property TSD_SendToFixorLostReportDocNo() As String
		Get
			Return Me._TSD_SendToFixorLostReportDocNo
		End Get
		Set
			If (String.Equals(Me._TSD_SendToFixorLostReportDocNo, value) = false) Then
				Me.OnTSD_SendToFixorLostReportDocNoChanging(value)
				Me.SendPropertyChanging
				Me._TSD_SendToFixorLostReportDocNo = value
				Me.SendPropertyChanged("TSD_SendToFixorLostReportDocNo")
				Me.OnTSD_SendToFixorLostReportDocNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TSD_SendToFixTel", DbType:="VarChar(20)")>  _
	Public Property TSD_SendToFixTel() As String
		Get
			Return Me._TSD_SendToFixTel
		End Get
		Set
			If (String.Equals(Me._TSD_SendToFixTel, value) = false) Then
				Me.OnTSD_SendToFixTelChanging(value)
				Me.SendPropertyChanging
				Me._TSD_SendToFixTel = value
				Me.SendPropertyChanged("TSD_SendToFixTel")
				Me.OnTSD_SendToFixTelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TSD_Remark", DbType:="VarChar(255)")>  _
	Public Property TSD_Remark() As String
		Get
			Return Me._TSD_Remark
		End Get
		Set
			If (String.Equals(Me._TSD_Remark, value) = false) Then
				Me.OnTSD_RemarkChanging(value)
				Me.SendPropertyChanging
				Me._TSD_Remark = value
				Me.SendPropertyChanged("TSD_Remark")
				Me.OnTSD_RemarkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTablet_t360_tblTabletStatusDetail", Storage:="_t360_tblTablet", ThisKey:="Tablet_Id", OtherKey:="Tablet_Id", IsForeignKey:=true)>  _
	Public Property t360_tblTablet() As t360_tblTablet
		Get
			Return Me._t360_tblTablet.Entity
		End Get
		Set
			Dim previousValue As t360_tblTablet = Me._t360_tblTablet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblTablet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblTablet.Entity = Nothing
					previousValue.t360_tblTabletStatusDetails.Remove(Me)
				End If
				Me._t360_tblTablet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblTabletStatusDetails.Add(Me)
					Me._Tablet_Id = value.Tablet_Id
				Else
					Me._Tablet_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblTablet")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblTablet")>  _
Partial Public Class t360_tblTablet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Tablet_Id As System.Guid
	
	Private _School_Code As String
	
	Private _Tablet_SerialNumber As String
	
	Private _Tablet_IsOwner As Boolean
	
	Private _Tablet_Status As Byte
	
	Private _Tablet_IsActive As Boolean
	
	Private _Tablet_TabletName As String
	
	Private _Tablet_LastUpdate As Date
	
	Private _LastUpdate As System.Nullable(Of Date)
	
	Private _ClientId As String
	
	Private _AssetNo As String
	
	Private _t360_tblTabletOwners As EntitySet(Of t360_tblTabletOwner)
	
	Private _tblTabletLabDesks As EntitySet(Of tblTabletLabDesk)
	
	Private _t360_tblTabletStatusDetails As EntitySet(Of t360_tblTabletStatusDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTablet_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnTablet_IdChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    Partial Private Sub OnTablet_SerialNumberChanging(value As String)
    End Sub
    Partial Private Sub OnTablet_SerialNumberChanged()
    End Sub
    Partial Private Sub OnTablet_IsOwnerChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTablet_IsOwnerChanged()
    End Sub
    Partial Private Sub OnTablet_StatusChanging(value As Byte)
    End Sub
    Partial Private Sub OnTablet_StatusChanged()
    End Sub
    Partial Private Sub OnTablet_IsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnTablet_IsActiveChanged()
    End Sub
    Partial Private Sub OnTablet_TabletNameChanging(value As String)
    End Sub
    Partial Private Sub OnTablet_TabletNameChanged()
    End Sub
    Partial Private Sub OnTablet_LastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnTablet_LastUpdateChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    Partial Private Sub OnClientIdChanging(value As String)
    End Sub
    Partial Private Sub OnClientIdChanged()
    End Sub
    Partial Private Sub OnAssetNoChanging(value As String)
    End Sub
    Partial Private Sub OnAssetNoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblTabletOwners = New EntitySet(Of t360_tblTabletOwner)(AddressOf Me.attach_t360_tblTabletOwners, AddressOf Me.detach_t360_tblTabletOwners)
		Me._tblTabletLabDesks = New EntitySet(Of tblTabletLabDesk)(AddressOf Me.attach_tblTabletLabDesks, AddressOf Me.detach_tblTabletLabDesks)
		Me._t360_tblTabletStatusDetails = New EntitySet(Of t360_tblTabletStatusDetail)(AddressOf Me.attach_t360_tblTabletStatusDetails, AddressOf Me.detach_t360_tblTabletStatusDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_Id", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Tablet_Id() As System.Guid
		Get
			Return Me._Tablet_Id
		End Get
		Set
			If ((Me._Tablet_Id = value)  _
						= false) Then
				Me.OnTablet_IdChanging(value)
				Me.SendPropertyChanging
				Me._Tablet_Id = value
				Me.SendPropertyChanged("Tablet_Id")
				Me.OnTablet_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_SerialNumber", DbType:="VarChar(50)")>  _
	Public Property Tablet_SerialNumber() As String
		Get
			Return Me._Tablet_SerialNumber
		End Get
		Set
			If (String.Equals(Me._Tablet_SerialNumber, value) = false) Then
				Me.OnTablet_SerialNumberChanging(value)
				Me.SendPropertyChanging
				Me._Tablet_SerialNumber = value
				Me.SendPropertyChanged("Tablet_SerialNumber")
				Me.OnTablet_SerialNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_IsOwner", DbType:="Bit NOT NULL")>  _
	Public Property Tablet_IsOwner() As Boolean
		Get
			Return Me._Tablet_IsOwner
		End Get
		Set
			If ((Me._Tablet_IsOwner = value)  _
						= false) Then
				Me.OnTablet_IsOwnerChanging(value)
				Me.SendPropertyChanging
				Me._Tablet_IsOwner = value
				Me.SendPropertyChanged("Tablet_IsOwner")
				Me.OnTablet_IsOwnerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_Status", DbType:="TinyInt NOT NULL")>  _
	Public Property Tablet_Status() As Byte
		Get
			Return Me._Tablet_Status
		End Get
		Set
			If ((Me._Tablet_Status = value)  _
						= false) Then
				Me.OnTablet_StatusChanging(value)
				Me.SendPropertyChanging
				Me._Tablet_Status = value
				Me.SendPropertyChanged("Tablet_Status")
				Me.OnTablet_StatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property Tablet_IsActive() As Boolean
		Get
			Return Me._Tablet_IsActive
		End Get
		Set
			If ((Me._Tablet_IsActive = value)  _
						= false) Then
				Me.OnTablet_IsActiveChanging(value)
				Me.SendPropertyChanging
				Me._Tablet_IsActive = value
				Me.SendPropertyChanged("Tablet_IsActive")
				Me.OnTablet_IsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_TabletName", DbType:="VarChar(50)")>  _
	Public Property Tablet_TabletName() As String
		Get
			Return Me._Tablet_TabletName
		End Get
		Set
			If (String.Equals(Me._Tablet_TabletName, value) = false) Then
				Me.OnTablet_TabletNameChanging(value)
				Me.SendPropertyChanging
				Me._Tablet_TabletName = value
				Me.SendPropertyChanged("Tablet_TabletName")
				Me.OnTablet_TabletNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_LastUpdate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property Tablet_LastUpdate() As Date
		Get
			Return Me._Tablet_LastUpdate
		End Get
		Set
			If ((Me._Tablet_LastUpdate = value)  _
						= false) Then
				Me.OnTablet_LastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._Tablet_LastUpdate = value
				Me.SendPropertyChanged("Tablet_LastUpdate")
				Me.OnTablet_LastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As System.Nullable(Of Date)
		Get
			Return Me._LastUpdate
		End Get
		Set
			If (Me._LastUpdate.Equals(value) = false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientId", DbType:="VarChar(50)")>  _
	Public Property ClientId() As String
		Get
			Return Me._ClientId
		End Get
		Set
			If (String.Equals(Me._ClientId, value) = false) Then
				Me.OnClientIdChanging(value)
				Me.SendPropertyChanging
				Me._ClientId = value
				Me.SendPropertyChanged("ClientId")
				Me.OnClientIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssetNo", DbType:="VarChar(50)")>  _
	Public Property AssetNo() As String
		Get
			Return Me._AssetNo
		End Get
		Set
			If (String.Equals(Me._AssetNo, value) = false) Then
				Me.OnAssetNoChanging(value)
				Me.SendPropertyChanging
				Me._AssetNo = value
				Me.SendPropertyChanged("AssetNo")
				Me.OnAssetNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTablet_t360_tblTabletOwner", Storage:="_t360_tblTabletOwners", ThisKey:="Tablet_Id", OtherKey:="Tablet_Id")>  _
	Public Property t360_tblTabletOwners() As EntitySet(Of t360_tblTabletOwner)
		Get
			Return Me._t360_tblTabletOwners
		End Get
		Set
			Me._t360_tblTabletOwners.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTablet_tblTabletLabDesk", Storage:="_tblTabletLabDesks", ThisKey:="Tablet_Id", OtherKey:="Tablet_Id")>  _
	Public Property tblTabletLabDesks() As EntitySet(Of tblTabletLabDesk)
		Get
			Return Me._tblTabletLabDesks
		End Get
		Set
			Me._tblTabletLabDesks.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblTablet_t360_tblTabletStatusDetail", Storage:="_t360_tblTabletStatusDetails", ThisKey:="Tablet_Id", OtherKey:="Tablet_Id")>  _
	Public Property t360_tblTabletStatusDetails() As EntitySet(Of t360_tblTabletStatusDetail)
		Get
			Return Me._t360_tblTabletStatusDetails
		End Get
		Set
			Me._t360_tblTabletStatusDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_t360_tblTabletOwners(ByVal entity As t360_tblTabletOwner)
		Me.SendPropertyChanging
		entity.t360_tblTablet = Me
	End Sub
	
	Private Sub detach_t360_tblTabletOwners(ByVal entity As t360_tblTabletOwner)
		Me.SendPropertyChanging
		entity.t360_tblTablet = Nothing
	End Sub
	
	Private Sub attach_tblTabletLabDesks(ByVal entity As tblTabletLabDesk)
		Me.SendPropertyChanging
		entity.t360_tblTablet = Me
	End Sub
	
	Private Sub detach_tblTabletLabDesks(ByVal entity As tblTabletLabDesk)
		Me.SendPropertyChanging
		entity.t360_tblTablet = Nothing
	End Sub
	
	Private Sub attach_t360_tblTabletStatusDetails(ByVal entity As t360_tblTabletStatusDetail)
		Me.SendPropertyChanging
		entity.t360_tblTablet = Me
	End Sub
	
	Private Sub detach_t360_tblTabletStatusDetails(ByVal entity As t360_tblTabletStatusDetail)
		Me.SendPropertyChanging
		entity.t360_tblTablet = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.t360_tblNetworkWarnReason")>  _
Partial Public Class t360_tblNetworkWarnReason
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _NWId As System.Guid
	
	Private _Network_Id As System.Guid
	
	Private _User_Id As System.Guid
	
	Private _User_Name As String
	
	Private _WarnReason As String
	
	Private _CloseWarnDate As Date
	
	Private _School_Code As String
	
	Private _t360_tblNetwork As EntityRef(Of t360_tblNetwork)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnNWIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNWIdChanged()
    End Sub
    Partial Private Sub OnNetwork_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnNetwork_IdChanged()
    End Sub
    Partial Private Sub OnUser_IdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUser_IdChanged()
    End Sub
    Partial Private Sub OnUser_NameChanging(value As String)
    End Sub
    Partial Private Sub OnUser_NameChanged()
    End Sub
    Partial Private Sub OnWarnReasonChanging(value As String)
    End Sub
    Partial Private Sub OnWarnReasonChanged()
    End Sub
    Partial Private Sub OnCloseWarnDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCloseWarnDateChanged()
    End Sub
    Partial Private Sub OnSchool_CodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchool_CodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._t360_tblNetwork = CType(Nothing, EntityRef(Of t360_tblNetwork))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NWId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property NWId() As System.Guid
		Get
			Return Me._NWId
		End Get
		Set
			If ((Me._NWId = value)  _
						= false) Then
				Me.OnNWIdChanging(value)
				Me.SendPropertyChanging
				Me._NWId = value
				Me.SendPropertyChanged("NWId")
				Me.OnNWIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Network_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property Network_Id() As System.Guid
		Get
			Return Me._Network_Id
		End Get
		Set
			If ((Me._Network_Id = value)  _
						= false) Then
				If Me._t360_tblNetwork.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnNetwork_IdChanging(value)
				Me.SendPropertyChanging
				Me._Network_Id = value
				Me.SendPropertyChanged("Network_Id")
				Me.OnNetwork_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Id", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property User_Id() As System.Guid
		Get
			Return Me._User_Id
		End Get
		Set
			If ((Me._User_Id = value)  _
						= false) Then
				Me.OnUser_IdChanging(value)
				Me.SendPropertyChanging
				Me._User_Id = value
				Me.SendPropertyChanged("User_Id")
				Me.OnUser_IdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_User_Name", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property User_Name() As String
		Get
			Return Me._User_Name
		End Get
		Set
			If (String.Equals(Me._User_Name, value) = false) Then
				Me.OnUser_NameChanging(value)
				Me.SendPropertyChanging
				Me._User_Name = value
				Me.SendPropertyChanged("User_Name")
				Me.OnUser_NameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WarnReason", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property WarnReason() As String
		Get
			Return Me._WarnReason
		End Get
		Set
			If (String.Equals(Me._WarnReason, value) = false) Then
				Me.OnWarnReasonChanging(value)
				Me.SendPropertyChanging
				Me._WarnReason = value
				Me.SendPropertyChanged("WarnReason")
				Me.OnWarnReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CloseWarnDate", DbType:="SmallDateTime NOT NULL")>  _
	Public Property CloseWarnDate() As Date
		Get
			Return Me._CloseWarnDate
		End Get
		Set
			If ((Me._CloseWarnDate = value)  _
						= false) Then
				Me.OnCloseWarnDateChanging(value)
				Me.SendPropertyChanging
				Me._CloseWarnDate = value
				Me.SendPropertyChanged("CloseWarnDate")
				Me.OnCloseWarnDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me.OnSchool_CodeChanging(value)
				Me.SendPropertyChanging
				Me._School_Code = value
				Me.SendPropertyChanged("School_Code")
				Me.OnSchool_CodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="t360_tblNetwork_t360_tblNetworkWarnReason", Storage:="_t360_tblNetwork", ThisKey:="Network_Id", OtherKey:="Network_Id", IsForeignKey:=true)>  _
	Public Property t360_tblNetwork() As t360_tblNetwork
		Get
			Return Me._t360_tblNetwork.Entity
		End Get
		Set
			Dim previousValue As t360_tblNetwork = Me._t360_tblNetwork.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._t360_tblNetwork.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._t360_tblNetwork.Entity = Nothing
					previousValue.t360_tblNetworkWarnReasons.Remove(Me)
				End If
				Me._t360_tblNetwork.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.t360_tblNetworkWarnReasons.Add(Me)
					Me._Network_Id = value.Network_Id
				Else
					Me._Network_Id = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("t360_tblNetwork")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSchoolSubjectClass")>  _
Partial Public Class tblSchoolSubjectClass
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SSCId As System.Guid
	
	Private _SchoolCode As String
	
	Private _GroupSubjectId As System.Guid
	
	Private _LevelId As System.Guid
	
	Private _IsActive As Boolean
	
	Private _LastUpdate As Date
	
	Private _tblGroupSubject As EntityRef(Of tblGroupSubject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSSCIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnSSCIdChanged()
    End Sub
    Partial Private Sub OnSchoolCodeChanging(value As String)
    End Sub
    Partial Private Sub OnSchoolCodeChanged()
    End Sub
    Partial Private Sub OnGroupSubjectIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnGroupSubjectIdChanged()
    End Sub
    Partial Private Sub OnLevelIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnLevelIdChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnLastUpdateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblGroupSubject = CType(Nothing, EntityRef(Of tblGroupSubject))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SSCId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SSCId() As System.Guid
		Get
			Return Me._SSCId
		End Get
		Set
			If ((Me._SSCId = value)  _
						= false) Then
				Me.OnSSCIdChanging(value)
				Me.SendPropertyChanging
				Me._SSCId = value
				Me.SendPropertyChanged("SSCId")
				Me.OnSSCIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SchoolCode", DbType:="VarChar(50)")>  _
	Public Property SchoolCode() As String
		Get
			Return Me._SchoolCode
		End Get
		Set
			If (String.Equals(Me._SchoolCode, value) = false) Then
				Me.OnSchoolCodeChanging(value)
				Me.SendPropertyChanging
				Me._SchoolCode = value
				Me.SendPropertyChanged("SchoolCode")
				Me.OnSchoolCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GroupSubjectId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property GroupSubjectId() As System.Guid
		Get
			Return Me._GroupSubjectId
		End Get
		Set
			If ((Me._GroupSubjectId = value)  _
						= false) Then
				If Me._tblGroupSubject.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnGroupSubjectIdChanging(value)
				Me.SendPropertyChanging
				Me._GroupSubjectId = value
				Me.SendPropertyChanged("GroupSubjectId")
				Me.OnGroupSubjectIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LevelId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property LevelId() As System.Guid
		Get
			Return Me._LevelId
		End Get
		Set
			If ((Me._LevelId = value)  _
						= false) Then
				Me.OnLevelIdChanging(value)
				Me.SendPropertyChanging
				Me._LevelId = value
				Me.SendPropertyChanged("LevelId")
				Me.OnLevelIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdate", DbType:="DateTime")>  _
	Public Property LastUpdate() As Date
		Get
			Return Me._LastUpdate
		End Get
		Set
			If ((Me._LastUpdate = value)  _
						= false) Then
				Me.OnLastUpdateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdate = value
				Me.SendPropertyChanged("LastUpdate")
				Me.OnLastUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblGroupSubject_tblSchoolSubjectClass", Storage:="_tblGroupSubject", ThisKey:="GroupSubjectId", OtherKey:="GroupSubject_Id", IsForeignKey:=true)>  _
	Public Property tblGroupSubject() As tblGroupSubject
		Get
			Return Me._tblGroupSubject.Entity
		End Get
		Set
			Dim previousValue As tblGroupSubject = Me._tblGroupSubject.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblGroupSubject.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblGroupSubject.Entity = Nothing
					previousValue.tblSchoolSubjectClasses.Remove(Me)
				End If
				Me._tblGroupSubject.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblSchoolSubjectClasses.Add(Me)
					Me._GroupSubjectId = value.GroupSubject_Id
				Else
					Me._GroupSubjectId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("tblGroupSubject")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class spTabletStatusResult1
	
	Private _School_Code As String
	
	Private _Tablet_Status As Byte
	
	Private _Count_Status As System.Nullable(Of Integer)
	
	Private _Count_ALL As System.Nullable(Of Integer)
	
	Private _Percent_Status As System.Nullable(Of Decimal)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_School_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property School_Code() As String
		Get
			Return Me._School_Code
		End Get
		Set
			If (String.Equals(Me._School_Code, value) = false) Then
				Me._School_Code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tablet_Status", DbType:="TinyInt NOT NULL")>  _
	Public Property Tablet_Status() As Byte
		Get
			Return Me._Tablet_Status
		End Get
		Set
			If ((Me._Tablet_Status = value)  _
						= false) Then
				Me._Tablet_Status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Count_Status", DbType:="Int")>  _
	Public Property Count_Status() As System.Nullable(Of Integer)
		Get
			Return Me._Count_Status
		End Get
		Set
			If (Me._Count_Status.Equals(value) = false) Then
				Me._Count_Status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Count_ALL", DbType:="Int")>  _
	Public Property Count_ALL() As System.Nullable(Of Integer)
		Get
			Return Me._Count_ALL
		End Get
		Set
			If (Me._Count_ALL.Equals(value) = false) Then
				Me._Count_ALL = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Percent_Status", DbType:="Decimal(5,2)")>  _
	Public Property Percent_Status() As System.Nullable(Of Decimal)
		Get
			Return Me._Percent_Status
		End Get
		Set
			If (Me._Percent_Status.Equals(value) = false) Then
				Me._Percent_Status = value
			End If
		End Set
	End Property
End Class
